// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collection_schemes.proto

#include "collection_schemes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CollectionSchemesMsg {
PROTOBUF_CONSTEXPR CollectionSchemes::CollectionSchemes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collection_schemes_)*/{}
  , /*decltype(_impl_.timestamp_ms_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollectionSchemesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionSchemesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionSchemesDefaultTypeInternal() {}
  union {
    CollectionSchemes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionSchemesDefaultTypeInternal _CollectionSchemes_default_instance_;
PROTOBUF_CONSTEXPR CollectionScheme::CollectionScheme(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_information_)*/{}
  , /*decltype(_impl_.raw_can_frames_to_collect_)*/{}
  , /*decltype(_impl_.campaign_sync_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decoder_manifest_sync_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.probabilities_)*/nullptr
  , /*decltype(_impl_.s3_upload_metadata_)*/nullptr
  , /*decltype(_impl_.start_time_ms_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.expiry_time_ms_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.after_duration_ms_)*/0u
  , /*decltype(_impl_.include_active_dtcs_)*/false
  , /*decltype(_impl_.persist_all_collected_data_)*/false
  , /*decltype(_impl_.compress_collected_data_)*/false
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_.collection_scheme_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CollectionSchemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollectionSchemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollectionSchemeDefaultTypeInternal() {}
  union {
    CollectionScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollectionSchemeDefaultTypeInternal _CollectionScheme_default_instance_;
PROTOBUF_CONSTEXPR S3UploadMetadata::S3UploadMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bucket_owner_account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S3UploadMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3UploadMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3UploadMetadataDefaultTypeInternal() {}
  union {
    S3UploadMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3UploadMetadataDefaultTypeInternal _S3UploadMetadata_default_instance_;
PROTOBUF_CONSTEXPR Probabilities::Probabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.probability_to_send_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProbabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProbabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProbabilitiesDefaultTypeInternal() {}
  union {
    Probabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProbabilitiesDefaultTypeInternal _Probabilities_default_instance_;
PROTOBUF_CONSTEXPR TimeBasedCollectionScheme::TimeBasedCollectionScheme(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_based_collection_scheme_period_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeBasedCollectionSchemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeBasedCollectionSchemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeBasedCollectionSchemeDefaultTypeInternal() {}
  union {
    TimeBasedCollectionScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeBasedCollectionSchemeDefaultTypeInternal _TimeBasedCollectionScheme_default_instance_;
PROTOBUF_CONSTEXPR ConditionBasedCollectionScheme::ConditionBasedCollectionScheme(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.condition_tree_)*/nullptr
  , /*decltype(_impl_.condition_minimum_interval_ms_)*/0u
  , /*decltype(_impl_.condition_language_version_)*/0u
  , /*decltype(_impl_.condition_trigger_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConditionBasedCollectionSchemeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionBasedCollectionSchemeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionBasedCollectionSchemeDefaultTypeInternal() {}
  union {
    ConditionBasedCollectionScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionBasedCollectionSchemeDefaultTypeInternal _ConditionBasedCollectionScheme_default_instance_;
PROTOBUF_CONSTEXPR SignalInformation::SignalInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_path_)*/nullptr
  , /*decltype(_impl_.signal_id_)*/0u
  , /*decltype(_impl_.sample_buffer_size_)*/0u
  , /*decltype(_impl_.minimum_sample_period_ms_)*/0u
  , /*decltype(_impl_.fixed_window_period_ms_)*/0u
  , /*decltype(_impl_.condition_only_signal_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalInformationDefaultTypeInternal() {}
  union {
    SignalInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalInformationDefaultTypeInternal _SignalInformation_default_instance_;
PROTOBUF_CONSTEXPR RawCanFrame::RawCanFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.can_interface_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.can_message_id_)*/0u
  , /*decltype(_impl_.sample_buffer_size_)*/0u
  , /*decltype(_impl_.minimum_sample_period_ms_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RawCanFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawCanFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawCanFrameDefaultTypeInternal() {}
  union {
    RawCanFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawCanFrameDefaultTypeInternal _RawCanFrame_default_instance_;
}  // namespace CollectionSchemesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
static ::_pb::Metadata file_level_metadata_collection_5fschemes_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_collection_5fschemes_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_collection_5fschemes_2eproto = nullptr;

const uint32_t TableStruct_collection_5fschemes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes, _impl_.collection_schemes_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes, _impl_.timestamp_ms_epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.campaign_sync_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.decoder_manifest_sync_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.start_time_ms_epoch_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.expiry_time_ms_epoch_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.after_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.include_active_dtcs_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.signal_information_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.raw_can_frames_to_collect_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.persist_all_collected_data_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.compress_collected_data_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.probabilities_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.s3_upload_metadata_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme, _impl_.collection_scheme_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata, _impl_.bucket_name_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata, _impl_.prefix_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata, _impl_.bucket_owner_account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities, _impl_.probability_to_send_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme, _impl_.time_based_collection_scheme_period_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme, _impl_.condition_minimum_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme, _impl_.condition_language_version_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme, _impl_.condition_tree_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme, _impl_.condition_trigger_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation, _impl_.signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation, _impl_.signal_path_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation, _impl_.sample_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation, _impl_.minimum_sample_period_ms_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation, _impl_.fixed_window_period_ms_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation, _impl_.condition_only_signal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame, _impl_.can_interface_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame, _impl_.can_message_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame, _impl_.sample_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame, _impl_.minimum_sample_period_ms_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes)},
  { 8, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme)},
  { 30, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata)},
  { 40, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities)},
  { 47, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme)},
  { 54, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme)},
  { 64, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation)},
  { 76, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_CollectionSchemes_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_CollectionScheme_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_S3UploadMetadata_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_Probabilities_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_TimeBasedCollectionScheme_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_ConditionBasedCollectionScheme_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_SignalInformation_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_RawCanFrame_default_instance_._instance,
};

const char descriptor_table_protodef_collection_5fschemes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030collection_schemes.proto\022-Aws.IoTFleet"
  "Wise.Schemas.CollectionSchemesMsg\032\022commo"
  "n_types.proto\"\214\001\n\021CollectionSchemes\022[\n\022c"
  "ollection_schemes\030\001 \003(\0132\?.Aws.IoTFleetWi"
  "se.Schemas.CollectionSchemesMsg.Collecti"
  "onScheme\022\032\n\022timestamp_ms_epoch\030\002 \001(\004\"\241\007\n"
  "\020CollectionScheme\022\030\n\020campaign_sync_id\030\001 "
  "\001(\t\022 \n\030decoder_manifest_sync_id\030\002 \001(\t\022\033\n"
  "\023start_time_ms_epoch\030\003 \001(\004\022\034\n\024expiry_tim"
  "e_ms_epoch\030\004 \001(\004\022p\n\034time_based_collectio"
  "n_scheme\030\005 \001(\0132H.Aws.IoTFleetWise.Schema"
  "s.CollectionSchemesMsg.TimeBasedCollecti"
  "onSchemeH\000\022z\n!condition_based_collection"
  "_scheme\030\006 \001(\0132M.Aws.IoTFleetWise.Schemas"
  ".CollectionSchemesMsg.ConditionBasedColl"
  "ectionSchemeH\000\022\031\n\021after_duration_ms\030\007 \001("
  "\r\022\033\n\023include_active_dtcs\030\010 \001(\010\022\\\n\022signal"
  "_information\030\t \003(\0132@.Aws.IoTFleetWise.Sc"
  "hemas.CollectionSchemesMsg.SignalInforma"
  "tion\022]\n\031raw_can_frames_to_collect\030\n \003(\0132"
  ":.Aws.IoTFleetWise.Schemas.CollectionSch"
  "emesMsg.RawCanFrame\022\"\n\032persist_all_colle"
  "cted_data\030\013 \001(\010\022\037\n\027compress_collected_da"
  "ta\030\014 \001(\010\022\020\n\010priority\030\r \001(\r\022S\n\rprobabilit"
  "ies\030\016 \001(\0132<.Aws.IoTFleetWise.Schemas.Col"
  "lectionSchemesMsg.Probabilities\022[\n\022s3_up"
  "load_metadata\030\020 \001(\0132\?.Aws.IoTFleetWise.S"
  "chemas.CollectionSchemesMsg.S3UploadMeta"
  "dataB\030\n\026collection_scheme_typeJ\004\010\017\020\020R\nim"
  "age_data\"h\n\020S3UploadMetadata\022\023\n\013bucket_n"
  "ame\030\001 \001(\t\022\016\n\006prefix\030\002 \001(\t\022\016\n\006region\030\003 \001("
  "\t\022\037\n\027bucket_owner_account_id\030\004 \001(\t\",\n\rPr"
  "obabilities\022\033\n\023probability_to_send\030\001 \001(\001"
  "\"K\n\031TimeBasedCollectionScheme\022.\n&time_ba"
  "sed_collection_scheme_period_ms\030\001 \001(\r\"\215\003"
  "\n\036ConditionBasedCollectionScheme\022%\n\035cond"
  "ition_minimum_interval_ms\030\001 \001(\r\022\"\n\032condi"
  "tion_language_version\030\002 \001(\r\022N\n\016condition"
  "_tree\030\003 \001(\01326.Aws.IoTFleetWise.Schemas.C"
  "ommonTypesMsg.ConditionNode\022\202\001\n\026conditio"
  "n_trigger_mode\030\004 \001(\0162b.Aws.IoTFleetWise."
  "Schemas.CollectionSchemesMsg.ConditionBa"
  "sedCollectionScheme.ConditionTriggerMode"
  "\"K\n\024ConditionTriggerMode\022\022\n\016TRIGGER_ALWA"
  "YS\020\000\022\037\n\033TRIGGER_ONLY_ON_RISING_EDGE\020\001\"\355\001"
  "\n\021SignalInformation\022\021\n\tsignal_id\030\001 \001(\r\022H"
  "\n\013signal_path\030\006 \001(\01323.Aws.IoTFleetWise.S"
  "chemas.CommonTypesMsg.SignalPath\022\032\n\022samp"
  "le_buffer_size\030\002 \001(\r\022 \n\030minimum_sample_p"
  "eriod_ms\030\003 \001(\r\022\036\n\026fixed_window_period_ms"
  "\030\004 \001(\r\022\035\n\025condition_only_signal\030\005 \001(\010\"}\n"
  "\013RawCanFrame\022\030\n\020can_interface_id\030\001 \001(\t\022\026"
  "\n\016can_message_id\030\002 \001(\r\022\032\n\022sample_buffer_"
  "size\030\003 \001(\r\022 \n\030minimum_sample_period_ms\030\004"
  " \001(\rB$\n\"com.amazonaws.iot.autobahn.schem"
  "asb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_collection_5fschemes_2eproto_deps[1] = {
  &::descriptor_table_common_5ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_collection_5fschemes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_collection_5fschemes_2eproto = {
    false, false, 2210, descriptor_table_protodef_collection_5fschemes_2eproto,
    "collection_schemes.proto",
    &descriptor_table_collection_5fschemes_2eproto_once, descriptor_table_collection_5fschemes_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_collection_5fschemes_2eproto::offsets,
    file_level_metadata_collection_5fschemes_2eproto, file_level_enum_descriptors_collection_5fschemes_2eproto,
    file_level_service_descriptors_collection_5fschemes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_collection_5fschemes_2eproto_getter() {
  return &descriptor_table_collection_5fschemes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_collection_5fschemes_2eproto(&descriptor_table_collection_5fschemes_2eproto);
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CollectionSchemesMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionBasedCollectionScheme_ConditionTriggerMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_collection_5fschemes_2eproto);
  return file_level_enum_descriptors_collection_5fschemes_2eproto[0];
}
bool ConditionBasedCollectionScheme_ConditionTriggerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme::TRIGGER_ALWAYS;
constexpr ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme::TRIGGER_ONLY_ON_RISING_EDGE;
constexpr ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme::ConditionTriggerMode_MIN;
constexpr ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme::ConditionTriggerMode_MAX;
constexpr int ConditionBasedCollectionScheme::ConditionTriggerMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CollectionSchemes::_Internal {
 public:
};

CollectionSchemes::CollectionSchemes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
}
CollectionSchemes::CollectionSchemes(const CollectionSchemes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionSchemes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_schemes_){from._impl_.collection_schemes_}
    , decltype(_impl_.timestamp_ms_epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ms_epoch_ = from._impl_.timestamp_ms_epoch_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
}

inline void CollectionSchemes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collection_schemes_){arena}
    , decltype(_impl_.timestamp_ms_epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollectionSchemes::~CollectionSchemes() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionSchemes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collection_schemes_.~RepeatedPtrField();
}

void CollectionSchemes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionSchemes::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collection_schemes_.Clear();
  _impl_.timestamp_ms_epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionSchemes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme collection_schemes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collection_schemes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_ms_epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ms_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionSchemes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme collection_schemes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collection_schemes_size()); i < n; i++) {
    const auto& repfield = this->_internal_collection_schemes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 timestamp_ms_epoch = 2;
  if (this->_internal_timestamp_ms_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp_ms_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
  return target;
}

size_t CollectionSchemes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme collection_schemes = 1;
  total_size += 1UL * this->_internal_collection_schemes_size();
  for (const auto& msg : this->_impl_.collection_schemes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timestamp_ms_epoch = 2;
  if (this->_internal_timestamp_ms_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_ms_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionSchemes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionSchemes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionSchemes::GetClassData() const { return &_class_data_; }


void CollectionSchemes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionSchemes*>(&to_msg);
  auto& from = static_cast<const CollectionSchemes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collection_schemes_.MergeFrom(from._impl_.collection_schemes_);
  if (from._internal_timestamp_ms_epoch() != 0) {
    _this->_internal_set_timestamp_ms_epoch(from._internal_timestamp_ms_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionSchemes::CopyFrom(const CollectionSchemes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionSchemes::IsInitialized() const {
  return true;
}

void CollectionSchemes::InternalSwap(CollectionSchemes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collection_schemes_.InternalSwap(&other->_impl_.collection_schemes_);
  swap(_impl_.timestamp_ms_epoch_, other->_impl_.timestamp_ms_epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionSchemes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[0]);
}

// ===================================================================

class CollectionScheme::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme& time_based_collection_scheme(const CollectionScheme* msg);
  static const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme& condition_based_collection_scheme(const CollectionScheme* msg);
  static const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities& probabilities(const CollectionScheme* msg);
  static const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata& s3_upload_metadata(const CollectionScheme* msg);
};

const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme&
CollectionScheme::_Internal::time_based_collection_scheme(const CollectionScheme* msg) {
  return *msg->_impl_.collection_scheme_type_.time_based_collection_scheme_;
}
const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme&
CollectionScheme::_Internal::condition_based_collection_scheme(const CollectionScheme* msg) {
  return *msg->_impl_.collection_scheme_type_.condition_based_collection_scheme_;
}
const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities&
CollectionScheme::_Internal::probabilities(const CollectionScheme* msg) {
  return *msg->_impl_.probabilities_;
}
const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata&
CollectionScheme::_Internal::s3_upload_metadata(const CollectionScheme* msg) {
  return *msg->_impl_.s3_upload_metadata_;
}
void CollectionScheme::set_allocated_time_based_collection_scheme(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* time_based_collection_scheme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_collection_scheme_type();
  if (time_based_collection_scheme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time_based_collection_scheme);
    if (message_arena != submessage_arena) {
      time_based_collection_scheme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_based_collection_scheme, submessage_arena);
    }
    set_has_time_based_collection_scheme();
    _impl_.collection_scheme_type_.time_based_collection_scheme_ = time_based_collection_scheme;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.time_based_collection_scheme)
}
void CollectionScheme::set_allocated_condition_based_collection_scheme(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* condition_based_collection_scheme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_collection_scheme_type();
  if (condition_based_collection_scheme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(condition_based_collection_scheme);
    if (message_arena != submessage_arena) {
      condition_based_collection_scheme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition_based_collection_scheme, submessage_arena);
    }
    set_has_condition_based_collection_scheme();
    _impl_.collection_scheme_type_.condition_based_collection_scheme_ = condition_based_collection_scheme;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.condition_based_collection_scheme)
}
CollectionScheme::CollectionScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
}
CollectionScheme::CollectionScheme(const CollectionScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollectionScheme* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_information_){from._impl_.signal_information_}
    , decltype(_impl_.raw_can_frames_to_collect_){from._impl_.raw_can_frames_to_collect_}
    , decltype(_impl_.campaign_sync_id_){}
    , decltype(_impl_.decoder_manifest_sync_id_){}
    , decltype(_impl_.probabilities_){nullptr}
    , decltype(_impl_.s3_upload_metadata_){nullptr}
    , decltype(_impl_.start_time_ms_epoch_){}
    , decltype(_impl_.expiry_time_ms_epoch_){}
    , decltype(_impl_.after_duration_ms_){}
    , decltype(_impl_.include_active_dtcs_){}
    , decltype(_impl_.persist_all_collected_data_){}
    , decltype(_impl_.compress_collected_data_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.collection_scheme_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.campaign_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.campaign_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_campaign_sync_id().empty()) {
    _this->_impl_.campaign_sync_id_.Set(from._internal_campaign_sync_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.decoder_manifest_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decoder_manifest_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_decoder_manifest_sync_id().empty()) {
    _this->_impl_.decoder_manifest_sync_id_.Set(from._internal_decoder_manifest_sync_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_probabilities()) {
    _this->_impl_.probabilities_ = new ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities(*from._impl_.probabilities_);
  }
  if (from._internal_has_s3_upload_metadata()) {
    _this->_impl_.s3_upload_metadata_ = new ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata(*from._impl_.s3_upload_metadata_);
  }
  ::memcpy(&_impl_.start_time_ms_epoch_, &from._impl_.start_time_ms_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.start_time_ms_epoch_)) + sizeof(_impl_.priority_));
  clear_has_collection_scheme_type();
  switch (from.collection_scheme_type_case()) {
    case kTimeBasedCollectionScheme: {
      _this->_internal_mutable_time_based_collection_scheme()->::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme::MergeFrom(
          from._internal_time_based_collection_scheme());
      break;
    }
    case kConditionBasedCollectionScheme: {
      _this->_internal_mutable_condition_based_collection_scheme()->::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme::MergeFrom(
          from._internal_condition_based_collection_scheme());
      break;
    }
    case COLLECTION_SCHEME_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
}

inline void CollectionScheme::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_information_){arena}
    , decltype(_impl_.raw_can_frames_to_collect_){arena}
    , decltype(_impl_.campaign_sync_id_){}
    , decltype(_impl_.decoder_manifest_sync_id_){}
    , decltype(_impl_.probabilities_){nullptr}
    , decltype(_impl_.s3_upload_metadata_){nullptr}
    , decltype(_impl_.start_time_ms_epoch_){uint64_t{0u}}
    , decltype(_impl_.expiry_time_ms_epoch_){uint64_t{0u}}
    , decltype(_impl_.after_duration_ms_){0u}
    , decltype(_impl_.include_active_dtcs_){false}
    , decltype(_impl_.persist_all_collected_data_){false}
    , decltype(_impl_.compress_collected_data_){false}
    , decltype(_impl_.priority_){0u}
    , decltype(_impl_.collection_scheme_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.campaign_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.campaign_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.decoder_manifest_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decoder_manifest_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_collection_scheme_type();
}

CollectionScheme::~CollectionScheme() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollectionScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_information_.~RepeatedPtrField();
  _impl_.raw_can_frames_to_collect_.~RepeatedPtrField();
  _impl_.campaign_sync_id_.Destroy();
  _impl_.decoder_manifest_sync_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.probabilities_;
  if (this != internal_default_instance()) delete _impl_.s3_upload_metadata_;
  if (has_collection_scheme_type()) {
    clear_collection_scheme_type();
  }
}

void CollectionScheme::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollectionScheme::clear_collection_scheme_type() {
// @@protoc_insertion_point(one_of_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  switch (collection_scheme_type_case()) {
    case kTimeBasedCollectionScheme: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.collection_scheme_type_.time_based_collection_scheme_;
      }
      break;
    }
    case kConditionBasedCollectionScheme: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.collection_scheme_type_.condition_based_collection_scheme_;
      }
      break;
    }
    case COLLECTION_SCHEME_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COLLECTION_SCHEME_TYPE_NOT_SET;
}


void CollectionScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_information_.Clear();
  _impl_.raw_can_frames_to_collect_.Clear();
  _impl_.campaign_sync_id_.ClearToEmpty();
  _impl_.decoder_manifest_sync_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.probabilities_ != nullptr) {
    delete _impl_.probabilities_;
  }
  _impl_.probabilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.s3_upload_metadata_ != nullptr) {
    delete _impl_.s3_upload_metadata_;
  }
  _impl_.s3_upload_metadata_ = nullptr;
  ::memset(&_impl_.start_time_ms_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.start_time_ms_epoch_)) + sizeof(_impl_.priority_));
  clear_collection_scheme_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollectionScheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string campaign_sync_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_campaign_sync_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.campaign_sync_id"));
        } else
          goto handle_unusual;
        continue;
      // string decoder_manifest_sync_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_decoder_manifest_sync_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.decoder_manifest_sync_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 start_time_ms_epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_time_ms_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 expiry_time_ms_epoch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.expiry_time_ms_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme time_based_collection_scheme = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_based_collection_scheme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme condition_based_collection_scheme = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition_based_collection_scheme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 after_duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.after_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_active_dtcs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.include_active_dtcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation signal_information = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame raw_can_frames_to_collect = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_raw_can_frames_to_collect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool persist_all_collected_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.persist_all_collected_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool compress_collected_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.compress_collected_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 priority = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities probabilities = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_probabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata s3_upload_metadata = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_s3_upload_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollectionScheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string campaign_sync_id = 1;
  if (!this->_internal_campaign_sync_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_campaign_sync_id().data(), static_cast<int>(this->_internal_campaign_sync_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.campaign_sync_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_campaign_sync_id(), target);
  }

  // string decoder_manifest_sync_id = 2;
  if (!this->_internal_decoder_manifest_sync_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decoder_manifest_sync_id().data(), static_cast<int>(this->_internal_decoder_manifest_sync_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.decoder_manifest_sync_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_decoder_manifest_sync_id(), target);
  }

  // uint64 start_time_ms_epoch = 3;
  if (this->_internal_start_time_ms_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start_time_ms_epoch(), target);
  }

  // uint64 expiry_time_ms_epoch = 4;
  if (this->_internal_expiry_time_ms_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_expiry_time_ms_epoch(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme time_based_collection_scheme = 5;
  if (_internal_has_time_based_collection_scheme()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::time_based_collection_scheme(this),
        _Internal::time_based_collection_scheme(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme condition_based_collection_scheme = 6;
  if (_internal_has_condition_based_collection_scheme()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::condition_based_collection_scheme(this),
        _Internal::condition_based_collection_scheme(this).GetCachedSize(), target, stream);
  }

  // uint32 after_duration_ms = 7;
  if (this->_internal_after_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_after_duration_ms(), target);
  }

  // bool include_active_dtcs = 8;
  if (this->_internal_include_active_dtcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_include_active_dtcs(), target);
  }

  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation signal_information = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signal_information_size()); i < n; i++) {
    const auto& repfield = this->_internal_signal_information(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame raw_can_frames_to_collect = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_raw_can_frames_to_collect_size()); i < n; i++) {
    const auto& repfield = this->_internal_raw_can_frames_to_collect(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool persist_all_collected_data = 11;
  if (this->_internal_persist_all_collected_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_persist_all_collected_data(), target);
  }

  // bool compress_collected_data = 12;
  if (this->_internal_compress_collected_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_compress_collected_data(), target);
  }

  // uint32 priority = 13;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_priority(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities probabilities = 14;
  if (this->_internal_has_probabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::probabilities(this),
        _Internal::probabilities(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata s3_upload_metadata = 16;
  if (this->_internal_has_s3_upload_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::s3_upload_metadata(this),
        _Internal::s3_upload_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  return target;
}

size_t CollectionScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation signal_information = 9;
  total_size += 1UL * this->_internal_signal_information_size();
  for (const auto& msg : this->_impl_.signal_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame raw_can_frames_to_collect = 10;
  total_size += 1UL * this->_internal_raw_can_frames_to_collect_size();
  for (const auto& msg : this->_impl_.raw_can_frames_to_collect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string campaign_sync_id = 1;
  if (!this->_internal_campaign_sync_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_campaign_sync_id());
  }

  // string decoder_manifest_sync_id = 2;
  if (!this->_internal_decoder_manifest_sync_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decoder_manifest_sync_id());
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities probabilities = 14;
  if (this->_internal_has_probabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.probabilities_);
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata s3_upload_metadata = 16;
  if (this->_internal_has_s3_upload_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.s3_upload_metadata_);
  }

  // uint64 start_time_ms_epoch = 3;
  if (this->_internal_start_time_ms_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time_ms_epoch());
  }

  // uint64 expiry_time_ms_epoch = 4;
  if (this->_internal_expiry_time_ms_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expiry_time_ms_epoch());
  }

  // uint32 after_duration_ms = 7;
  if (this->_internal_after_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_after_duration_ms());
  }

  // bool include_active_dtcs = 8;
  if (this->_internal_include_active_dtcs() != 0) {
    total_size += 1 + 1;
  }

  // bool persist_all_collected_data = 11;
  if (this->_internal_persist_all_collected_data() != 0) {
    total_size += 1 + 1;
  }

  // bool compress_collected_data = 12;
  if (this->_internal_compress_collected_data() != 0) {
    total_size += 1 + 1;
  }

  // uint32 priority = 13;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  switch (collection_scheme_type_case()) {
    // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme time_based_collection_scheme = 5;
    case kTimeBasedCollectionScheme: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collection_scheme_type_.time_based_collection_scheme_);
      break;
    }
    // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme condition_based_collection_scheme = 6;
    case kConditionBasedCollectionScheme: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collection_scheme_type_.condition_based_collection_scheme_);
      break;
    }
    case COLLECTION_SCHEME_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollectionScheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollectionScheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollectionScheme::GetClassData() const { return &_class_data_; }


void CollectionScheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollectionScheme*>(&to_msg);
  auto& from = static_cast<const CollectionScheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signal_information_.MergeFrom(from._impl_.signal_information_);
  _this->_impl_.raw_can_frames_to_collect_.MergeFrom(from._impl_.raw_can_frames_to_collect_);
  if (!from._internal_campaign_sync_id().empty()) {
    _this->_internal_set_campaign_sync_id(from._internal_campaign_sync_id());
  }
  if (!from._internal_decoder_manifest_sync_id().empty()) {
    _this->_internal_set_decoder_manifest_sync_id(from._internal_decoder_manifest_sync_id());
  }
  if (from._internal_has_probabilities()) {
    _this->_internal_mutable_probabilities()->::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities::MergeFrom(
        from._internal_probabilities());
  }
  if (from._internal_has_s3_upload_metadata()) {
    _this->_internal_mutable_s3_upload_metadata()->::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata::MergeFrom(
        from._internal_s3_upload_metadata());
  }
  if (from._internal_start_time_ms_epoch() != 0) {
    _this->_internal_set_start_time_ms_epoch(from._internal_start_time_ms_epoch());
  }
  if (from._internal_expiry_time_ms_epoch() != 0) {
    _this->_internal_set_expiry_time_ms_epoch(from._internal_expiry_time_ms_epoch());
  }
  if (from._internal_after_duration_ms() != 0) {
    _this->_internal_set_after_duration_ms(from._internal_after_duration_ms());
  }
  if (from._internal_include_active_dtcs() != 0) {
    _this->_internal_set_include_active_dtcs(from._internal_include_active_dtcs());
  }
  if (from._internal_persist_all_collected_data() != 0) {
    _this->_internal_set_persist_all_collected_data(from._internal_persist_all_collected_data());
  }
  if (from._internal_compress_collected_data() != 0) {
    _this->_internal_set_compress_collected_data(from._internal_compress_collected_data());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  switch (from.collection_scheme_type_case()) {
    case kTimeBasedCollectionScheme: {
      _this->_internal_mutable_time_based_collection_scheme()->::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme::MergeFrom(
          from._internal_time_based_collection_scheme());
      break;
    }
    case kConditionBasedCollectionScheme: {
      _this->_internal_mutable_condition_based_collection_scheme()->::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme::MergeFrom(
          from._internal_condition_based_collection_scheme());
      break;
    }
    case COLLECTION_SCHEME_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollectionScheme::CopyFrom(const CollectionScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionScheme::IsInitialized() const {
  return true;
}

void CollectionScheme::InternalSwap(CollectionScheme* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signal_information_.InternalSwap(&other->_impl_.signal_information_);
  _impl_.raw_can_frames_to_collect_.InternalSwap(&other->_impl_.raw_can_frames_to_collect_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.campaign_sync_id_, lhs_arena,
      &other->_impl_.campaign_sync_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decoder_manifest_sync_id_, lhs_arena,
      &other->_impl_.decoder_manifest_sync_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollectionScheme, _impl_.priority_)
      + sizeof(CollectionScheme::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(CollectionScheme, _impl_.probabilities_)>(
          reinterpret_cast<char*>(&_impl_.probabilities_),
          reinterpret_cast<char*>(&other->_impl_.probabilities_));
  swap(_impl_.collection_scheme_type_, other->_impl_.collection_scheme_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionScheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[1]);
}

// ===================================================================

class S3UploadMetadata::_Internal {
 public:
};

S3UploadMetadata::S3UploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
}
S3UploadMetadata::S3UploadMetadata(const S3UploadMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S3UploadMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_name_){}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.bucket_owner_account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_name().empty()) {
    _this->_impl_.bucket_name_.Set(from._internal_bucket_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    _this->_impl_.prefix_.Set(from._internal_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bucket_owner_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_owner_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket_owner_account_id().empty()) {
    _this->_impl_.bucket_owner_account_id_.Set(from._internal_bucket_owner_account_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
}

inline void S3UploadMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_name_){}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.bucket_owner_account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bucket_owner_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_owner_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S3UploadMetadata::~S3UploadMetadata() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S3UploadMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_name_.Destroy();
  _impl_.prefix_.Destroy();
  _impl_.region_.Destroy();
  _impl_.bucket_owner_account_id_.Destroy();
}

void S3UploadMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S3UploadMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_name_.ClearToEmpty();
  _impl_.prefix_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.bucket_owner_account_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S3UploadMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bucket_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bucket_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_name"));
        } else
          goto handle_unusual;
        continue;
      // string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.prefix"));
        } else
          goto handle_unusual;
        continue;
      // string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.region"));
        } else
          goto handle_unusual;
        continue;
      // string bucket_owner_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bucket_owner_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_owner_account_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S3UploadMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket_name = 1;
  if (!this->_internal_bucket_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_name().data(), static_cast<int>(this->_internal_bucket_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bucket_name(), target);
  }

  // string prefix = 2;
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // string bucket_owner_account_id = 4;
  if (!this->_internal_bucket_owner_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket_owner_account_id().data(), static_cast<int>(this->_internal_bucket_owner_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_owner_account_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bucket_owner_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
  return target;
}

size_t S3UploadMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket_name = 1;
  if (!this->_internal_bucket_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_name());
  }

  // string prefix = 2;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string bucket_owner_account_id = 4;
  if (!this->_internal_bucket_owner_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket_owner_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S3UploadMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S3UploadMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S3UploadMetadata::GetClassData() const { return &_class_data_; }


void S3UploadMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S3UploadMetadata*>(&to_msg);
  auto& from = static_cast<const S3UploadMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket_name().empty()) {
    _this->_internal_set_bucket_name(from._internal_bucket_name());
  }
  if (!from._internal_prefix().empty()) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_bucket_owner_account_id().empty()) {
    _this->_internal_set_bucket_owner_account_id(from._internal_bucket_owner_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S3UploadMetadata::CopyFrom(const S3UploadMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S3UploadMetadata::IsInitialized() const {
  return true;
}

void S3UploadMetadata::InternalSwap(S3UploadMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_name_, lhs_arena,
      &other->_impl_.bucket_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_, lhs_arena,
      &other->_impl_.prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_owner_account_id_, lhs_arena,
      &other->_impl_.bucket_owner_account_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S3UploadMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[2]);
}

// ===================================================================

class Probabilities::_Internal {
 public:
};

Probabilities::Probabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
}
Probabilities::Probabilities(const Probabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Probabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.probability_to_send_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.probability_to_send_ = from._impl_.probability_to_send_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
}

inline void Probabilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.probability_to_send_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Probabilities::~Probabilities() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Probabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Probabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Probabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.probability_to_send_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Probabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double probability_to_send = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.probability_to_send_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Probabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability_to_send = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_probability_to_send = this->_internal_probability_to_send();
  uint64_t raw_probability_to_send;
  memcpy(&raw_probability_to_send, &tmp_probability_to_send, sizeof(tmp_probability_to_send));
  if (raw_probability_to_send != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability_to_send(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
  return target;
}

size_t Probabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double probability_to_send = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_probability_to_send = this->_internal_probability_to_send();
  uint64_t raw_probability_to_send;
  memcpy(&raw_probability_to_send, &tmp_probability_to_send, sizeof(tmp_probability_to_send));
  if (raw_probability_to_send != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Probabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Probabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Probabilities::GetClassData() const { return &_class_data_; }


void Probabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Probabilities*>(&to_msg);
  auto& from = static_cast<const Probabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_probability_to_send = from._internal_probability_to_send();
  uint64_t raw_probability_to_send;
  memcpy(&raw_probability_to_send, &tmp_probability_to_send, sizeof(tmp_probability_to_send));
  if (raw_probability_to_send != 0) {
    _this->_internal_set_probability_to_send(from._internal_probability_to_send());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Probabilities::CopyFrom(const Probabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Probabilities::IsInitialized() const {
  return true;
}

void Probabilities::InternalSwap(Probabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.probability_to_send_, other->_impl_.probability_to_send_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Probabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[3]);
}

// ===================================================================

class TimeBasedCollectionScheme::_Internal {
 public:
};

TimeBasedCollectionScheme::TimeBasedCollectionScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
}
TimeBasedCollectionScheme::TimeBasedCollectionScheme(const TimeBasedCollectionScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeBasedCollectionScheme* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_based_collection_scheme_period_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_based_collection_scheme_period_ms_ = from._impl_.time_based_collection_scheme_period_ms_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
}

inline void TimeBasedCollectionScheme::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_based_collection_scheme_period_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeBasedCollectionScheme::~TimeBasedCollectionScheme() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeBasedCollectionScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeBasedCollectionScheme::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeBasedCollectionScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_based_collection_scheme_period_ms_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeBasedCollectionScheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time_based_collection_scheme_period_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_based_collection_scheme_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeBasedCollectionScheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time_based_collection_scheme_period_ms = 1;
  if (this->_internal_time_based_collection_scheme_period_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_based_collection_scheme_period_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
  return target;
}

size_t TimeBasedCollectionScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time_based_collection_scheme_period_ms = 1;
  if (this->_internal_time_based_collection_scheme_period_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_based_collection_scheme_period_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeBasedCollectionScheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeBasedCollectionScheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeBasedCollectionScheme::GetClassData() const { return &_class_data_; }


void TimeBasedCollectionScheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeBasedCollectionScheme*>(&to_msg);
  auto& from = static_cast<const TimeBasedCollectionScheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time_based_collection_scheme_period_ms() != 0) {
    _this->_internal_set_time_based_collection_scheme_period_ms(from._internal_time_based_collection_scheme_period_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeBasedCollectionScheme::CopyFrom(const TimeBasedCollectionScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBasedCollectionScheme::IsInitialized() const {
  return true;
}

void TimeBasedCollectionScheme::InternalSwap(TimeBasedCollectionScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.time_based_collection_scheme_period_ms_, other->_impl_.time_based_collection_scheme_period_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeBasedCollectionScheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[4]);
}

// ===================================================================

class ConditionBasedCollectionScheme::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& condition_tree(const ConditionBasedCollectionScheme* msg);
};

const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode&
ConditionBasedCollectionScheme::_Internal::condition_tree(const ConditionBasedCollectionScheme* msg) {
  return *msg->_impl_.condition_tree_;
}
void ConditionBasedCollectionScheme::clear_condition_tree() {
  if (GetArenaForAllocation() == nullptr && _impl_.condition_tree_ != nullptr) {
    delete _impl_.condition_tree_;
  }
  _impl_.condition_tree_ = nullptr;
}
ConditionBasedCollectionScheme::ConditionBasedCollectionScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
}
ConditionBasedCollectionScheme::ConditionBasedCollectionScheme(const ConditionBasedCollectionScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionBasedCollectionScheme* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_tree_){nullptr}
    , decltype(_impl_.condition_minimum_interval_ms_){}
    , decltype(_impl_.condition_language_version_){}
    , decltype(_impl_.condition_trigger_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_condition_tree()) {
    _this->_impl_.condition_tree_ = new ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode(*from._impl_.condition_tree_);
  }
  ::memcpy(&_impl_.condition_minimum_interval_ms_, &from._impl_.condition_minimum_interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.condition_trigger_mode_) -
    reinterpret_cast<char*>(&_impl_.condition_minimum_interval_ms_)) + sizeof(_impl_.condition_trigger_mode_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
}

inline void ConditionBasedCollectionScheme::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_tree_){nullptr}
    , decltype(_impl_.condition_minimum_interval_ms_){0u}
    , decltype(_impl_.condition_language_version_){0u}
    , decltype(_impl_.condition_trigger_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConditionBasedCollectionScheme::~ConditionBasedCollectionScheme() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionBasedCollectionScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.condition_tree_;
}

void ConditionBasedCollectionScheme::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionBasedCollectionScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.condition_tree_ != nullptr) {
    delete _impl_.condition_tree_;
  }
  _impl_.condition_tree_ = nullptr;
  ::memset(&_impl_.condition_minimum_interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.condition_trigger_mode_) -
      reinterpret_cast<char*>(&_impl_.condition_minimum_interval_ms_)) + sizeof(_impl_.condition_trigger_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionBasedCollectionScheme::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 condition_minimum_interval_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.condition_minimum_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 condition_language_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.condition_language_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode condition_tree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition_tree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.ConditionTriggerMode condition_trigger_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_condition_trigger_mode(static_cast<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionBasedCollectionScheme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 condition_minimum_interval_ms = 1;
  if (this->_internal_condition_minimum_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_condition_minimum_interval_ms(), target);
  }

  // uint32 condition_language_version = 2;
  if (this->_internal_condition_language_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_condition_language_version(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode condition_tree = 3;
  if (this->_internal_has_condition_tree()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::condition_tree(this),
        _Internal::condition_tree(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.ConditionTriggerMode condition_trigger_mode = 4;
  if (this->_internal_condition_trigger_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_condition_trigger_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
  return target;
}

size_t ConditionBasedCollectionScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode condition_tree = 3;
  if (this->_internal_has_condition_tree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.condition_tree_);
  }

  // uint32 condition_minimum_interval_ms = 1;
  if (this->_internal_condition_minimum_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_condition_minimum_interval_ms());
  }

  // uint32 condition_language_version = 2;
  if (this->_internal_condition_language_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_condition_language_version());
  }

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.ConditionTriggerMode condition_trigger_mode = 4;
  if (this->_internal_condition_trigger_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_condition_trigger_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionBasedCollectionScheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionBasedCollectionScheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionBasedCollectionScheme::GetClassData() const { return &_class_data_; }


void ConditionBasedCollectionScheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionBasedCollectionScheme*>(&to_msg);
  auto& from = static_cast<const ConditionBasedCollectionScheme&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_condition_tree()) {
    _this->_internal_mutable_condition_tree()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode::MergeFrom(
        from._internal_condition_tree());
  }
  if (from._internal_condition_minimum_interval_ms() != 0) {
    _this->_internal_set_condition_minimum_interval_ms(from._internal_condition_minimum_interval_ms());
  }
  if (from._internal_condition_language_version() != 0) {
    _this->_internal_set_condition_language_version(from._internal_condition_language_version());
  }
  if (from._internal_condition_trigger_mode() != 0) {
    _this->_internal_set_condition_trigger_mode(from._internal_condition_trigger_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionBasedCollectionScheme::CopyFrom(const ConditionBasedCollectionScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionBasedCollectionScheme::IsInitialized() const {
  return true;
}

void ConditionBasedCollectionScheme::InternalSwap(ConditionBasedCollectionScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionBasedCollectionScheme, _impl_.condition_trigger_mode_)
      + sizeof(ConditionBasedCollectionScheme::_impl_.condition_trigger_mode_)
      - PROTOBUF_FIELD_OFFSET(ConditionBasedCollectionScheme, _impl_.condition_tree_)>(
          reinterpret_cast<char*>(&_impl_.condition_tree_),
          reinterpret_cast<char*>(&other->_impl_.condition_tree_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionBasedCollectionScheme::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[5]);
}

// ===================================================================

class SignalInformation::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& signal_path(const SignalInformation* msg);
};

const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath&
SignalInformation::_Internal::signal_path(const SignalInformation* msg) {
  return *msg->_impl_.signal_path_;
}
void SignalInformation::clear_signal_path() {
  if (GetArenaForAllocation() == nullptr && _impl_.signal_path_ != nullptr) {
    delete _impl_.signal_path_;
  }
  _impl_.signal_path_ = nullptr;
}
SignalInformation::SignalInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
}
SignalInformation::SignalInformation(const SignalInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){nullptr}
    , decltype(_impl_.signal_id_){}
    , decltype(_impl_.sample_buffer_size_){}
    , decltype(_impl_.minimum_sample_period_ms_){}
    , decltype(_impl_.fixed_window_period_ms_){}
    , decltype(_impl_.condition_only_signal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signal_path()) {
    _this->_impl_.signal_path_ = new ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath(*from._impl_.signal_path_);
  }
  ::memcpy(&_impl_.signal_id_, &from._impl_.signal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.condition_only_signal_) -
    reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.condition_only_signal_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
}

inline void SignalInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){nullptr}
    , decltype(_impl_.signal_id_){0u}
    , decltype(_impl_.sample_buffer_size_){0u}
    , decltype(_impl_.minimum_sample_period_ms_){0u}
    , decltype(_impl_.fixed_window_period_ms_){0u}
    , decltype(_impl_.condition_only_signal_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalInformation::~SignalInformation() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signal_path_;
}

void SignalInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.signal_path_ != nullptr) {
    delete _impl_.signal_path_;
  }
  _impl_.signal_path_ = nullptr;
  ::memset(&_impl_.signal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.condition_only_signal_) -
      reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.condition_only_signal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_buffer_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sample_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minimum_sample_period_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.minimum_sample_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fixed_window_period_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fixed_window_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool condition_only_signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.condition_only_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_id(), target);
  }

  // uint32 sample_buffer_size = 2;
  if (this->_internal_sample_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sample_buffer_size(), target);
  }

  // uint32 minimum_sample_period_ms = 3;
  if (this->_internal_minimum_sample_period_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minimum_sample_period_ms(), target);
  }

  // uint32 fixed_window_period_ms = 4;
  if (this->_internal_fixed_window_period_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fixed_window_period_ms(), target);
  }

  // bool condition_only_signal = 5;
  if (this->_internal_condition_only_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_condition_only_signal(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 6;
  if (this->_internal_has_signal_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::signal_path(this),
        _Internal::signal_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
  return target;
}

size_t SignalInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 6;
  if (this->_internal_has_signal_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signal_path_);
  }

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
  }

  // uint32 sample_buffer_size = 2;
  if (this->_internal_sample_buffer_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_buffer_size());
  }

  // uint32 minimum_sample_period_ms = 3;
  if (this->_internal_minimum_sample_period_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minimum_sample_period_ms());
  }

  // uint32 fixed_window_period_ms = 4;
  if (this->_internal_fixed_window_period_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fixed_window_period_ms());
  }

  // bool condition_only_signal = 5;
  if (this->_internal_condition_only_signal() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalInformation::GetClassData() const { return &_class_data_; }


void SignalInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalInformation*>(&to_msg);
  auto& from = static_cast<const SignalInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signal_path()) {
    _this->_internal_mutable_signal_path()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath::MergeFrom(
        from._internal_signal_path());
  }
  if (from._internal_signal_id() != 0) {
    _this->_internal_set_signal_id(from._internal_signal_id());
  }
  if (from._internal_sample_buffer_size() != 0) {
    _this->_internal_set_sample_buffer_size(from._internal_sample_buffer_size());
  }
  if (from._internal_minimum_sample_period_ms() != 0) {
    _this->_internal_set_minimum_sample_period_ms(from._internal_minimum_sample_period_ms());
  }
  if (from._internal_fixed_window_period_ms() != 0) {
    _this->_internal_set_fixed_window_period_ms(from._internal_fixed_window_period_ms());
  }
  if (from._internal_condition_only_signal() != 0) {
    _this->_internal_set_condition_only_signal(from._internal_condition_only_signal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalInformation::CopyFrom(const SignalInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalInformation::IsInitialized() const {
  return true;
}

void SignalInformation::InternalSwap(SignalInformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalInformation, _impl_.condition_only_signal_)
      + sizeof(SignalInformation::_impl_.condition_only_signal_)
      - PROTOBUF_FIELD_OFFSET(SignalInformation, _impl_.signal_path_)>(
          reinterpret_cast<char*>(&_impl_.signal_path_),
          reinterpret_cast<char*>(&other->_impl_.signal_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[6]);
}

// ===================================================================

class RawCanFrame::_Internal {
 public:
};

RawCanFrame::RawCanFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
}
RawCanFrame::RawCanFrame(const RawCanFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RawCanFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.can_interface_id_){}
    , decltype(_impl_.can_message_id_){}
    , decltype(_impl_.sample_buffer_size_){}
    , decltype(_impl_.minimum_sample_period_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.can_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.can_interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_can_interface_id().empty()) {
    _this->_impl_.can_interface_id_.Set(from._internal_can_interface_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.can_message_id_, &from._impl_.can_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minimum_sample_period_ms_) -
    reinterpret_cast<char*>(&_impl_.can_message_id_)) + sizeof(_impl_.minimum_sample_period_ms_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
}

inline void RawCanFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.can_interface_id_){}
    , decltype(_impl_.can_message_id_){0u}
    , decltype(_impl_.sample_buffer_size_){0u}
    , decltype(_impl_.minimum_sample_period_ms_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.can_interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.can_interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RawCanFrame::~RawCanFrame() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawCanFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.can_interface_id_.Destroy();
}

void RawCanFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RawCanFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.can_interface_id_.ClearToEmpty();
  ::memset(&_impl_.can_message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.minimum_sample_period_ms_) -
      reinterpret_cast<char*>(&_impl_.can_message_id_)) + sizeof(_impl_.minimum_sample_period_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawCanFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string can_interface_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_can_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_interface_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 can_message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.can_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_buffer_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sample_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minimum_sample_period_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.minimum_sample_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawCanFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string can_interface_id = 1;
  if (!this->_internal_can_interface_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_can_interface_id().data(), static_cast<int>(this->_internal_can_interface_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_interface_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_can_interface_id(), target);
  }

  // uint32 can_message_id = 2;
  if (this->_internal_can_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_can_message_id(), target);
  }

  // uint32 sample_buffer_size = 3;
  if (this->_internal_sample_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sample_buffer_size(), target);
  }

  // uint32 minimum_sample_period_ms = 4;
  if (this->_internal_minimum_sample_period_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_minimum_sample_period_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
  return target;
}

size_t RawCanFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string can_interface_id = 1;
  if (!this->_internal_can_interface_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_can_interface_id());
  }

  // uint32 can_message_id = 2;
  if (this->_internal_can_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_can_message_id());
  }

  // uint32 sample_buffer_size = 3;
  if (this->_internal_sample_buffer_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_buffer_size());
  }

  // uint32 minimum_sample_period_ms = 4;
  if (this->_internal_minimum_sample_period_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minimum_sample_period_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawCanFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RawCanFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawCanFrame::GetClassData() const { return &_class_data_; }


void RawCanFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RawCanFrame*>(&to_msg);
  auto& from = static_cast<const RawCanFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_can_interface_id().empty()) {
    _this->_internal_set_can_interface_id(from._internal_can_interface_id());
  }
  if (from._internal_can_message_id() != 0) {
    _this->_internal_set_can_message_id(from._internal_can_message_id());
  }
  if (from._internal_sample_buffer_size() != 0) {
    _this->_internal_set_sample_buffer_size(from._internal_sample_buffer_size());
  }
  if (from._internal_minimum_sample_period_ms() != 0) {
    _this->_internal_set_minimum_sample_period_ms(from._internal_minimum_sample_period_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawCanFrame::CopyFrom(const RawCanFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawCanFrame::IsInitialized() const {
  return true;
}

void RawCanFrame::InternalSwap(RawCanFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.can_interface_id_, lhs_arena,
      &other->_impl_.can_interface_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawCanFrame, _impl_.minimum_sample_period_ms_)
      + sizeof(RawCanFrame::_impl_.minimum_sample_period_ms_)
      - PROTOBUF_FIELD_OFFSET(RawCanFrame, _impl_.can_message_id_)>(
          reinterpret_cast<char*>(&_impl_.can_message_id_),
          reinterpret_cast<char*>(&other->_impl_.can_message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawCanFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_collection_5fschemes_2eproto_getter, &descriptor_table_collection_5fschemes_2eproto_once,
      file_level_metadata_collection_5fschemes_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CollectionSchemesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
