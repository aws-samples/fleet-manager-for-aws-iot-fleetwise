// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decoder_manifest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_decoder_5fmanifest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_decoder_5fmanifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_decoder_5fmanifest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_decoder_5fmanifest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_decoder_5fmanifest_2eproto;
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace DecoderManifestMsg {
class CANSignal;
struct CANSignalDefaultTypeInternal;
extern CANSignalDefaultTypeInternal _CANSignal_default_instance_;
class ComplexArray;
struct ComplexArrayDefaultTypeInternal;
extern ComplexArrayDefaultTypeInternal _ComplexArray_default_instance_;
class ComplexSignal;
struct ComplexSignalDefaultTypeInternal;
extern ComplexSignalDefaultTypeInternal _ComplexSignal_default_instance_;
class ComplexStruct;
struct ComplexStructDefaultTypeInternal;
extern ComplexStructDefaultTypeInternal _ComplexStruct_default_instance_;
class ComplexStructMember;
struct ComplexStructMemberDefaultTypeInternal;
extern ComplexStructMemberDefaultTypeInternal _ComplexStructMember_default_instance_;
class ComplexType;
struct ComplexTypeDefaultTypeInternal;
extern ComplexTypeDefaultTypeInternal _ComplexType_default_instance_;
class DecoderManifest;
struct DecoderManifestDefaultTypeInternal;
extern DecoderManifestDefaultTypeInternal _DecoderManifest_default_instance_;
class OBDPIDSignal;
struct OBDPIDSignalDefaultTypeInternal;
extern OBDPIDSignalDefaultTypeInternal _OBDPIDSignal_default_instance_;
class PrimitiveData;
struct PrimitiveDataDefaultTypeInternal;
extern PrimitiveDataDefaultTypeInternal _PrimitiveData_default_instance_;
class StringData;
struct StringDataDefaultTypeInternal;
extern StringDataDefaultTypeInternal _StringData_default_instance_;
}  // namespace DecoderManifestMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace DecoderManifestMsg {

enum PrimitiveType : int {
  NULL_ = 0,
  BOOL = 1,
  UINT8 = 2,
  UINT16 = 3,
  UINT32 = 4,
  UINT64 = 5,
  INT8 = 6,
  INT16 = 7,
  INT32 = 8,
  INT64 = 9,
  FLOAT32 = 10,
  FLOAT64 = 11,
  PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PrimitiveType_IsValid(int value);
constexpr PrimitiveType PrimitiveType_MIN = NULL_;
constexpr PrimitiveType PrimitiveType_MAX = FLOAT64;
constexpr int PrimitiveType_ARRAYSIZE = PrimitiveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor();
template<typename T>
inline const std::string& PrimitiveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrimitiveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrimitiveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrimitiveType_descriptor(), enum_t_value);
}
inline bool PrimitiveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PrimitiveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrimitiveType>(
    PrimitiveType_descriptor(), name, value);
}
enum StringEncoding : int {
  UTF_8 = 0,
  UTF_16 = 1,
  StringEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StringEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StringEncoding_IsValid(int value);
constexpr StringEncoding StringEncoding_MIN = UTF_8;
constexpr StringEncoding StringEncoding_MAX = UTF_16;
constexpr int StringEncoding_ARRAYSIZE = StringEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StringEncoding_descriptor();
template<typename T>
inline const std::string& StringEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StringEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StringEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StringEncoding_descriptor(), enum_t_value);
}
inline bool StringEncoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StringEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StringEncoding>(
    StringEncoding_descriptor(), name, value);
}
// ===================================================================

class DecoderManifest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest) */ {
 public:
  inline DecoderManifest() : DecoderManifest(nullptr) {}
  ~DecoderManifest() override;
  explicit PROTOBUF_CONSTEXPR DecoderManifest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecoderManifest(const DecoderManifest& from);
  DecoderManifest(DecoderManifest&& from) noexcept
    : DecoderManifest() {
    *this = ::std::move(from);
  }

  inline DecoderManifest& operator=(const DecoderManifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecoderManifest& operator=(DecoderManifest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecoderManifest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecoderManifest* internal_default_instance() {
    return reinterpret_cast<const DecoderManifest*>(
               &_DecoderManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DecoderManifest& a, DecoderManifest& b) {
    a.Swap(&b);
  }
  inline void Swap(DecoderManifest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecoderManifest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecoderManifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecoderManifest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecoderManifest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DecoderManifest& from) {
    DecoderManifest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecoderManifest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest";
  }
  protected:
  explicit DecoderManifest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanSignalsFieldNumber = 2,
    kObdPidSignalsFieldNumber = 3,
    kComplexTypesFieldNumber = 4,
    kComplexSignalsFieldNumber = 5,
    kSyncIdFieldNumber = 1,
  };
  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal can_signals = 2;
  int can_signals_size() const;
  private:
  int _internal_can_signals_size() const;
  public:
  void clear_can_signals();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* mutable_can_signals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal >*
      mutable_can_signals();
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal& _internal_can_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* _internal_add_can_signals();
  public:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal& can_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* add_can_signals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal >&
      can_signals() const;

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal obd_pid_signals = 3;
  int obd_pid_signals_size() const;
  private:
  int _internal_obd_pid_signals_size() const;
  public:
  void clear_obd_pid_signals();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* mutable_obd_pid_signals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal >*
      mutable_obd_pid_signals();
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal& _internal_obd_pid_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* _internal_add_obd_pid_signals();
  public:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal& obd_pid_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* add_obd_pid_signals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal >&
      obd_pid_signals() const;

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType complex_types = 4;
  int complex_types_size() const;
  private:
  int _internal_complex_types_size() const;
  public:
  void clear_complex_types();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* mutable_complex_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType >*
      mutable_complex_types();
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType& _internal_complex_types(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* _internal_add_complex_types();
  public:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType& complex_types(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* add_complex_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType >&
      complex_types() const;

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal complex_signals = 5;
  int complex_signals_size() const;
  private:
  int _internal_complex_signals_size() const;
  public:
  void clear_complex_signals();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* mutable_complex_signals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal >*
      mutable_complex_signals();
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal& _internal_complex_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* _internal_add_complex_signals();
  public:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal& complex_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* add_complex_signals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal >&
      complex_signals() const;

  // string sync_id = 1;
  void clear_sync_id();
  const std::string& sync_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sync_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sync_id();
  PROTOBUF_NODISCARD std::string* release_sync_id();
  void set_allocated_sync_id(std::string* sync_id);
  private:
  const std::string& _internal_sync_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sync_id(const std::string& value);
  std::string* _internal_mutable_sync_id();
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal > can_signals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal > obd_pid_signals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType > complex_types_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal > complex_signals_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sync_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class CANSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal) */ {
 public:
  inline CANSignal() : CANSignal(nullptr) {}
  ~CANSignal() override;
  explicit PROTOBUF_CONSTEXPR CANSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CANSignal(const CANSignal& from);
  CANSignal(CANSignal&& from) noexcept
    : CANSignal() {
    *this = ::std::move(from);
  }

  inline CANSignal& operator=(const CANSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CANSignal& operator=(CANSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CANSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CANSignal* internal_default_instance() {
    return reinterpret_cast<const CANSignal*>(
               &_CANSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CANSignal& a, CANSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(CANSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CANSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CANSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CANSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CANSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CANSignal& from) {
    CANSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CANSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal";
  }
  protected:
  explicit CANSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceIdFieldNumber = 2,
    kSignalIdFieldNumber = 1,
    kMessageIdFieldNumber = 3,
    kIsBigEndianFieldNumber = 4,
    kIsSignedFieldNumber = 5,
    kStartBitFieldNumber = 6,
    kOffsetFieldNumber = 7,
    kFactorFieldNumber = 8,
    kLengthFieldNumber = 9,
    kPrimitiveTypeFieldNumber = 10,
  };
  // string interface_id = 2;
  void clear_interface_id();
  const std::string& interface_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_id();
  PROTOBUF_NODISCARD std::string* release_interface_id();
  void set_allocated_interface_id(std::string* interface_id);
  private:
  const std::string& _internal_interface_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_id(const std::string& value);
  std::string* _internal_mutable_interface_id();
  public:

  // uint32 signal_id = 1;
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // uint32 message_id = 3;
  void clear_message_id();
  uint32_t message_id() const;
  void set_message_id(uint32_t value);
  private:
  uint32_t _internal_message_id() const;
  void _internal_set_message_id(uint32_t value);
  public:

  // bool is_big_endian = 4;
  void clear_is_big_endian();
  bool is_big_endian() const;
  void set_is_big_endian(bool value);
  private:
  bool _internal_is_big_endian() const;
  void _internal_set_is_big_endian(bool value);
  public:

  // bool is_signed = 5;
  void clear_is_signed();
  bool is_signed() const;
  void set_is_signed(bool value);
  private:
  bool _internal_is_signed() const;
  void _internal_set_is_signed(bool value);
  public:

  // uint32 start_bit = 6;
  void clear_start_bit();
  uint32_t start_bit() const;
  void set_start_bit(uint32_t value);
  private:
  uint32_t _internal_start_bit() const;
  void _internal_set_start_bit(uint32_t value);
  public:

  // double offset = 7;
  void clear_offset();
  double offset() const;
  void set_offset(double value);
  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);
  public:

  // double factor = 8;
  void clear_factor();
  double factor() const;
  void set_factor(double value);
  private:
  double _internal_factor() const;
  void _internal_set_factor(double value);
  public:

  // uint32 length = 9;
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 10;
  void clear_primitive_type();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType primitive_type() const;
  void set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value);
  private:
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType _internal_primitive_type() const;
  void _internal_set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_id_;
    uint32_t signal_id_;
    uint32_t message_id_;
    bool is_big_endian_;
    bool is_signed_;
    uint32_t start_bit_;
    double offset_;
    double factor_;
    uint32_t length_;
    int primitive_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class OBDPIDSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal) */ {
 public:
  inline OBDPIDSignal() : OBDPIDSignal(nullptr) {}
  ~OBDPIDSignal() override;
  explicit PROTOBUF_CONSTEXPR OBDPIDSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OBDPIDSignal(const OBDPIDSignal& from);
  OBDPIDSignal(OBDPIDSignal&& from) noexcept
    : OBDPIDSignal() {
    *this = ::std::move(from);
  }

  inline OBDPIDSignal& operator=(const OBDPIDSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline OBDPIDSignal& operator=(OBDPIDSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OBDPIDSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const OBDPIDSignal* internal_default_instance() {
    return reinterpret_cast<const OBDPIDSignal*>(
               &_OBDPIDSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OBDPIDSignal& a, OBDPIDSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(OBDPIDSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OBDPIDSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OBDPIDSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OBDPIDSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OBDPIDSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OBDPIDSignal& from) {
    OBDPIDSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OBDPIDSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal";
  }
  protected:
  explicit OBDPIDSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceIdFieldNumber = 2,
    kSignalIdFieldNumber = 1,
    kPidResponseLengthFieldNumber = 3,
    kServiceModeFieldNumber = 4,
    kPidFieldNumber = 5,
    kScalingFieldNumber = 6,
    kOffsetFieldNumber = 7,
    kStartByteFieldNumber = 8,
    kByteLengthFieldNumber = 9,
    kBitRightShiftFieldNumber = 10,
    kBitMaskLengthFieldNumber = 11,
    kPrimitiveTypeFieldNumber = 12,
  };
  // string interface_id = 2;
  void clear_interface_id();
  const std::string& interface_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_id();
  PROTOBUF_NODISCARD std::string* release_interface_id();
  void set_allocated_interface_id(std::string* interface_id);
  private:
  const std::string& _internal_interface_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_id(const std::string& value);
  std::string* _internal_mutable_interface_id();
  public:

  // uint32 signal_id = 1;
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // uint32 pid_response_length = 3;
  void clear_pid_response_length();
  uint32_t pid_response_length() const;
  void set_pid_response_length(uint32_t value);
  private:
  uint32_t _internal_pid_response_length() const;
  void _internal_set_pid_response_length(uint32_t value);
  public:

  // uint32 service_mode = 4;
  void clear_service_mode();
  uint32_t service_mode() const;
  void set_service_mode(uint32_t value);
  private:
  uint32_t _internal_service_mode() const;
  void _internal_set_service_mode(uint32_t value);
  public:

  // uint32 pid = 5;
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // double scaling = 6;
  void clear_scaling();
  double scaling() const;
  void set_scaling(double value);
  private:
  double _internal_scaling() const;
  void _internal_set_scaling(double value);
  public:

  // double offset = 7;
  void clear_offset();
  double offset() const;
  void set_offset(double value);
  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);
  public:

  // uint32 start_byte = 8;
  void clear_start_byte();
  uint32_t start_byte() const;
  void set_start_byte(uint32_t value);
  private:
  uint32_t _internal_start_byte() const;
  void _internal_set_start_byte(uint32_t value);
  public:

  // uint32 byte_length = 9;
  void clear_byte_length();
  uint32_t byte_length() const;
  void set_byte_length(uint32_t value);
  private:
  uint32_t _internal_byte_length() const;
  void _internal_set_byte_length(uint32_t value);
  public:

  // uint32 bit_right_shift = 10;
  void clear_bit_right_shift();
  uint32_t bit_right_shift() const;
  void set_bit_right_shift(uint32_t value);
  private:
  uint32_t _internal_bit_right_shift() const;
  void _internal_set_bit_right_shift(uint32_t value);
  public:

  // uint32 bit_mask_length = 11;
  void clear_bit_mask_length();
  uint32_t bit_mask_length() const;
  void set_bit_mask_length(uint32_t value);
  private:
  uint32_t _internal_bit_mask_length() const;
  void _internal_set_bit_mask_length(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 12;
  void clear_primitive_type();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType primitive_type() const;
  void set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value);
  private:
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType _internal_primitive_type() const;
  void _internal_set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_id_;
    uint32_t signal_id_;
    uint32_t pid_response_length_;
    uint32_t service_mode_;
    uint32_t pid_;
    double scaling_;
    double offset_;
    uint32_t start_byte_;
    uint32_t byte_length_;
    uint32_t bit_right_shift_;
    uint32_t bit_mask_length_;
    int primitive_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class PrimitiveData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData) */ {
 public:
  inline PrimitiveData() : PrimitiveData(nullptr) {}
  ~PrimitiveData() override;
  explicit PROTOBUF_CONSTEXPR PrimitiveData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimitiveData(const PrimitiveData& from);
  PrimitiveData(PrimitiveData&& from) noexcept
    : PrimitiveData() {
    *this = ::std::move(from);
  }

  inline PrimitiveData& operator=(const PrimitiveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveData& operator=(PrimitiveData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimitiveData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimitiveData* internal_default_instance() {
    return reinterpret_cast<const PrimitiveData*>(
               &_PrimitiveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrimitiveData& a, PrimitiveData& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimitiveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimitiveData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimitiveData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimitiveData& from) {
    PrimitiveData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData";
  }
  protected:
  explicit PrimitiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalingFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kPrimitiveTypeFieldNumber = 1,
  };
  // double scaling = 2;
  void clear_scaling();
  double scaling() const;
  void set_scaling(double value);
  private:
  double _internal_scaling() const;
  void _internal_set_scaling(double value);
  public:

  // double offset = 3;
  void clear_offset();
  double offset() const;
  void set_offset(double value);
  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);
  public:

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 1;
  void clear_primitive_type();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType primitive_type() const;
  void set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value);
  private:
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType _internal_primitive_type() const;
  void _internal_set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double scaling_;
    double offset_;
    int primitive_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class StringData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData) */ {
 public:
  inline StringData() : StringData(nullptr) {}
  ~StringData() override;
  explicit PROTOBUF_CONSTEXPR StringData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringData(const StringData& from);
  StringData(StringData&& from) noexcept
    : StringData() {
    *this = ::std::move(from);
  }

  inline StringData& operator=(const StringData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringData& operator=(StringData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringData* internal_default_instance() {
    return reinterpret_cast<const StringData*>(
               &_StringData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringData& a, StringData& b) {
    a.Swap(&b);
  }
  inline void Swap(StringData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringData& from) {
    StringData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData";
  }
  protected:
  explicit StringData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kEncodingFieldNumber = 1,
  };
  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringEncoding encoding = 1;
  void clear_encoding();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding encoding() const;
  void set_encoding(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding value);
  private:
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding _internal_encoding() const;
  void _internal_set_encoding(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t size_;
    int encoding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ComplexArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray) */ {
 public:
  inline ComplexArray() : ComplexArray(nullptr) {}
  ~ComplexArray() override;
  explicit PROTOBUF_CONSTEXPR ComplexArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexArray(const ComplexArray& from);
  ComplexArray(ComplexArray&& from) noexcept
    : ComplexArray() {
    *this = ::std::move(from);
  }

  inline ComplexArray& operator=(const ComplexArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexArray& operator=(ComplexArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexArray* internal_default_instance() {
    return reinterpret_cast<const ComplexArray*>(
               &_ComplexArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ComplexArray& a, ComplexArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexArray& from) {
    ComplexArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray";
  }
  protected:
  explicit ComplexArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kTypeIdFieldNumber = 2,
  };
  // int64 size = 1;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // uint32 type_id = 2;
  void clear_type_id();
  uint32_t type_id() const;
  void set_type_id(uint32_t value);
  private:
  uint32_t _internal_type_id() const;
  void _internal_set_type_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t size_;
    uint32_t type_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ComplexStructMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember) */ {
 public:
  inline ComplexStructMember() : ComplexStructMember(nullptr) {}
  ~ComplexStructMember() override;
  explicit PROTOBUF_CONSTEXPR ComplexStructMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexStructMember(const ComplexStructMember& from);
  ComplexStructMember(ComplexStructMember&& from) noexcept
    : ComplexStructMember() {
    *this = ::std::move(from);
  }

  inline ComplexStructMember& operator=(const ComplexStructMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexStructMember& operator=(ComplexStructMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexStructMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexStructMember* internal_default_instance() {
    return reinterpret_cast<const ComplexStructMember*>(
               &_ComplexStructMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ComplexStructMember& a, ComplexStructMember& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexStructMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexStructMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexStructMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexStructMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexStructMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexStructMember& from) {
    ComplexStructMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexStructMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember";
  }
  protected:
  explicit ComplexStructMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeIdFieldNumber = 1,
  };
  // uint32 type_id = 1;
  void clear_type_id();
  uint32_t type_id() const;
  void set_type_id(uint32_t value);
  private:
  uint32_t _internal_type_id() const;
  void _internal_set_type_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ComplexStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct) */ {
 public:
  inline ComplexStruct() : ComplexStruct(nullptr) {}
  ~ComplexStruct() override;
  explicit PROTOBUF_CONSTEXPR ComplexStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexStruct(const ComplexStruct& from);
  ComplexStruct(ComplexStruct&& from) noexcept
    : ComplexStruct() {
    *this = ::std::move(from);
  }

  inline ComplexStruct& operator=(const ComplexStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexStruct& operator=(ComplexStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexStruct* internal_default_instance() {
    return reinterpret_cast<const ComplexStruct*>(
               &_ComplexStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ComplexStruct& a, ComplexStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexStruct& from) {
    ComplexStruct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct";
  }
  protected:
  explicit ComplexStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember >*
      mutable_members();
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember& _internal_members(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* _internal_add_members();
  public:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember& members(int index) const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember >&
      members() const;

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember > members_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ComplexType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType) */ {
 public:
  inline ComplexType() : ComplexType(nullptr) {}
  ~ComplexType() override;
  explicit PROTOBUF_CONSTEXPR ComplexType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexType(const ComplexType& from);
  ComplexType(ComplexType&& from) noexcept
    : ComplexType() {
    *this = ::std::move(from);
  }

  inline ComplexType& operator=(const ComplexType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexType& operator=(ComplexType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexType& default_instance() {
    return *internal_default_instance();
  }
  enum VariantCase {
    kPrimitiveData = 2,
    kStruct = 3,
    kArray = 4,
    kStringData = 5,
    VARIANT_NOT_SET = 0,
  };

  static inline const ComplexType* internal_default_instance() {
    return reinterpret_cast<const ComplexType*>(
               &_ComplexType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ComplexType& a, ComplexType& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexType& from) {
    ComplexType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType";
  }
  protected:
  explicit ComplexType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeIdFieldNumber = 1,
    kPrimitiveDataFieldNumber = 2,
    kStructFieldNumber = 3,
    kArrayFieldNumber = 4,
    kStringDataFieldNumber = 5,
  };
  // uint32 type_id = 1;
  void clear_type_id();
  uint32_t type_id() const;
  void set_type_id(uint32_t value);
  private:
  uint32_t _internal_type_id() const;
  void _internal_set_type_id(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData primitive_data = 2;
  bool has_primitive_data() const;
  private:
  bool _internal_has_primitive_data() const;
  public:
  void clear_primitive_data();
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData& primitive_data() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* release_primitive_data();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* mutable_primitive_data();
  void set_allocated_primitive_data(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* primitive_data);
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData& _internal_primitive_data() const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* _internal_mutable_primitive_data();
  public:
  void unsafe_arena_set_allocated_primitive_data(
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* primitive_data);
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* unsafe_arena_release_primitive_data();

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct struct = 3;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct& struct_() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* release_struct_();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* mutable_struct_();
  void set_allocated_struct_(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* struct_);
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct& _internal_struct_() const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* struct_);
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* unsafe_arena_release_struct_();

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray array = 4;
  bool has_array() const;
  private:
  bool _internal_has_array() const;
  public:
  void clear_array();
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray& array() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* release_array();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* mutable_array();
  void set_allocated_array(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* array);
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray& _internal_array() const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* _internal_mutable_array();
  public:
  void unsafe_arena_set_allocated_array(
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* array);
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* unsafe_arena_release_array();

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData string_data = 5;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData& string_data() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* release_string_data();
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* mutable_string_data();
  void set_allocated_string_data(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* string_data);
  private:
  const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData& _internal_string_data() const;
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* _internal_mutable_string_data();
  public:
  void unsafe_arena_set_allocated_string_data(
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* string_data);
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* unsafe_arena_release_string_data();

  void clear_variant();
  VariantCase variant_case() const;
  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
 private:
  class _Internal;
  void set_has_primitive_data();
  void set_has_struct_();
  void set_has_array();
  void set_has_string_data();

  inline bool has_variant() const;
  inline void clear_has_variant();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t type_id_;
    union VariantUnion {
      constexpr VariantUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* primitive_data_;
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* struct__;
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* array_;
      ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* string_data_;
    } variant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ComplexSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal) */ {
 public:
  inline ComplexSignal() : ComplexSignal(nullptr) {}
  ~ComplexSignal() override;
  explicit PROTOBUF_CONSTEXPR ComplexSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexSignal(const ComplexSignal& from);
  ComplexSignal(ComplexSignal&& from) noexcept
    : ComplexSignal() {
    *this = ::std::move(from);
  }

  inline ComplexSignal& operator=(const ComplexSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexSignal& operator=(ComplexSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexSignal* internal_default_instance() {
    return reinterpret_cast<const ComplexSignal*>(
               &_ComplexSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ComplexSignal& a, ComplexSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComplexSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComplexSignal& from) {
    ComplexSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal";
  }
  protected:
  explicit ComplexSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kSignalIdFieldNumber = 1,
    kRootTypeIdFieldNumber = 4,
  };
  // string interface_id = 2;
  void clear_interface_id();
  const std::string& interface_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_id();
  PROTOBUF_NODISCARD std::string* release_interface_id();
  void set_allocated_interface_id(std::string* interface_id);
  private:
  const std::string& _internal_interface_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_id(const std::string& value);
  std::string* _internal_mutable_interface_id();
  public:

  // string message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // uint32 signal_id = 1;
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // uint32 root_type_id = 4;
  void clear_root_type_id();
  uint32_t root_type_id() const;
  void set_root_type_id(uint32_t value);
  private:
  uint32_t _internal_root_type_id() const;
  void _internal_set_root_type_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
    uint32_t signal_id_;
    uint32_t root_type_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_decoder_5fmanifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DecoderManifest

// string sync_id = 1;
inline void DecoderManifest::clear_sync_id() {
  _impl_.sync_id_.ClearToEmpty();
}
inline const std::string& DecoderManifest::sync_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.sync_id)
  return _internal_sync_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecoderManifest::set_sync_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sync_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.sync_id)
}
inline std::string* DecoderManifest::mutable_sync_id() {
  std::string* _s = _internal_mutable_sync_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.sync_id)
  return _s;
}
inline const std::string& DecoderManifest::_internal_sync_id() const {
  return _impl_.sync_id_.Get();
}
inline void DecoderManifest::_internal_set_sync_id(const std::string& value) {
  
  _impl_.sync_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DecoderManifest::_internal_mutable_sync_id() {
  
  return _impl_.sync_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DecoderManifest::release_sync_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.sync_id)
  return _impl_.sync_id_.Release();
}
inline void DecoderManifest::set_allocated_sync_id(std::string* sync_id) {
  if (sync_id != nullptr) {
    
  } else {
    
  }
  _impl_.sync_id_.SetAllocated(sync_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sync_id_.IsDefault()) {
    _impl_.sync_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.sync_id)
}

// repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal can_signals = 2;
inline int DecoderManifest::_internal_can_signals_size() const {
  return _impl_.can_signals_.size();
}
inline int DecoderManifest::can_signals_size() const {
  return _internal_can_signals_size();
}
inline void DecoderManifest::clear_can_signals() {
  _impl_.can_signals_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* DecoderManifest::mutable_can_signals(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.can_signals)
  return _impl_.can_signals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal >*
DecoderManifest::mutable_can_signals() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.can_signals)
  return &_impl_.can_signals_;
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal& DecoderManifest::_internal_can_signals(int index) const {
  return _impl_.can_signals_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal& DecoderManifest::can_signals(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.can_signals)
  return _internal_can_signals(index);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* DecoderManifest::_internal_add_can_signals() {
  return _impl_.can_signals_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* DecoderManifest::add_can_signals() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal* _add = _internal_add_can_signals();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.can_signals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal >&
DecoderManifest::can_signals() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.can_signals)
  return _impl_.can_signals_;
}

// repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal obd_pid_signals = 3;
inline int DecoderManifest::_internal_obd_pid_signals_size() const {
  return _impl_.obd_pid_signals_.size();
}
inline int DecoderManifest::obd_pid_signals_size() const {
  return _internal_obd_pid_signals_size();
}
inline void DecoderManifest::clear_obd_pid_signals() {
  _impl_.obd_pid_signals_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* DecoderManifest::mutable_obd_pid_signals(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.obd_pid_signals)
  return _impl_.obd_pid_signals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal >*
DecoderManifest::mutable_obd_pid_signals() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.obd_pid_signals)
  return &_impl_.obd_pid_signals_;
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal& DecoderManifest::_internal_obd_pid_signals(int index) const {
  return _impl_.obd_pid_signals_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal& DecoderManifest::obd_pid_signals(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.obd_pid_signals)
  return _internal_obd_pid_signals(index);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* DecoderManifest::_internal_add_obd_pid_signals() {
  return _impl_.obd_pid_signals_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* DecoderManifest::add_obd_pid_signals() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal* _add = _internal_add_obd_pid_signals();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.obd_pid_signals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal >&
DecoderManifest::obd_pid_signals() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.obd_pid_signals)
  return _impl_.obd_pid_signals_;
}

// repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType complex_types = 4;
inline int DecoderManifest::_internal_complex_types_size() const {
  return _impl_.complex_types_.size();
}
inline int DecoderManifest::complex_types_size() const {
  return _internal_complex_types_size();
}
inline void DecoderManifest::clear_complex_types() {
  _impl_.complex_types_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* DecoderManifest::mutable_complex_types(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_types)
  return _impl_.complex_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType >*
DecoderManifest::mutable_complex_types() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_types)
  return &_impl_.complex_types_;
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType& DecoderManifest::_internal_complex_types(int index) const {
  return _impl_.complex_types_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType& DecoderManifest::complex_types(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_types)
  return _internal_complex_types(index);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* DecoderManifest::_internal_add_complex_types() {
  return _impl_.complex_types_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* DecoderManifest::add_complex_types() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType* _add = _internal_add_complex_types();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType >&
DecoderManifest::complex_types() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_types)
  return _impl_.complex_types_;
}

// repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal complex_signals = 5;
inline int DecoderManifest::_internal_complex_signals_size() const {
  return _impl_.complex_signals_.size();
}
inline int DecoderManifest::complex_signals_size() const {
  return _internal_complex_signals_size();
}
inline void DecoderManifest::clear_complex_signals() {
  _impl_.complex_signals_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* DecoderManifest::mutable_complex_signals(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_signals)
  return _impl_.complex_signals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal >*
DecoderManifest::mutable_complex_signals() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_signals)
  return &_impl_.complex_signals_;
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal& DecoderManifest::_internal_complex_signals(int index) const {
  return _impl_.complex_signals_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal& DecoderManifest::complex_signals(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_signals)
  return _internal_complex_signals(index);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* DecoderManifest::_internal_add_complex_signals() {
  return _impl_.complex_signals_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* DecoderManifest::add_complex_signals() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal* _add = _internal_add_complex_signals();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_signals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal >&
DecoderManifest::complex_signals() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.complex_signals)
  return _impl_.complex_signals_;
}

// -------------------------------------------------------------------

// CANSignal

// uint32 signal_id = 1;
inline void CANSignal::clear_signal_id() {
  _impl_.signal_id_ = 0u;
}
inline uint32_t CANSignal::_internal_signal_id() const {
  return _impl_.signal_id_;
}
inline uint32_t CANSignal::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.signal_id)
  return _internal_signal_id();
}
inline void CANSignal::_internal_set_signal_id(uint32_t value) {
  
  _impl_.signal_id_ = value;
}
inline void CANSignal::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.signal_id)
}

// string interface_id = 2;
inline void CANSignal::clear_interface_id() {
  _impl_.interface_id_.ClearToEmpty();
}
inline const std::string& CANSignal::interface_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.interface_id)
  return _internal_interface_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CANSignal::set_interface_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interface_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.interface_id)
}
inline std::string* CANSignal::mutable_interface_id() {
  std::string* _s = _internal_mutable_interface_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.interface_id)
  return _s;
}
inline const std::string& CANSignal::_internal_interface_id() const {
  return _impl_.interface_id_.Get();
}
inline void CANSignal::_internal_set_interface_id(const std::string& value) {
  
  _impl_.interface_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CANSignal::_internal_mutable_interface_id() {
  
  return _impl_.interface_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CANSignal::release_interface_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.interface_id)
  return _impl_.interface_id_.Release();
}
inline void CANSignal::set_allocated_interface_id(std::string* interface_id) {
  if (interface_id != nullptr) {
    
  } else {
    
  }
  _impl_.interface_id_.SetAllocated(interface_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_id_.IsDefault()) {
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.interface_id)
}

// uint32 message_id = 3;
inline void CANSignal::clear_message_id() {
  _impl_.message_id_ = 0u;
}
inline uint32_t CANSignal::_internal_message_id() const {
  return _impl_.message_id_;
}
inline uint32_t CANSignal::message_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.message_id)
  return _internal_message_id();
}
inline void CANSignal::_internal_set_message_id(uint32_t value) {
  
  _impl_.message_id_ = value;
}
inline void CANSignal::set_message_id(uint32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.message_id)
}

// bool is_big_endian = 4;
inline void CANSignal::clear_is_big_endian() {
  _impl_.is_big_endian_ = false;
}
inline bool CANSignal::_internal_is_big_endian() const {
  return _impl_.is_big_endian_;
}
inline bool CANSignal::is_big_endian() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.is_big_endian)
  return _internal_is_big_endian();
}
inline void CANSignal::_internal_set_is_big_endian(bool value) {
  
  _impl_.is_big_endian_ = value;
}
inline void CANSignal::set_is_big_endian(bool value) {
  _internal_set_is_big_endian(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.is_big_endian)
}

// bool is_signed = 5;
inline void CANSignal::clear_is_signed() {
  _impl_.is_signed_ = false;
}
inline bool CANSignal::_internal_is_signed() const {
  return _impl_.is_signed_;
}
inline bool CANSignal::is_signed() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.is_signed)
  return _internal_is_signed();
}
inline void CANSignal::_internal_set_is_signed(bool value) {
  
  _impl_.is_signed_ = value;
}
inline void CANSignal::set_is_signed(bool value) {
  _internal_set_is_signed(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.is_signed)
}

// uint32 start_bit = 6;
inline void CANSignal::clear_start_bit() {
  _impl_.start_bit_ = 0u;
}
inline uint32_t CANSignal::_internal_start_bit() const {
  return _impl_.start_bit_;
}
inline uint32_t CANSignal::start_bit() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.start_bit)
  return _internal_start_bit();
}
inline void CANSignal::_internal_set_start_bit(uint32_t value) {
  
  _impl_.start_bit_ = value;
}
inline void CANSignal::set_start_bit(uint32_t value) {
  _internal_set_start_bit(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.start_bit)
}

// double offset = 7;
inline void CANSignal::clear_offset() {
  _impl_.offset_ = 0;
}
inline double CANSignal::_internal_offset() const {
  return _impl_.offset_;
}
inline double CANSignal::offset() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.offset)
  return _internal_offset();
}
inline void CANSignal::_internal_set_offset(double value) {
  
  _impl_.offset_ = value;
}
inline void CANSignal::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.offset)
}

// double factor = 8;
inline void CANSignal::clear_factor() {
  _impl_.factor_ = 0;
}
inline double CANSignal::_internal_factor() const {
  return _impl_.factor_;
}
inline double CANSignal::factor() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.factor)
  return _internal_factor();
}
inline void CANSignal::_internal_set_factor(double value) {
  
  _impl_.factor_ = value;
}
inline void CANSignal::set_factor(double value) {
  _internal_set_factor(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.factor)
}

// uint32 length = 9;
inline void CANSignal::clear_length() {
  _impl_.length_ = 0u;
}
inline uint32_t CANSignal::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t CANSignal::length() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.length)
  return _internal_length();
}
inline void CANSignal::_internal_set_length(uint32_t value) {
  
  _impl_.length_ = value;
}
inline void CANSignal::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.length)
}

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 10;
inline void CANSignal::clear_primitive_type() {
  _impl_.primitive_type_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType CANSignal::_internal_primitive_type() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType >(_impl_.primitive_type_);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType CANSignal::primitive_type() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.primitive_type)
  return _internal_primitive_type();
}
inline void CANSignal::_internal_set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value) {
  
  _impl_.primitive_type_ = value;
}
inline void CANSignal::set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value) {
  _internal_set_primitive_type(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.primitive_type)
}

// -------------------------------------------------------------------

// OBDPIDSignal

// uint32 signal_id = 1;
inline void OBDPIDSignal::clear_signal_id() {
  _impl_.signal_id_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_signal_id() const {
  return _impl_.signal_id_;
}
inline uint32_t OBDPIDSignal::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.signal_id)
  return _internal_signal_id();
}
inline void OBDPIDSignal::_internal_set_signal_id(uint32_t value) {
  
  _impl_.signal_id_ = value;
}
inline void OBDPIDSignal::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.signal_id)
}

// string interface_id = 2;
inline void OBDPIDSignal::clear_interface_id() {
  _impl_.interface_id_.ClearToEmpty();
}
inline const std::string& OBDPIDSignal::interface_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.interface_id)
  return _internal_interface_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OBDPIDSignal::set_interface_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interface_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.interface_id)
}
inline std::string* OBDPIDSignal::mutable_interface_id() {
  std::string* _s = _internal_mutable_interface_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.interface_id)
  return _s;
}
inline const std::string& OBDPIDSignal::_internal_interface_id() const {
  return _impl_.interface_id_.Get();
}
inline void OBDPIDSignal::_internal_set_interface_id(const std::string& value) {
  
  _impl_.interface_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OBDPIDSignal::_internal_mutable_interface_id() {
  
  return _impl_.interface_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OBDPIDSignal::release_interface_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.interface_id)
  return _impl_.interface_id_.Release();
}
inline void OBDPIDSignal::set_allocated_interface_id(std::string* interface_id) {
  if (interface_id != nullptr) {
    
  } else {
    
  }
  _impl_.interface_id_.SetAllocated(interface_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_id_.IsDefault()) {
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.interface_id)
}

// uint32 pid_response_length = 3;
inline void OBDPIDSignal::clear_pid_response_length() {
  _impl_.pid_response_length_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_pid_response_length() const {
  return _impl_.pid_response_length_;
}
inline uint32_t OBDPIDSignal::pid_response_length() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.pid_response_length)
  return _internal_pid_response_length();
}
inline void OBDPIDSignal::_internal_set_pid_response_length(uint32_t value) {
  
  _impl_.pid_response_length_ = value;
}
inline void OBDPIDSignal::set_pid_response_length(uint32_t value) {
  _internal_set_pid_response_length(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.pid_response_length)
}

// uint32 service_mode = 4;
inline void OBDPIDSignal::clear_service_mode() {
  _impl_.service_mode_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_service_mode() const {
  return _impl_.service_mode_;
}
inline uint32_t OBDPIDSignal::service_mode() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.service_mode)
  return _internal_service_mode();
}
inline void OBDPIDSignal::_internal_set_service_mode(uint32_t value) {
  
  _impl_.service_mode_ = value;
}
inline void OBDPIDSignal::set_service_mode(uint32_t value) {
  _internal_set_service_mode(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.service_mode)
}

// uint32 pid = 5;
inline void OBDPIDSignal::clear_pid() {
  _impl_.pid_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t OBDPIDSignal::pid() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.pid)
  return _internal_pid();
}
inline void OBDPIDSignal::_internal_set_pid(uint32_t value) {
  
  _impl_.pid_ = value;
}
inline void OBDPIDSignal::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.pid)
}

// double scaling = 6;
inline void OBDPIDSignal::clear_scaling() {
  _impl_.scaling_ = 0;
}
inline double OBDPIDSignal::_internal_scaling() const {
  return _impl_.scaling_;
}
inline double OBDPIDSignal::scaling() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.scaling)
  return _internal_scaling();
}
inline void OBDPIDSignal::_internal_set_scaling(double value) {
  
  _impl_.scaling_ = value;
}
inline void OBDPIDSignal::set_scaling(double value) {
  _internal_set_scaling(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.scaling)
}

// double offset = 7;
inline void OBDPIDSignal::clear_offset() {
  _impl_.offset_ = 0;
}
inline double OBDPIDSignal::_internal_offset() const {
  return _impl_.offset_;
}
inline double OBDPIDSignal::offset() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.offset)
  return _internal_offset();
}
inline void OBDPIDSignal::_internal_set_offset(double value) {
  
  _impl_.offset_ = value;
}
inline void OBDPIDSignal::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.offset)
}

// uint32 start_byte = 8;
inline void OBDPIDSignal::clear_start_byte() {
  _impl_.start_byte_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_start_byte() const {
  return _impl_.start_byte_;
}
inline uint32_t OBDPIDSignal::start_byte() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.start_byte)
  return _internal_start_byte();
}
inline void OBDPIDSignal::_internal_set_start_byte(uint32_t value) {
  
  _impl_.start_byte_ = value;
}
inline void OBDPIDSignal::set_start_byte(uint32_t value) {
  _internal_set_start_byte(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.start_byte)
}

// uint32 byte_length = 9;
inline void OBDPIDSignal::clear_byte_length() {
  _impl_.byte_length_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_byte_length() const {
  return _impl_.byte_length_;
}
inline uint32_t OBDPIDSignal::byte_length() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.byte_length)
  return _internal_byte_length();
}
inline void OBDPIDSignal::_internal_set_byte_length(uint32_t value) {
  
  _impl_.byte_length_ = value;
}
inline void OBDPIDSignal::set_byte_length(uint32_t value) {
  _internal_set_byte_length(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.byte_length)
}

// uint32 bit_right_shift = 10;
inline void OBDPIDSignal::clear_bit_right_shift() {
  _impl_.bit_right_shift_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_bit_right_shift() const {
  return _impl_.bit_right_shift_;
}
inline uint32_t OBDPIDSignal::bit_right_shift() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.bit_right_shift)
  return _internal_bit_right_shift();
}
inline void OBDPIDSignal::_internal_set_bit_right_shift(uint32_t value) {
  
  _impl_.bit_right_shift_ = value;
}
inline void OBDPIDSignal::set_bit_right_shift(uint32_t value) {
  _internal_set_bit_right_shift(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.bit_right_shift)
}

// uint32 bit_mask_length = 11;
inline void OBDPIDSignal::clear_bit_mask_length() {
  _impl_.bit_mask_length_ = 0u;
}
inline uint32_t OBDPIDSignal::_internal_bit_mask_length() const {
  return _impl_.bit_mask_length_;
}
inline uint32_t OBDPIDSignal::bit_mask_length() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.bit_mask_length)
  return _internal_bit_mask_length();
}
inline void OBDPIDSignal::_internal_set_bit_mask_length(uint32_t value) {
  
  _impl_.bit_mask_length_ = value;
}
inline void OBDPIDSignal::set_bit_mask_length(uint32_t value) {
  _internal_set_bit_mask_length(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.bit_mask_length)
}

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 12;
inline void OBDPIDSignal::clear_primitive_type() {
  _impl_.primitive_type_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType OBDPIDSignal::_internal_primitive_type() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType >(_impl_.primitive_type_);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType OBDPIDSignal::primitive_type() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.primitive_type)
  return _internal_primitive_type();
}
inline void OBDPIDSignal::_internal_set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value) {
  
  _impl_.primitive_type_ = value;
}
inline void OBDPIDSignal::set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value) {
  _internal_set_primitive_type(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.primitive_type)
}

// -------------------------------------------------------------------

// PrimitiveData

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 1;
inline void PrimitiveData::clear_primitive_type() {
  _impl_.primitive_type_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType PrimitiveData::_internal_primitive_type() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType >(_impl_.primitive_type_);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType PrimitiveData::primitive_type() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData.primitive_type)
  return _internal_primitive_type();
}
inline void PrimitiveData::_internal_set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value) {
  
  _impl_.primitive_type_ = value;
}
inline void PrimitiveData::set_primitive_type(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType value) {
  _internal_set_primitive_type(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData.primitive_type)
}

// double scaling = 2;
inline void PrimitiveData::clear_scaling() {
  _impl_.scaling_ = 0;
}
inline double PrimitiveData::_internal_scaling() const {
  return _impl_.scaling_;
}
inline double PrimitiveData::scaling() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData.scaling)
  return _internal_scaling();
}
inline void PrimitiveData::_internal_set_scaling(double value) {
  
  _impl_.scaling_ = value;
}
inline void PrimitiveData::set_scaling(double value) {
  _internal_set_scaling(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData.scaling)
}

// double offset = 3;
inline void PrimitiveData::clear_offset() {
  _impl_.offset_ = 0;
}
inline double PrimitiveData::_internal_offset() const {
  return _impl_.offset_;
}
inline double PrimitiveData::offset() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData.offset)
  return _internal_offset();
}
inline void PrimitiveData::_internal_set_offset(double value) {
  
  _impl_.offset_ = value;
}
inline void PrimitiveData::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData.offset)
}

// -------------------------------------------------------------------

// StringData

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringEncoding encoding = 1;
inline void StringData::clear_encoding() {
  _impl_.encoding_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding StringData::_internal_encoding() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding >(_impl_.encoding_);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding StringData::encoding() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData.encoding)
  return _internal_encoding();
}
inline void StringData::_internal_set_encoding(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding value) {
  
  _impl_.encoding_ = value;
}
inline void StringData::set_encoding(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData.encoding)
}

// int64 size = 2;
inline void StringData::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t StringData::_internal_size() const {
  return _impl_.size_;
}
inline int64_t StringData::size() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData.size)
  return _internal_size();
}
inline void StringData::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void StringData::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData.size)
}

// -------------------------------------------------------------------

// ComplexArray

// int64 size = 1;
inline void ComplexArray::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t ComplexArray::_internal_size() const {
  return _impl_.size_;
}
inline int64_t ComplexArray::size() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray.size)
  return _internal_size();
}
inline void ComplexArray::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void ComplexArray::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray.size)
}

// uint32 type_id = 2;
inline void ComplexArray::clear_type_id() {
  _impl_.type_id_ = 0u;
}
inline uint32_t ComplexArray::_internal_type_id() const {
  return _impl_.type_id_;
}
inline uint32_t ComplexArray::type_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray.type_id)
  return _internal_type_id();
}
inline void ComplexArray::_internal_set_type_id(uint32_t value) {
  
  _impl_.type_id_ = value;
}
inline void ComplexArray::set_type_id(uint32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray.type_id)
}

// -------------------------------------------------------------------

// ComplexStructMember

// uint32 type_id = 1;
inline void ComplexStructMember::clear_type_id() {
  _impl_.type_id_ = 0u;
}
inline uint32_t ComplexStructMember::_internal_type_id() const {
  return _impl_.type_id_;
}
inline uint32_t ComplexStructMember::type_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember.type_id)
  return _internal_type_id();
}
inline void ComplexStructMember::_internal_set_type_id(uint32_t value) {
  
  _impl_.type_id_ = value;
}
inline void ComplexStructMember::set_type_id(uint32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember.type_id)
}

// -------------------------------------------------------------------

// ComplexStruct

// repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember members = 1;
inline int ComplexStruct::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int ComplexStruct::members_size() const {
  return _internal_members_size();
}
inline void ComplexStruct::clear_members() {
  _impl_.members_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* ComplexStruct::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember >*
ComplexStruct::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct.members)
  return &_impl_.members_;
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember& ComplexStruct::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember& ComplexStruct::members(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct.members)
  return _internal_members(index);
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* ComplexStruct::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* ComplexStruct::add_members() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember >&
ComplexStruct::members() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct.members)
  return _impl_.members_;
}

// -------------------------------------------------------------------

// ComplexType

// uint32 type_id = 1;
inline void ComplexType::clear_type_id() {
  _impl_.type_id_ = 0u;
}
inline uint32_t ComplexType::_internal_type_id() const {
  return _impl_.type_id_;
}
inline uint32_t ComplexType::type_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.type_id)
  return _internal_type_id();
}
inline void ComplexType::_internal_set_type_id(uint32_t value) {
  
  _impl_.type_id_ = value;
}
inline void ComplexType::set_type_id(uint32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.type_id)
}

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData primitive_data = 2;
inline bool ComplexType::_internal_has_primitive_data() const {
  return variant_case() == kPrimitiveData;
}
inline bool ComplexType::has_primitive_data() const {
  return _internal_has_primitive_data();
}
inline void ComplexType::set_has_primitive_data() {
  _impl_._oneof_case_[0] = kPrimitiveData;
}
inline void ComplexType::clear_primitive_data() {
  if (_internal_has_primitive_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_.primitive_data_;
    }
    clear_has_variant();
  }
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* ComplexType::release_primitive_data() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.primitive_data)
  if (_internal_has_primitive_data()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* temp = _impl_.variant_.primitive_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.primitive_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData& ComplexType::_internal_primitive_data() const {
  return _internal_has_primitive_data()
      ? *_impl_.variant_.primitive_data_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData&>(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_PrimitiveData_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData& ComplexType::primitive_data() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.primitive_data)
  return _internal_primitive_data();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* ComplexType::unsafe_arena_release_primitive_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.primitive_data)
  if (_internal_has_primitive_data()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* temp = _impl_.variant_.primitive_data_;
    _impl_.variant_.primitive_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ComplexType::unsafe_arena_set_allocated_primitive_data(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* primitive_data) {
  clear_variant();
  if (primitive_data) {
    set_has_primitive_data();
    _impl_.variant_.primitive_data_ = primitive_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.primitive_data)
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* ComplexType::_internal_mutable_primitive_data() {
  if (!_internal_has_primitive_data()) {
    clear_variant();
    set_has_primitive_data();
    _impl_.variant_.primitive_data_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData >(GetArenaForAllocation());
  }
  return _impl_.variant_.primitive_data_;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* ComplexType::mutable_primitive_data() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* _msg = _internal_mutable_primitive_data();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.primitive_data)
  return _msg;
}

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct struct = 3;
inline bool ComplexType::_internal_has_struct_() const {
  return variant_case() == kStruct;
}
inline bool ComplexType::has_struct_() const {
  return _internal_has_struct_();
}
inline void ComplexType::set_has_struct_() {
  _impl_._oneof_case_[0] = kStruct;
}
inline void ComplexType::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_.struct__;
    }
    clear_has_variant();
  }
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* ComplexType::release_struct_() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.struct)
  if (_internal_has_struct_()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* temp = _impl_.variant_.struct__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct& ComplexType::_internal_struct_() const {
  return _internal_has_struct_()
      ? *_impl_.variant_.struct__
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct&>(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_ComplexStruct_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct& ComplexType::struct_() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.struct)
  return _internal_struct_();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* ComplexType::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.struct)
  if (_internal_has_struct_()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* temp = _impl_.variant_.struct__;
    _impl_.variant_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ComplexType::unsafe_arena_set_allocated_struct_(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* struct_) {
  clear_variant();
  if (struct_) {
    set_has_struct_();
    _impl_.variant_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.struct)
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* ComplexType::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_variant();
    set_has_struct_();
    _impl_.variant_.struct__ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct >(GetArenaForAllocation());
  }
  return _impl_.variant_.struct__;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* ComplexType::mutable_struct_() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* _msg = _internal_mutable_struct_();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.struct)
  return _msg;
}

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray array = 4;
inline bool ComplexType::_internal_has_array() const {
  return variant_case() == kArray;
}
inline bool ComplexType::has_array() const {
  return _internal_has_array();
}
inline void ComplexType::set_has_array() {
  _impl_._oneof_case_[0] = kArray;
}
inline void ComplexType::clear_array() {
  if (_internal_has_array()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_.array_;
    }
    clear_has_variant();
  }
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* ComplexType::release_array() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.array)
  if (_internal_has_array()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* temp = _impl_.variant_.array_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray& ComplexType::_internal_array() const {
  return _internal_has_array()
      ? *_impl_.variant_.array_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray&>(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_ComplexArray_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray& ComplexType::array() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.array)
  return _internal_array();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* ComplexType::unsafe_arena_release_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.array)
  if (_internal_has_array()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* temp = _impl_.variant_.array_;
    _impl_.variant_.array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ComplexType::unsafe_arena_set_allocated_array(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* array) {
  clear_variant();
  if (array) {
    set_has_array();
    _impl_.variant_.array_ = array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.array)
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* ComplexType::_internal_mutable_array() {
  if (!_internal_has_array()) {
    clear_variant();
    set_has_array();
    _impl_.variant_.array_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray >(GetArenaForAllocation());
  }
  return _impl_.variant_.array_;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* ComplexType::mutable_array() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* _msg = _internal_mutable_array();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.array)
  return _msg;
}

// .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData string_data = 5;
inline bool ComplexType::_internal_has_string_data() const {
  return variant_case() == kStringData;
}
inline bool ComplexType::has_string_data() const {
  return _internal_has_string_data();
}
inline void ComplexType::set_has_string_data() {
  _impl_._oneof_case_[0] = kStringData;
}
inline void ComplexType::clear_string_data() {
  if (_internal_has_string_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_.string_data_;
    }
    clear_has_variant();
  }
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* ComplexType::release_string_data() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.string_data)
  if (_internal_has_string_data()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* temp = _impl_.variant_.string_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.string_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData& ComplexType::_internal_string_data() const {
  return _internal_has_string_data()
      ? *_impl_.variant_.string_data_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData&>(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_StringData_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData& ComplexType::string_data() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.string_data)
  return _internal_string_data();
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* ComplexType::unsafe_arena_release_string_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.string_data)
  if (_internal_has_string_data()) {
    clear_has_variant();
    ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* temp = _impl_.variant_.string_data_;
    _impl_.variant_.string_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ComplexType::unsafe_arena_set_allocated_string_data(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* string_data) {
  clear_variant();
  if (string_data) {
    set_has_string_data();
    _impl_.variant_.string_data_ = string_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.string_data)
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* ComplexType::_internal_mutable_string_data() {
  if (!_internal_has_string_data()) {
    clear_variant();
    set_has_string_data();
    _impl_.variant_.string_data_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData >(GetArenaForAllocation());
  }
  return _impl_.variant_.string_data_;
}
inline ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* ComplexType::mutable_string_data() {
  ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* _msg = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.string_data)
  return _msg;
}

inline bool ComplexType::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
inline void ComplexType::clear_has_variant() {
  _impl_._oneof_case_[0] = VARIANT_NOT_SET;
}
inline ComplexType::VariantCase ComplexType::variant_case() const {
  return ComplexType::VariantCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ComplexSignal

// uint32 signal_id = 1;
inline void ComplexSignal::clear_signal_id() {
  _impl_.signal_id_ = 0u;
}
inline uint32_t ComplexSignal::_internal_signal_id() const {
  return _impl_.signal_id_;
}
inline uint32_t ComplexSignal::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.signal_id)
  return _internal_signal_id();
}
inline void ComplexSignal::_internal_set_signal_id(uint32_t value) {
  
  _impl_.signal_id_ = value;
}
inline void ComplexSignal::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.signal_id)
}

// string interface_id = 2;
inline void ComplexSignal::clear_interface_id() {
  _impl_.interface_id_.ClearToEmpty();
}
inline const std::string& ComplexSignal::interface_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.interface_id)
  return _internal_interface_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexSignal::set_interface_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interface_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.interface_id)
}
inline std::string* ComplexSignal::mutable_interface_id() {
  std::string* _s = _internal_mutable_interface_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.interface_id)
  return _s;
}
inline const std::string& ComplexSignal::_internal_interface_id() const {
  return _impl_.interface_id_.Get();
}
inline void ComplexSignal::_internal_set_interface_id(const std::string& value) {
  
  _impl_.interface_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexSignal::_internal_mutable_interface_id() {
  
  return _impl_.interface_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ComplexSignal::release_interface_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.interface_id)
  return _impl_.interface_id_.Release();
}
inline void ComplexSignal::set_allocated_interface_id(std::string* interface_id) {
  if (interface_id != nullptr) {
    
  } else {
    
  }
  _impl_.interface_id_.SetAllocated(interface_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_id_.IsDefault()) {
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.interface_id)
}

// string message_id = 3;
inline void ComplexSignal::clear_message_id() {
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ComplexSignal::message_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.message_id)
  return _internal_message_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexSignal::set_message_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.message_id)
}
inline std::string* ComplexSignal::mutable_message_id() {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.message_id)
  return _s;
}
inline const std::string& ComplexSignal::_internal_message_id() const {
  return _impl_.message_id_.Get();
}
inline void ComplexSignal::_internal_set_message_id(const std::string& value) {
  
  _impl_.message_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ComplexSignal::_internal_mutable_message_id() {
  
  return _impl_.message_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ComplexSignal::release_message_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.message_id)
  return _impl_.message_id_.Release();
}
inline void ComplexSignal::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  _impl_.message_id_.SetAllocated(message_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.message_id)
}

// uint32 root_type_id = 4;
inline void ComplexSignal::clear_root_type_id() {
  _impl_.root_type_id_ = 0u;
}
inline uint32_t ComplexSignal::_internal_root_type_id() const {
  return _impl_.root_type_id_;
}
inline uint32_t ComplexSignal::root_type_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.root_type_id)
  return _internal_root_type_id();
}
inline void ComplexSignal::_internal_set_root_type_id(uint32_t value) {
  
  _impl_.root_type_id_ = value;
}
inline void ComplexSignal::set_root_type_id(uint32_t value) {
  _internal_set_root_type_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.root_type_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DecoderManifestMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType>() {
  return ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType_descriptor();
}
template <> struct is_proto_enum< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding>() {
  return ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_decoder_5fmanifest_2eproto
