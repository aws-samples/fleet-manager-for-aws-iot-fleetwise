// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5ftypes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_5ftypes_2eproto;
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CommonTypesMsg {
class ConditionNode;
struct ConditionNodeDefaultTypeInternal;
extern ConditionNodeDefaultTypeInternal _ConditionNode_default_instance_;
class ConditionNode_NodeFunction;
struct ConditionNode_NodeFunctionDefaultTypeInternal;
extern ConditionNode_NodeFunctionDefaultTypeInternal _ConditionNode_NodeFunction_default_instance_;
class ConditionNode_NodeFunction_GeohashFunction;
struct ConditionNode_NodeFunction_GeohashFunctionDefaultTypeInternal;
extern ConditionNode_NodeFunction_GeohashFunctionDefaultTypeInternal _ConditionNode_NodeFunction_GeohashFunction_default_instance_;
class ConditionNode_NodeFunction_WindowFunction;
struct ConditionNode_NodeFunction_WindowFunctionDefaultTypeInternal;
extern ConditionNode_NodeFunction_WindowFunctionDefaultTypeInternal _ConditionNode_NodeFunction_WindowFunction_default_instance_;
class ConditionNode_NodeOperator;
struct ConditionNode_NodeOperatorDefaultTypeInternal;
extern ConditionNode_NodeOperatorDefaultTypeInternal _ConditionNode_NodeOperator_default_instance_;
class PrimitiveTypeInComplexSignal;
struct PrimitiveTypeInComplexSignalDefaultTypeInternal;
extern PrimitiveTypeInComplexSignalDefaultTypeInternal _PrimitiveTypeInComplexSignal_default_instance_;
class SignalPath;
struct SignalPathDefaultTypeInternal;
extern SignalPathDefaultTypeInternal _SignalPath_default_instance_;
}  // namespace CommonTypesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CommonTypesMsg {

enum ConditionNode_NodeOperator_Operator : int {
  ConditionNode_NodeOperator_Operator_COMPARE_SMALLER = 0,
  ConditionNode_NodeOperator_Operator_COMPARE_BIGGER = 1,
  ConditionNode_NodeOperator_Operator_COMPARE_SMALLER_EQUAL = 2,
  ConditionNode_NodeOperator_Operator_COMPARE_BIGGER_EQUAL = 3,
  ConditionNode_NodeOperator_Operator_COMPARE_EQUAL = 4,
  ConditionNode_NodeOperator_Operator_COMPARE_NOT_EQUAL = 5,
  ConditionNode_NodeOperator_Operator_LOGICAL_AND = 6,
  ConditionNode_NodeOperator_Operator_LOGICAL_OR = 7,
  ConditionNode_NodeOperator_Operator_LOGICAL_NOT = 8,
  ConditionNode_NodeOperator_Operator_ARITHMETIC_PLUS = 9,
  ConditionNode_NodeOperator_Operator_ARITHMETIC_MINUS = 10,
  ConditionNode_NodeOperator_Operator_ARITHMETIC_MULTIPLY = 11,
  ConditionNode_NodeOperator_Operator_ARITHMETIC_DIVIDE = 12,
  ConditionNode_NodeOperator_Operator_ConditionNode_NodeOperator_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConditionNode_NodeOperator_Operator_ConditionNode_NodeOperator_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConditionNode_NodeOperator_Operator_IsValid(int value);
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator_Operator_Operator_MIN = ConditionNode_NodeOperator_Operator_COMPARE_SMALLER;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator_Operator_Operator_MAX = ConditionNode_NodeOperator_Operator_ARITHMETIC_DIVIDE;
constexpr int ConditionNode_NodeOperator_Operator_Operator_ARRAYSIZE = ConditionNode_NodeOperator_Operator_Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionNode_NodeOperator_Operator_descriptor();
template<typename T>
inline const std::string& ConditionNode_NodeOperator_Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConditionNode_NodeOperator_Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConditionNode_NodeOperator_Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConditionNode_NodeOperator_Operator_descriptor(), enum_t_value);
}
inline bool ConditionNode_NodeOperator_Operator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConditionNode_NodeOperator_Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConditionNode_NodeOperator_Operator>(
    ConditionNode_NodeOperator_Operator_descriptor(), name, value);
}
enum ConditionNode_NodeFunction_GeohashFunction_GPSUnitType : int {
  ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_DECIMAL_DEGREE = 0,
  ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_MICROARCSECOND = 1,
  ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_MILLIARCSECOND = 2,
  ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_ARCSECOND = 3,
  ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_IsValid(int value);
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_GPSUnitType_MIN = ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_DECIMAL_DEGREE;
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_GPSUnitType_MAX = ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_ARCSECOND;
constexpr int ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_GPSUnitType_ARRAYSIZE = ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_GPSUnitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_descriptor();
template<typename T>
inline const std::string& ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConditionNode_NodeFunction_GeohashFunction_GPSUnitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_descriptor(), enum_t_value);
}
inline bool ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConditionNode_NodeFunction_GeohashFunction_GPSUnitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConditionNode_NodeFunction_GeohashFunction_GPSUnitType>(
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_descriptor(), name, value);
}
enum ConditionNode_NodeFunction_WindowFunction_WindowType : int {
  ConditionNode_NodeFunction_WindowFunction_WindowType_LAST_WINDOW_MIN = 0,
  ConditionNode_NodeFunction_WindowFunction_WindowType_LAST_WINDOW_MAX = 1,
  ConditionNode_NodeFunction_WindowFunction_WindowType_LAST_WINDOW_AVG = 2,
  ConditionNode_NodeFunction_WindowFunction_WindowType_PREV_LAST_WINDOW_MIN = 3,
  ConditionNode_NodeFunction_WindowFunction_WindowType_PREV_LAST_WINDOW_MAX = 4,
  ConditionNode_NodeFunction_WindowFunction_WindowType_PREV_LAST_WINDOW_AVG = 5,
  ConditionNode_NodeFunction_WindowFunction_WindowType_ConditionNode_NodeFunction_WindowFunction_WindowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConditionNode_NodeFunction_WindowFunction_WindowType_ConditionNode_NodeFunction_WindowFunction_WindowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConditionNode_NodeFunction_WindowFunction_WindowType_IsValid(int value);
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction_WindowType_WindowType_MIN = ConditionNode_NodeFunction_WindowFunction_WindowType_LAST_WINDOW_MIN;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction_WindowType_WindowType_MAX = ConditionNode_NodeFunction_WindowFunction_WindowType_PREV_LAST_WINDOW_AVG;
constexpr int ConditionNode_NodeFunction_WindowFunction_WindowType_WindowType_ARRAYSIZE = ConditionNode_NodeFunction_WindowFunction_WindowType_WindowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionNode_NodeFunction_WindowFunction_WindowType_descriptor();
template<typename T>
inline const std::string& ConditionNode_NodeFunction_WindowFunction_WindowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConditionNode_NodeFunction_WindowFunction_WindowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConditionNode_NodeFunction_WindowFunction_WindowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConditionNode_NodeFunction_WindowFunction_WindowType_descriptor(), enum_t_value);
}
inline bool ConditionNode_NodeFunction_WindowFunction_WindowType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConditionNode_NodeFunction_WindowFunction_WindowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConditionNode_NodeFunction_WindowFunction_WindowType>(
    ConditionNode_NodeFunction_WindowFunction_WindowType_descriptor(), name, value);
}
// ===================================================================

class PrimitiveTypeInComplexSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal) */ {
 public:
  inline PrimitiveTypeInComplexSignal() : PrimitiveTypeInComplexSignal(nullptr) {}
  ~PrimitiveTypeInComplexSignal() override;
  explicit PROTOBUF_CONSTEXPR PrimitiveTypeInComplexSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimitiveTypeInComplexSignal(const PrimitiveTypeInComplexSignal& from);
  PrimitiveTypeInComplexSignal(PrimitiveTypeInComplexSignal&& from) noexcept
    : PrimitiveTypeInComplexSignal() {
    *this = ::std::move(from);
  }

  inline PrimitiveTypeInComplexSignal& operator=(const PrimitiveTypeInComplexSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveTypeInComplexSignal& operator=(PrimitiveTypeInComplexSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimitiveTypeInComplexSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimitiveTypeInComplexSignal* internal_default_instance() {
    return reinterpret_cast<const PrimitiveTypeInComplexSignal*>(
               &_PrimitiveTypeInComplexSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrimitiveTypeInComplexSignal& a, PrimitiveTypeInComplexSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveTypeInComplexSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveTypeInComplexSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimitiveTypeInComplexSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimitiveTypeInComplexSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimitiveTypeInComplexSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimitiveTypeInComplexSignal& from) {
    PrimitiveTypeInComplexSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveTypeInComplexSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal";
  }
  protected:
  explicit PrimitiveTypeInComplexSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalPathFieldNumber = 2,
    kSignalIdFieldNumber = 1,
  };
  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 2;
  bool has_signal_path() const;
  private:
  bool _internal_has_signal_path() const;
  public:
  void clear_signal_path();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& signal_path() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* release_signal_path();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* mutable_signal_path();
  void set_allocated_signal_path(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& _internal_signal_path() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* _internal_mutable_signal_path();
  public:
  void unsafe_arena_set_allocated_signal_path(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* unsafe_arena_release_signal_path();

  // uint32 signal_id = 1;
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path_;
    uint32_t signal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class SignalPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath) */ {
 public:
  inline SignalPath() : SignalPath(nullptr) {}
  ~SignalPath() override;
  explicit PROTOBUF_CONSTEXPR SignalPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalPath(const SignalPath& from);
  SignalPath(SignalPath&& from) noexcept
    : SignalPath() {
    *this = ::std::move(from);
  }

  inline SignalPath& operator=(const SignalPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalPath& operator=(SignalPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignalPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalPath* internal_default_instance() {
    return reinterpret_cast<const SignalPath*>(
               &_SignalPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignalPath& a, SignalPath& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignalPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignalPath& from) {
    SignalPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath";
  }
  protected:
  explicit SignalPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalPathFieldNumber = 1,
  };
  // repeated uint32 signal_path = 1;
  int signal_path_size() const;
  private:
  int _internal_signal_path_size() const;
  public:
  void clear_signal_path();
  private:
  uint32_t _internal_signal_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_signal_path() const;
  void _internal_add_signal_path(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_signal_path();
  public:
  uint32_t signal_path(int index) const;
  void set_signal_path(int index, uint32_t value);
  void add_signal_path(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      signal_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_signal_path();

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > signal_path_;
    mutable std::atomic<int> _signal_path_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ConditionNode_NodeOperator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator) */ {
 public:
  inline ConditionNode_NodeOperator() : ConditionNode_NodeOperator(nullptr) {}
  ~ConditionNode_NodeOperator() override;
  explicit PROTOBUF_CONSTEXPR ConditionNode_NodeOperator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionNode_NodeOperator(const ConditionNode_NodeOperator& from);
  ConditionNode_NodeOperator(ConditionNode_NodeOperator&& from) noexcept
    : ConditionNode_NodeOperator() {
    *this = ::std::move(from);
  }

  inline ConditionNode_NodeOperator& operator=(const ConditionNode_NodeOperator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionNode_NodeOperator& operator=(ConditionNode_NodeOperator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionNode_NodeOperator& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionNode_NodeOperator* internal_default_instance() {
    return reinterpret_cast<const ConditionNode_NodeOperator*>(
               &_ConditionNode_NodeOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConditionNode_NodeOperator& a, ConditionNode_NodeOperator& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionNode_NodeOperator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionNode_NodeOperator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionNode_NodeOperator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionNode_NodeOperator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionNode_NodeOperator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionNode_NodeOperator& from) {
    ConditionNode_NodeOperator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionNode_NodeOperator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator";
  }
  protected:
  explicit ConditionNode_NodeOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionNode_NodeOperator_Operator Operator;
  static constexpr Operator COMPARE_SMALLER =
    ConditionNode_NodeOperator_Operator_COMPARE_SMALLER;
  static constexpr Operator COMPARE_BIGGER =
    ConditionNode_NodeOperator_Operator_COMPARE_BIGGER;
  static constexpr Operator COMPARE_SMALLER_EQUAL =
    ConditionNode_NodeOperator_Operator_COMPARE_SMALLER_EQUAL;
  static constexpr Operator COMPARE_BIGGER_EQUAL =
    ConditionNode_NodeOperator_Operator_COMPARE_BIGGER_EQUAL;
  static constexpr Operator COMPARE_EQUAL =
    ConditionNode_NodeOperator_Operator_COMPARE_EQUAL;
  static constexpr Operator COMPARE_NOT_EQUAL =
    ConditionNode_NodeOperator_Operator_COMPARE_NOT_EQUAL;
  static constexpr Operator LOGICAL_AND =
    ConditionNode_NodeOperator_Operator_LOGICAL_AND;
  static constexpr Operator LOGICAL_OR =
    ConditionNode_NodeOperator_Operator_LOGICAL_OR;
  static constexpr Operator LOGICAL_NOT =
    ConditionNode_NodeOperator_Operator_LOGICAL_NOT;
  static constexpr Operator ARITHMETIC_PLUS =
    ConditionNode_NodeOperator_Operator_ARITHMETIC_PLUS;
  static constexpr Operator ARITHMETIC_MINUS =
    ConditionNode_NodeOperator_Operator_ARITHMETIC_MINUS;
  static constexpr Operator ARITHMETIC_MULTIPLY =
    ConditionNode_NodeOperator_Operator_ARITHMETIC_MULTIPLY;
  static constexpr Operator ARITHMETIC_DIVIDE =
    ConditionNode_NodeOperator_Operator_ARITHMETIC_DIVIDE;
  static inline bool Operator_IsValid(int value) {
    return ConditionNode_NodeOperator_Operator_IsValid(value);
  }
  static constexpr Operator Operator_MIN =
    ConditionNode_NodeOperator_Operator_Operator_MIN;
  static constexpr Operator Operator_MAX =
    ConditionNode_NodeOperator_Operator_Operator_MAX;
  static constexpr int Operator_ARRAYSIZE =
    ConditionNode_NodeOperator_Operator_Operator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operator_descriptor() {
    return ConditionNode_NodeOperator_Operator_descriptor();
  }
  template<typename T>
  static inline const std::string& Operator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operator_Name.");
    return ConditionNode_NodeOperator_Operator_Name(enum_t_value);
  }
  static inline bool Operator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operator* value) {
    return ConditionNode_NodeOperator_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftChildFieldNumber = 1,
    kRightChildFieldNumber = 2,
    kOperatorFieldNumber = 3,
  };
  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode left_child = 1;
  bool has_left_child() const;
  private:
  bool _internal_has_left_child() const;
  public:
  void clear_left_child();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& left_child() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* release_left_child();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* mutable_left_child();
  void set_allocated_left_child(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* left_child);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& _internal_left_child() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* _internal_mutable_left_child();
  public:
  void unsafe_arena_set_allocated_left_child(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* left_child);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* unsafe_arena_release_left_child();

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode right_child = 2;
  bool has_right_child() const;
  private:
  bool _internal_has_right_child() const;
  public:
  void clear_right_child();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& right_child() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* release_right_child();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* mutable_right_child();
  void set_allocated_right_child(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* right_child);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& _internal_right_child() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* _internal_mutable_right_child();
  public:
  void unsafe_arena_set_allocated_right_child(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* right_child);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* unsafe_arena_release_right_child();

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.Operator operator = 3;
  void clear_operator_();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator operator_() const;
  void set_operator_(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator value);
  private:
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator _internal_operator_() const;
  void _internal_set_operator_(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* left_child_;
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* right_child_;
    int operator__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ConditionNode_NodeFunction_GeohashFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction) */ {
 public:
  inline ConditionNode_NodeFunction_GeohashFunction() : ConditionNode_NodeFunction_GeohashFunction(nullptr) {}
  ~ConditionNode_NodeFunction_GeohashFunction() override;
  explicit PROTOBUF_CONSTEXPR ConditionNode_NodeFunction_GeohashFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionNode_NodeFunction_GeohashFunction(const ConditionNode_NodeFunction_GeohashFunction& from);
  ConditionNode_NodeFunction_GeohashFunction(ConditionNode_NodeFunction_GeohashFunction&& from) noexcept
    : ConditionNode_NodeFunction_GeohashFunction() {
    *this = ::std::move(from);
  }

  inline ConditionNode_NodeFunction_GeohashFunction& operator=(const ConditionNode_NodeFunction_GeohashFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionNode_NodeFunction_GeohashFunction& operator=(ConditionNode_NodeFunction_GeohashFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionNode_NodeFunction_GeohashFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionNode_NodeFunction_GeohashFunction* internal_default_instance() {
    return reinterpret_cast<const ConditionNode_NodeFunction_GeohashFunction*>(
               &_ConditionNode_NodeFunction_GeohashFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConditionNode_NodeFunction_GeohashFunction& a, ConditionNode_NodeFunction_GeohashFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionNode_NodeFunction_GeohashFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionNode_NodeFunction_GeohashFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionNode_NodeFunction_GeohashFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionNode_NodeFunction_GeohashFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionNode_NodeFunction_GeohashFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionNode_NodeFunction_GeohashFunction& from) {
    ConditionNode_NodeFunction_GeohashFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionNode_NodeFunction_GeohashFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction";
  }
  protected:
  explicit ConditionNode_NodeFunction_GeohashFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionNode_NodeFunction_GeohashFunction_GPSUnitType GPSUnitType;
  static constexpr GPSUnitType DECIMAL_DEGREE =
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_DECIMAL_DEGREE;
  static constexpr GPSUnitType MICROARCSECOND =
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_MICROARCSECOND;
  static constexpr GPSUnitType MILLIARCSECOND =
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_MILLIARCSECOND;
  static constexpr GPSUnitType ARCSECOND =
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_ARCSECOND;
  static inline bool GPSUnitType_IsValid(int value) {
    return ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_IsValid(value);
  }
  static constexpr GPSUnitType GPSUnitType_MIN =
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_GPSUnitType_MIN;
  static constexpr GPSUnitType GPSUnitType_MAX =
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_GPSUnitType_MAX;
  static constexpr int GPSUnitType_ARRAYSIZE =
    ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_GPSUnitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GPSUnitType_descriptor() {
    return ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_descriptor();
  }
  template<typename T>
  static inline const std::string& GPSUnitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GPSUnitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GPSUnitType_Name.");
    return ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_Name(enum_t_value);
  }
  static inline bool GPSUnitType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GPSUnitType* value) {
    return ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeSignalIdFieldNumber = 1,
    kLongitudeSignalIdFieldNumber = 2,
    kGeohashPrecisionFieldNumber = 3,
    kGpsUnitFieldNumber = 4,
  };
  // uint32 latitude_signal_id = 1;
  void clear_latitude_signal_id();
  uint32_t latitude_signal_id() const;
  void set_latitude_signal_id(uint32_t value);
  private:
  uint32_t _internal_latitude_signal_id() const;
  void _internal_set_latitude_signal_id(uint32_t value);
  public:

  // uint32 longitude_signal_id = 2;
  void clear_longitude_signal_id();
  uint32_t longitude_signal_id() const;
  void set_longitude_signal_id(uint32_t value);
  private:
  uint32_t _internal_longitude_signal_id() const;
  void _internal_set_longitude_signal_id(uint32_t value);
  public:

  // uint32 geohash_precision = 3;
  void clear_geohash_precision();
  uint32_t geohash_precision() const;
  void set_geohash_precision(uint32_t value);
  private:
  uint32_t _internal_geohash_precision() const;
  void _internal_set_geohash_precision(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.GPSUnitType gps_unit = 4;
  void clear_gps_unit();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType gps_unit() const;
  void set_gps_unit(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType value);
  private:
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType _internal_gps_unit() const;
  void _internal_set_gps_unit(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t latitude_signal_id_;
    uint32_t longitude_signal_id_;
    uint32_t geohash_precision_;
    int gps_unit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ConditionNode_NodeFunction_WindowFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction) */ {
 public:
  inline ConditionNode_NodeFunction_WindowFunction() : ConditionNode_NodeFunction_WindowFunction(nullptr) {}
  ~ConditionNode_NodeFunction_WindowFunction() override;
  explicit PROTOBUF_CONSTEXPR ConditionNode_NodeFunction_WindowFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionNode_NodeFunction_WindowFunction(const ConditionNode_NodeFunction_WindowFunction& from);
  ConditionNode_NodeFunction_WindowFunction(ConditionNode_NodeFunction_WindowFunction&& from) noexcept
    : ConditionNode_NodeFunction_WindowFunction() {
    *this = ::std::move(from);
  }

  inline ConditionNode_NodeFunction_WindowFunction& operator=(const ConditionNode_NodeFunction_WindowFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionNode_NodeFunction_WindowFunction& operator=(ConditionNode_NodeFunction_WindowFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionNode_NodeFunction_WindowFunction& default_instance() {
    return *internal_default_instance();
  }
  enum PrimitiveTypesCase {
    kSignalId = 1,
    kPrimitiveTypeInSignal = 3,
    PRIMITIVETYPES_NOT_SET = 0,
  };

  static inline const ConditionNode_NodeFunction_WindowFunction* internal_default_instance() {
    return reinterpret_cast<const ConditionNode_NodeFunction_WindowFunction*>(
               &_ConditionNode_NodeFunction_WindowFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConditionNode_NodeFunction_WindowFunction& a, ConditionNode_NodeFunction_WindowFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionNode_NodeFunction_WindowFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionNode_NodeFunction_WindowFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionNode_NodeFunction_WindowFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionNode_NodeFunction_WindowFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionNode_NodeFunction_WindowFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionNode_NodeFunction_WindowFunction& from) {
    ConditionNode_NodeFunction_WindowFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionNode_NodeFunction_WindowFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction";
  }
  protected:
  explicit ConditionNode_NodeFunction_WindowFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionNode_NodeFunction_WindowFunction_WindowType WindowType;
  static constexpr WindowType LAST_WINDOW_MIN =
    ConditionNode_NodeFunction_WindowFunction_WindowType_LAST_WINDOW_MIN;
  static constexpr WindowType LAST_WINDOW_MAX =
    ConditionNode_NodeFunction_WindowFunction_WindowType_LAST_WINDOW_MAX;
  static constexpr WindowType LAST_WINDOW_AVG =
    ConditionNode_NodeFunction_WindowFunction_WindowType_LAST_WINDOW_AVG;
  static constexpr WindowType PREV_LAST_WINDOW_MIN =
    ConditionNode_NodeFunction_WindowFunction_WindowType_PREV_LAST_WINDOW_MIN;
  static constexpr WindowType PREV_LAST_WINDOW_MAX =
    ConditionNode_NodeFunction_WindowFunction_WindowType_PREV_LAST_WINDOW_MAX;
  static constexpr WindowType PREV_LAST_WINDOW_AVG =
    ConditionNode_NodeFunction_WindowFunction_WindowType_PREV_LAST_WINDOW_AVG;
  static inline bool WindowType_IsValid(int value) {
    return ConditionNode_NodeFunction_WindowFunction_WindowType_IsValid(value);
  }
  static constexpr WindowType WindowType_MIN =
    ConditionNode_NodeFunction_WindowFunction_WindowType_WindowType_MIN;
  static constexpr WindowType WindowType_MAX =
    ConditionNode_NodeFunction_WindowFunction_WindowType_WindowType_MAX;
  static constexpr int WindowType_ARRAYSIZE =
    ConditionNode_NodeFunction_WindowFunction_WindowType_WindowType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WindowType_descriptor() {
    return ConditionNode_NodeFunction_WindowFunction_WindowType_descriptor();
  }
  template<typename T>
  static inline const std::string& WindowType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WindowType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WindowType_Name.");
    return ConditionNode_NodeFunction_WindowFunction_WindowType_Name(enum_t_value);
  }
  static inline bool WindowType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WindowType* value) {
    return ConditionNode_NodeFunction_WindowFunction_WindowType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWindowTypeFieldNumber = 2,
    kSignalIdFieldNumber = 1,
    kPrimitiveTypeInSignalFieldNumber = 3,
  };
  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.WindowType window_type = 2;
  void clear_window_type();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType window_type() const;
  void set_window_type(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType value);
  private:
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType _internal_window_type() const;
  void _internal_set_window_type(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType value);
  public:

  // uint32 signal_id = 1;
  bool has_signal_id() const;
  private:
  bool _internal_has_signal_id() const;
  public:
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal primitive_type_in_signal = 3;
  bool has_primitive_type_in_signal() const;
  private:
  bool _internal_has_primitive_type_in_signal() const;
  public:
  void clear_primitive_type_in_signal();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& primitive_type_in_signal() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* release_primitive_type_in_signal();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* mutable_primitive_type_in_signal();
  void set_allocated_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* primitive_type_in_signal);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& _internal_primitive_type_in_signal() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* _internal_mutable_primitive_type_in_signal();
  public:
  void unsafe_arena_set_allocated_primitive_type_in_signal(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* primitive_type_in_signal);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* unsafe_arena_release_primitive_type_in_signal();

  void clear_primitiveTypes();
  PrimitiveTypesCase primitiveTypes_case() const;
  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
 private:
  class _Internal;
  void set_has_signal_id();
  void set_has_primitive_type_in_signal();

  inline bool has_primitiveTypes() const;
  inline void clear_has_primitiveTypes();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int window_type_;
    union PrimitiveTypesUnion {
      constexpr PrimitiveTypesUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t signal_id_;
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* primitive_type_in_signal_;
    } primitiveTypes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ConditionNode_NodeFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction) */ {
 public:
  inline ConditionNode_NodeFunction() : ConditionNode_NodeFunction(nullptr) {}
  ~ConditionNode_NodeFunction() override;
  explicit PROTOBUF_CONSTEXPR ConditionNode_NodeFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionNode_NodeFunction(const ConditionNode_NodeFunction& from);
  ConditionNode_NodeFunction(ConditionNode_NodeFunction&& from) noexcept
    : ConditionNode_NodeFunction() {
    *this = ::std::move(from);
  }

  inline ConditionNode_NodeFunction& operator=(const ConditionNode_NodeFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionNode_NodeFunction& operator=(ConditionNode_NodeFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionNode_NodeFunction& default_instance() {
    return *internal_default_instance();
  }
  enum FunctionTypeCase {
    kWindowFunction = 1,
    kGeohashFunction = 2,
    FUNCTIONTYPE_NOT_SET = 0,
  };

  static inline const ConditionNode_NodeFunction* internal_default_instance() {
    return reinterpret_cast<const ConditionNode_NodeFunction*>(
               &_ConditionNode_NodeFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConditionNode_NodeFunction& a, ConditionNode_NodeFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionNode_NodeFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionNode_NodeFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionNode_NodeFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionNode_NodeFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionNode_NodeFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionNode_NodeFunction& from) {
    ConditionNode_NodeFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionNode_NodeFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction";
  }
  protected:
  explicit ConditionNode_NodeFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionNode_NodeFunction_GeohashFunction GeohashFunction;
  typedef ConditionNode_NodeFunction_WindowFunction WindowFunction;

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFunctionFieldNumber = 1,
    kGeohashFunctionFieldNumber = 2,
  };
  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction window_function = 1;
  bool has_window_function() const;
  private:
  bool _internal_has_window_function() const;
  public:
  void clear_window_function();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction& window_function() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* release_window_function();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* mutable_window_function();
  void set_allocated_window_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* window_function);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction& _internal_window_function() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* _internal_mutable_window_function();
  public:
  void unsafe_arena_set_allocated_window_function(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* window_function);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* unsafe_arena_release_window_function();

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction geohash_function = 2;
  bool has_geohash_function() const;
  private:
  bool _internal_has_geohash_function() const;
  public:
  void clear_geohash_function();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction& geohash_function() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* release_geohash_function();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* mutable_geohash_function();
  void set_allocated_geohash_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* geohash_function);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction& _internal_geohash_function() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* _internal_mutable_geohash_function();
  public:
  void unsafe_arena_set_allocated_geohash_function(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* geohash_function);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* unsafe_arena_release_geohash_function();

  void clear_functionType();
  FunctionTypeCase functionType_case() const;
  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
 private:
  class _Internal;
  void set_has_window_function();
  void set_has_geohash_function();

  inline bool has_functionType() const;
  inline void clear_has_functionType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union FunctionTypeUnion {
      constexpr FunctionTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* window_function_;
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* geohash_function_;
    } functionType_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ConditionNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode) */ {
 public:
  inline ConditionNode() : ConditionNode(nullptr) {}
  ~ConditionNode() override;
  explicit PROTOBUF_CONSTEXPR ConditionNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionNode(const ConditionNode& from);
  ConditionNode(ConditionNode&& from) noexcept
    : ConditionNode() {
    *this = ::std::move(from);
  }

  inline ConditionNode& operator=(const ConditionNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionNode& operator=(ConditionNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionNode& default_instance() {
    return *internal_default_instance();
  }
  enum NodeCase {
    kNodeOperator = 1,
    kNodeFunction = 2,
    kNodeDoubleValue = 3,
    kNodeSignalId = 4,
    kNodeBooleanValue = 5,
    kNodePrimitiveTypeInSignal = 6,
    NODE_NOT_SET = 0,
  };

  static inline const ConditionNode* internal_default_instance() {
    return reinterpret_cast<const ConditionNode*>(
               &_ConditionNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConditionNode& a, ConditionNode& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionNode& from) {
    ConditionNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode";
  }
  protected:
  explicit ConditionNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionNode_NodeOperator NodeOperator;
  typedef ConditionNode_NodeFunction NodeFunction;

  // accessors -------------------------------------------------------

  enum : int {
    kNodeOperatorFieldNumber = 1,
    kNodeFunctionFieldNumber = 2,
    kNodeDoubleValueFieldNumber = 3,
    kNodeSignalIdFieldNumber = 4,
    kNodeBooleanValueFieldNumber = 5,
    kNodePrimitiveTypeInSignalFieldNumber = 6,
  };
  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator node_operator = 1;
  bool has_node_operator() const;
  private:
  bool _internal_has_node_operator() const;
  public:
  void clear_node_operator();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator& node_operator() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* release_node_operator();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* mutable_node_operator();
  void set_allocated_node_operator(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* node_operator);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator& _internal_node_operator() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* _internal_mutable_node_operator();
  public:
  void unsafe_arena_set_allocated_node_operator(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* node_operator);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* unsafe_arena_release_node_operator();

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction node_function = 2;
  bool has_node_function() const;
  private:
  bool _internal_has_node_function() const;
  public:
  void clear_node_function();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction& node_function() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* release_node_function();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* mutable_node_function();
  void set_allocated_node_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* node_function);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction& _internal_node_function() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* _internal_mutable_node_function();
  public:
  void unsafe_arena_set_allocated_node_function(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* node_function);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* unsafe_arena_release_node_function();

  // double node_double_value = 3;
  bool has_node_double_value() const;
  private:
  bool _internal_has_node_double_value() const;
  public:
  void clear_node_double_value();
  double node_double_value() const;
  void set_node_double_value(double value);
  private:
  double _internal_node_double_value() const;
  void _internal_set_node_double_value(double value);
  public:

  // uint32 node_signal_id = 4;
  bool has_node_signal_id() const;
  private:
  bool _internal_has_node_signal_id() const;
  public:
  void clear_node_signal_id();
  uint32_t node_signal_id() const;
  void set_node_signal_id(uint32_t value);
  private:
  uint32_t _internal_node_signal_id() const;
  void _internal_set_node_signal_id(uint32_t value);
  public:

  // bool node_boolean_value = 5;
  bool has_node_boolean_value() const;
  private:
  bool _internal_has_node_boolean_value() const;
  public:
  void clear_node_boolean_value();
  bool node_boolean_value() const;
  void set_node_boolean_value(bool value);
  private:
  bool _internal_node_boolean_value() const;
  void _internal_set_node_boolean_value(bool value);
  public:

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal node_primitive_type_in_signal = 6;
  bool has_node_primitive_type_in_signal() const;
  private:
  bool _internal_has_node_primitive_type_in_signal() const;
  public:
  void clear_node_primitive_type_in_signal();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& node_primitive_type_in_signal() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* release_node_primitive_type_in_signal();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* mutable_node_primitive_type_in_signal();
  void set_allocated_node_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* node_primitive_type_in_signal);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& _internal_node_primitive_type_in_signal() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* _internal_mutable_node_primitive_type_in_signal();
  public:
  void unsafe_arena_set_allocated_node_primitive_type_in_signal(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* node_primitive_type_in_signal);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* unsafe_arena_release_node_primitive_type_in_signal();

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
 private:
  class _Internal;
  void set_has_node_operator();
  void set_has_node_function();
  void set_has_node_double_value();
  void set_has_node_signal_id();
  void set_has_node_boolean_value();
  void set_has_node_primitive_type_in_signal();

  inline bool has_node() const;
  inline void clear_has_node();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union NodeUnion {
      constexpr NodeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* node_operator_;
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* node_function_;
      double node_double_value_;
      uint32_t node_signal_id_;
      bool node_boolean_value_;
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* node_primitive_type_in_signal_;
    } node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrimitiveTypeInComplexSignal

// uint32 signal_id = 1;
inline void PrimitiveTypeInComplexSignal::clear_signal_id() {
  _impl_.signal_id_ = 0u;
}
inline uint32_t PrimitiveTypeInComplexSignal::_internal_signal_id() const {
  return _impl_.signal_id_;
}
inline uint32_t PrimitiveTypeInComplexSignal::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal.signal_id)
  return _internal_signal_id();
}
inline void PrimitiveTypeInComplexSignal::_internal_set_signal_id(uint32_t value) {
  
  _impl_.signal_id_ = value;
}
inline void PrimitiveTypeInComplexSignal::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal.signal_id)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 2;
inline bool PrimitiveTypeInComplexSignal::_internal_has_signal_path() const {
  return this != internal_default_instance() && _impl_.signal_path_ != nullptr;
}
inline bool PrimitiveTypeInComplexSignal::has_signal_path() const {
  return _internal_has_signal_path();
}
inline void PrimitiveTypeInComplexSignal::clear_signal_path() {
  if (GetArenaForAllocation() == nullptr && _impl_.signal_path_ != nullptr) {
    delete _impl_.signal_path_;
  }
  _impl_.signal_path_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& PrimitiveTypeInComplexSignal::_internal_signal_path() const {
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* p = _impl_.signal_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath&>(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_SignalPath_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& PrimitiveTypeInComplexSignal::signal_path() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal.signal_path)
  return _internal_signal_path();
}
inline void PrimitiveTypeInComplexSignal::unsafe_arena_set_allocated_signal_path(
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_path_);
  }
  _impl_.signal_path_ = signal_path;
  if (signal_path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal.signal_path)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* PrimitiveTypeInComplexSignal::release_signal_path() {
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* temp = _impl_.signal_path_;
  _impl_.signal_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* PrimitiveTypeInComplexSignal::unsafe_arena_release_signal_path() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal.signal_path)
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* temp = _impl_.signal_path_;
  _impl_.signal_path_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* PrimitiveTypeInComplexSignal::_internal_mutable_signal_path() {
  
  if (_impl_.signal_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath>(GetArenaForAllocation());
    _impl_.signal_path_ = p;
  }
  return _impl_.signal_path_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* PrimitiveTypeInComplexSignal::mutable_signal_path() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* _msg = _internal_mutable_signal_path();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal.signal_path)
  return _msg;
}
inline void PrimitiveTypeInComplexSignal::set_allocated_signal_path(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signal_path_;
  }
  if (signal_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signal_path);
    if (message_arena != submessage_arena) {
      signal_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_path, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.signal_path_ = signal_path;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal.signal_path)
}

// -------------------------------------------------------------------

// SignalPath

// repeated uint32 signal_path = 1;
inline int SignalPath::_internal_signal_path_size() const {
  return _impl_.signal_path_.size();
}
inline int SignalPath::signal_path_size() const {
  return _internal_signal_path_size();
}
inline void SignalPath::clear_signal_path() {
  _impl_.signal_path_.Clear();
}
inline uint32_t SignalPath::_internal_signal_path(int index) const {
  return _impl_.signal_path_.Get(index);
}
inline uint32_t SignalPath::signal_path(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath.signal_path)
  return _internal_signal_path(index);
}
inline void SignalPath::set_signal_path(int index, uint32_t value) {
  _impl_.signal_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath.signal_path)
}
inline void SignalPath::_internal_add_signal_path(uint32_t value) {
  _impl_.signal_path_.Add(value);
}
inline void SignalPath::add_signal_path(uint32_t value) {
  _internal_add_signal_path(value);
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath.signal_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SignalPath::_internal_signal_path() const {
  return _impl_.signal_path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SignalPath::signal_path() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath.signal_path)
  return _internal_signal_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SignalPath::_internal_mutable_signal_path() {
  return &_impl_.signal_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SignalPath::mutable_signal_path() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath.signal_path)
  return _internal_mutable_signal_path();
}

// -------------------------------------------------------------------

// ConditionNode_NodeOperator

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode left_child = 1;
inline bool ConditionNode_NodeOperator::_internal_has_left_child() const {
  return this != internal_default_instance() && _impl_.left_child_ != nullptr;
}
inline bool ConditionNode_NodeOperator::has_left_child() const {
  return _internal_has_left_child();
}
inline void ConditionNode_NodeOperator::clear_left_child() {
  if (GetArenaForAllocation() == nullptr && _impl_.left_child_ != nullptr) {
    delete _impl_.left_child_;
  }
  _impl_.left_child_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& ConditionNode_NodeOperator::_internal_left_child() const {
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* p = _impl_.left_child_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode&>(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& ConditionNode_NodeOperator::left_child() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.left_child)
  return _internal_left_child();
}
inline void ConditionNode_NodeOperator::unsafe_arena_set_allocated_left_child(
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* left_child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_child_);
  }
  _impl_.left_child_ = left_child;
  if (left_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.left_child)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::release_left_child() {
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* temp = _impl_.left_child_;
  _impl_.left_child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::unsafe_arena_release_left_child() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.left_child)
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* temp = _impl_.left_child_;
  _impl_.left_child_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::_internal_mutable_left_child() {
  
  if (_impl_.left_child_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode>(GetArenaForAllocation());
    _impl_.left_child_ = p;
  }
  return _impl_.left_child_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::mutable_left_child() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* _msg = _internal_mutable_left_child();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.left_child)
  return _msg;
}
inline void ConditionNode_NodeOperator::set_allocated_left_child(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* left_child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_child_;
  }
  if (left_child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left_child);
    if (message_arena != submessage_arena) {
      left_child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_child, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.left_child_ = left_child;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.left_child)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode right_child = 2;
inline bool ConditionNode_NodeOperator::_internal_has_right_child() const {
  return this != internal_default_instance() && _impl_.right_child_ != nullptr;
}
inline bool ConditionNode_NodeOperator::has_right_child() const {
  return _internal_has_right_child();
}
inline void ConditionNode_NodeOperator::clear_right_child() {
  if (GetArenaForAllocation() == nullptr && _impl_.right_child_ != nullptr) {
    delete _impl_.right_child_;
  }
  _impl_.right_child_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& ConditionNode_NodeOperator::_internal_right_child() const {
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* p = _impl_.right_child_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode&>(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& ConditionNode_NodeOperator::right_child() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.right_child)
  return _internal_right_child();
}
inline void ConditionNode_NodeOperator::unsafe_arena_set_allocated_right_child(
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* right_child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_child_);
  }
  _impl_.right_child_ = right_child;
  if (right_child) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.right_child)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::release_right_child() {
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* temp = _impl_.right_child_;
  _impl_.right_child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::unsafe_arena_release_right_child() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.right_child)
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* temp = _impl_.right_child_;
  _impl_.right_child_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::_internal_mutable_right_child() {
  
  if (_impl_.right_child_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode>(GetArenaForAllocation());
    _impl_.right_child_ = p;
  }
  return _impl_.right_child_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionNode_NodeOperator::mutable_right_child() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* _msg = _internal_mutable_right_child();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.right_child)
  return _msg;
}
inline void ConditionNode_NodeOperator::set_allocated_right_child(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* right_child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_child_;
  }
  if (right_child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right_child);
    if (message_arena != submessage_arena) {
      right_child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_child, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.right_child_ = right_child;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.right_child)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.Operator operator = 3;
inline void ConditionNode_NodeOperator::clear_operator_() {
  _impl_.operator__ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::_internal_operator_() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator >(_impl_.operator__);
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::operator_() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.operator)
  return _internal_operator_();
}
inline void ConditionNode_NodeOperator::_internal_set_operator_(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator value) {
  
  _impl_.operator__ = value;
}
inline void ConditionNode_NodeOperator::set_operator_(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.operator)
}

// -------------------------------------------------------------------

// ConditionNode_NodeFunction_GeohashFunction

// uint32 latitude_signal_id = 1;
inline void ConditionNode_NodeFunction_GeohashFunction::clear_latitude_signal_id() {
  _impl_.latitude_signal_id_ = 0u;
}
inline uint32_t ConditionNode_NodeFunction_GeohashFunction::_internal_latitude_signal_id() const {
  return _impl_.latitude_signal_id_;
}
inline uint32_t ConditionNode_NodeFunction_GeohashFunction::latitude_signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.latitude_signal_id)
  return _internal_latitude_signal_id();
}
inline void ConditionNode_NodeFunction_GeohashFunction::_internal_set_latitude_signal_id(uint32_t value) {
  
  _impl_.latitude_signal_id_ = value;
}
inline void ConditionNode_NodeFunction_GeohashFunction::set_latitude_signal_id(uint32_t value) {
  _internal_set_latitude_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.latitude_signal_id)
}

// uint32 longitude_signal_id = 2;
inline void ConditionNode_NodeFunction_GeohashFunction::clear_longitude_signal_id() {
  _impl_.longitude_signal_id_ = 0u;
}
inline uint32_t ConditionNode_NodeFunction_GeohashFunction::_internal_longitude_signal_id() const {
  return _impl_.longitude_signal_id_;
}
inline uint32_t ConditionNode_NodeFunction_GeohashFunction::longitude_signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.longitude_signal_id)
  return _internal_longitude_signal_id();
}
inline void ConditionNode_NodeFunction_GeohashFunction::_internal_set_longitude_signal_id(uint32_t value) {
  
  _impl_.longitude_signal_id_ = value;
}
inline void ConditionNode_NodeFunction_GeohashFunction::set_longitude_signal_id(uint32_t value) {
  _internal_set_longitude_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.longitude_signal_id)
}

// uint32 geohash_precision = 3;
inline void ConditionNode_NodeFunction_GeohashFunction::clear_geohash_precision() {
  _impl_.geohash_precision_ = 0u;
}
inline uint32_t ConditionNode_NodeFunction_GeohashFunction::_internal_geohash_precision() const {
  return _impl_.geohash_precision_;
}
inline uint32_t ConditionNode_NodeFunction_GeohashFunction::geohash_precision() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.geohash_precision)
  return _internal_geohash_precision();
}
inline void ConditionNode_NodeFunction_GeohashFunction::_internal_set_geohash_precision(uint32_t value) {
  
  _impl_.geohash_precision_ = value;
}
inline void ConditionNode_NodeFunction_GeohashFunction::set_geohash_precision(uint32_t value) {
  _internal_set_geohash_precision(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.geohash_precision)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.GPSUnitType gps_unit = 4;
inline void ConditionNode_NodeFunction_GeohashFunction::clear_gps_unit() {
  _impl_.gps_unit_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::_internal_gps_unit() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType >(_impl_.gps_unit_);
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::gps_unit() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.gps_unit)
  return _internal_gps_unit();
}
inline void ConditionNode_NodeFunction_GeohashFunction::_internal_set_gps_unit(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType value) {
  
  _impl_.gps_unit_ = value;
}
inline void ConditionNode_NodeFunction_GeohashFunction::set_gps_unit(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType value) {
  _internal_set_gps_unit(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.gps_unit)
}

// -------------------------------------------------------------------

// ConditionNode_NodeFunction_WindowFunction

// uint32 signal_id = 1;
inline bool ConditionNode_NodeFunction_WindowFunction::_internal_has_signal_id() const {
  return primitiveTypes_case() == kSignalId;
}
inline bool ConditionNode_NodeFunction_WindowFunction::has_signal_id() const {
  return _internal_has_signal_id();
}
inline void ConditionNode_NodeFunction_WindowFunction::set_has_signal_id() {
  _impl_._oneof_case_[0] = kSignalId;
}
inline void ConditionNode_NodeFunction_WindowFunction::clear_signal_id() {
  if (_internal_has_signal_id()) {
    _impl_.primitiveTypes_.signal_id_ = 0u;
    clear_has_primitiveTypes();
  }
}
inline uint32_t ConditionNode_NodeFunction_WindowFunction::_internal_signal_id() const {
  if (_internal_has_signal_id()) {
    return _impl_.primitiveTypes_.signal_id_;
  }
  return 0u;
}
inline void ConditionNode_NodeFunction_WindowFunction::_internal_set_signal_id(uint32_t value) {
  if (!_internal_has_signal_id()) {
    clear_primitiveTypes();
    set_has_signal_id();
  }
  _impl_.primitiveTypes_.signal_id_ = value;
}
inline uint32_t ConditionNode_NodeFunction_WindowFunction::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.signal_id)
  return _internal_signal_id();
}
inline void ConditionNode_NodeFunction_WindowFunction::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.signal_id)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal primitive_type_in_signal = 3;
inline bool ConditionNode_NodeFunction_WindowFunction::_internal_has_primitive_type_in_signal() const {
  return primitiveTypes_case() == kPrimitiveTypeInSignal;
}
inline bool ConditionNode_NodeFunction_WindowFunction::has_primitive_type_in_signal() const {
  return _internal_has_primitive_type_in_signal();
}
inline void ConditionNode_NodeFunction_WindowFunction::set_has_primitive_type_in_signal() {
  _impl_._oneof_case_[0] = kPrimitiveTypeInSignal;
}
inline void ConditionNode_NodeFunction_WindowFunction::clear_primitive_type_in_signal() {
  if (_internal_has_primitive_type_in_signal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.primitiveTypes_.primitive_type_in_signal_;
    }
    clear_has_primitiveTypes();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode_NodeFunction_WindowFunction::release_primitive_type_in_signal() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.primitive_type_in_signal)
  if (_internal_has_primitive_type_in_signal()) {
    clear_has_primitiveTypes();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* temp = _impl_.primitiveTypes_.primitive_type_in_signal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.primitiveTypes_.primitive_type_in_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& ConditionNode_NodeFunction_WindowFunction::_internal_primitive_type_in_signal() const {
  return _internal_has_primitive_type_in_signal()
      ? *_impl_.primitiveTypes_.primitive_type_in_signal_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal&>(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_PrimitiveTypeInComplexSignal_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& ConditionNode_NodeFunction_WindowFunction::primitive_type_in_signal() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.primitive_type_in_signal)
  return _internal_primitive_type_in_signal();
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode_NodeFunction_WindowFunction::unsafe_arena_release_primitive_type_in_signal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.primitive_type_in_signal)
  if (_internal_has_primitive_type_in_signal()) {
    clear_has_primitiveTypes();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* temp = _impl_.primitiveTypes_.primitive_type_in_signal_;
    _impl_.primitiveTypes_.primitive_type_in_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConditionNode_NodeFunction_WindowFunction::unsafe_arena_set_allocated_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* primitive_type_in_signal) {
  clear_primitiveTypes();
  if (primitive_type_in_signal) {
    set_has_primitive_type_in_signal();
    _impl_.primitiveTypes_.primitive_type_in_signal_ = primitive_type_in_signal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.primitive_type_in_signal)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode_NodeFunction_WindowFunction::_internal_mutable_primitive_type_in_signal() {
  if (!_internal_has_primitive_type_in_signal()) {
    clear_primitiveTypes();
    set_has_primitive_type_in_signal();
    _impl_.primitiveTypes_.primitive_type_in_signal_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal >(GetArenaForAllocation());
  }
  return _impl_.primitiveTypes_.primitive_type_in_signal_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode_NodeFunction_WindowFunction::mutable_primitive_type_in_signal() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* _msg = _internal_mutable_primitive_type_in_signal();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.primitive_type_in_signal)
  return _msg;
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.WindowType window_type = 2;
inline void ConditionNode_NodeFunction_WindowFunction::clear_window_type() {
  _impl_.window_type_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::_internal_window_type() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType >(_impl_.window_type_);
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::window_type() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.window_type)
  return _internal_window_type();
}
inline void ConditionNode_NodeFunction_WindowFunction::_internal_set_window_type(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType value) {
  
  _impl_.window_type_ = value;
}
inline void ConditionNode_NodeFunction_WindowFunction::set_window_type(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType value) {
  _internal_set_window_type(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.window_type)
}

inline bool ConditionNode_NodeFunction_WindowFunction::has_primitiveTypes() const {
  return primitiveTypes_case() != PRIMITIVETYPES_NOT_SET;
}
inline void ConditionNode_NodeFunction_WindowFunction::clear_has_primitiveTypes() {
  _impl_._oneof_case_[0] = PRIMITIVETYPES_NOT_SET;
}
inline ConditionNode_NodeFunction_WindowFunction::PrimitiveTypesCase ConditionNode_NodeFunction_WindowFunction::primitiveTypes_case() const {
  return ConditionNode_NodeFunction_WindowFunction::PrimitiveTypesCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConditionNode_NodeFunction

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction window_function = 1;
inline bool ConditionNode_NodeFunction::_internal_has_window_function() const {
  return functionType_case() == kWindowFunction;
}
inline bool ConditionNode_NodeFunction::has_window_function() const {
  return _internal_has_window_function();
}
inline void ConditionNode_NodeFunction::set_has_window_function() {
  _impl_._oneof_case_[0] = kWindowFunction;
}
inline void ConditionNode_NodeFunction::clear_window_function() {
  if (_internal_has_window_function()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.functionType_.window_function_;
    }
    clear_has_functionType();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* ConditionNode_NodeFunction::release_window_function() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.window_function)
  if (_internal_has_window_function()) {
    clear_has_functionType();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* temp = _impl_.functionType_.window_function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.functionType_.window_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction& ConditionNode_NodeFunction::_internal_window_function() const {
  return _internal_has_window_function()
      ? *_impl_.functionType_.window_function_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction&>(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeFunction_WindowFunction_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction& ConditionNode_NodeFunction::window_function() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.window_function)
  return _internal_window_function();
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* ConditionNode_NodeFunction::unsafe_arena_release_window_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.window_function)
  if (_internal_has_window_function()) {
    clear_has_functionType();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* temp = _impl_.functionType_.window_function_;
    _impl_.functionType_.window_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConditionNode_NodeFunction::unsafe_arena_set_allocated_window_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* window_function) {
  clear_functionType();
  if (window_function) {
    set_has_window_function();
    _impl_.functionType_.window_function_ = window_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.window_function)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* ConditionNode_NodeFunction::_internal_mutable_window_function() {
  if (!_internal_has_window_function()) {
    clear_functionType();
    set_has_window_function();
    _impl_.functionType_.window_function_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction >(GetArenaForAllocation());
  }
  return _impl_.functionType_.window_function_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* ConditionNode_NodeFunction::mutable_window_function() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* _msg = _internal_mutable_window_function();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.window_function)
  return _msg;
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction geohash_function = 2;
inline bool ConditionNode_NodeFunction::_internal_has_geohash_function() const {
  return functionType_case() == kGeohashFunction;
}
inline bool ConditionNode_NodeFunction::has_geohash_function() const {
  return _internal_has_geohash_function();
}
inline void ConditionNode_NodeFunction::set_has_geohash_function() {
  _impl_._oneof_case_[0] = kGeohashFunction;
}
inline void ConditionNode_NodeFunction::clear_geohash_function() {
  if (_internal_has_geohash_function()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.functionType_.geohash_function_;
    }
    clear_has_functionType();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* ConditionNode_NodeFunction::release_geohash_function() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.geohash_function)
  if (_internal_has_geohash_function()) {
    clear_has_functionType();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* temp = _impl_.functionType_.geohash_function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.functionType_.geohash_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction& ConditionNode_NodeFunction::_internal_geohash_function() const {
  return _internal_has_geohash_function()
      ? *_impl_.functionType_.geohash_function_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction&>(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeFunction_GeohashFunction_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction& ConditionNode_NodeFunction::geohash_function() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.geohash_function)
  return _internal_geohash_function();
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* ConditionNode_NodeFunction::unsafe_arena_release_geohash_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.geohash_function)
  if (_internal_has_geohash_function()) {
    clear_has_functionType();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* temp = _impl_.functionType_.geohash_function_;
    _impl_.functionType_.geohash_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConditionNode_NodeFunction::unsafe_arena_set_allocated_geohash_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* geohash_function) {
  clear_functionType();
  if (geohash_function) {
    set_has_geohash_function();
    _impl_.functionType_.geohash_function_ = geohash_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.geohash_function)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* ConditionNode_NodeFunction::_internal_mutable_geohash_function() {
  if (!_internal_has_geohash_function()) {
    clear_functionType();
    set_has_geohash_function();
    _impl_.functionType_.geohash_function_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction >(GetArenaForAllocation());
  }
  return _impl_.functionType_.geohash_function_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* ConditionNode_NodeFunction::mutable_geohash_function() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* _msg = _internal_mutable_geohash_function();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.geohash_function)
  return _msg;
}

inline bool ConditionNode_NodeFunction::has_functionType() const {
  return functionType_case() != FUNCTIONTYPE_NOT_SET;
}
inline void ConditionNode_NodeFunction::clear_has_functionType() {
  _impl_._oneof_case_[0] = FUNCTIONTYPE_NOT_SET;
}
inline ConditionNode_NodeFunction::FunctionTypeCase ConditionNode_NodeFunction::functionType_case() const {
  return ConditionNode_NodeFunction::FunctionTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConditionNode

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator node_operator = 1;
inline bool ConditionNode::_internal_has_node_operator() const {
  return node_case() == kNodeOperator;
}
inline bool ConditionNode::has_node_operator() const {
  return _internal_has_node_operator();
}
inline void ConditionNode::set_has_node_operator() {
  _impl_._oneof_case_[0] = kNodeOperator;
}
inline void ConditionNode::clear_node_operator() {
  if (_internal_has_node_operator()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.node_.node_operator_;
    }
    clear_has_node();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* ConditionNode::release_node_operator() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_operator)
  if (_internal_has_node_operator()) {
    clear_has_node();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* temp = _impl_.node_.node_operator_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.node_.node_operator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator& ConditionNode::_internal_node_operator() const {
  return _internal_has_node_operator()
      ? *_impl_.node_.node_operator_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator&>(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeOperator_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator& ConditionNode::node_operator() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_operator)
  return _internal_node_operator();
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* ConditionNode::unsafe_arena_release_node_operator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_operator)
  if (_internal_has_node_operator()) {
    clear_has_node();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* temp = _impl_.node_.node_operator_;
    _impl_.node_.node_operator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConditionNode::unsafe_arena_set_allocated_node_operator(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* node_operator) {
  clear_node();
  if (node_operator) {
    set_has_node_operator();
    _impl_.node_.node_operator_ = node_operator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_operator)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* ConditionNode::_internal_mutable_node_operator() {
  if (!_internal_has_node_operator()) {
    clear_node();
    set_has_node_operator();
    _impl_.node_.node_operator_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator >(GetArenaForAllocation());
  }
  return _impl_.node_.node_operator_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* ConditionNode::mutable_node_operator() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* _msg = _internal_mutable_node_operator();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_operator)
  return _msg;
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction node_function = 2;
inline bool ConditionNode::_internal_has_node_function() const {
  return node_case() == kNodeFunction;
}
inline bool ConditionNode::has_node_function() const {
  return _internal_has_node_function();
}
inline void ConditionNode::set_has_node_function() {
  _impl_._oneof_case_[0] = kNodeFunction;
}
inline void ConditionNode::clear_node_function() {
  if (_internal_has_node_function()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.node_.node_function_;
    }
    clear_has_node();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* ConditionNode::release_node_function() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_function)
  if (_internal_has_node_function()) {
    clear_has_node();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* temp = _impl_.node_.node_function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.node_.node_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction& ConditionNode::_internal_node_function() const {
  return _internal_has_node_function()
      ? *_impl_.node_.node_function_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction&>(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeFunction_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction& ConditionNode::node_function() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_function)
  return _internal_node_function();
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* ConditionNode::unsafe_arena_release_node_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_function)
  if (_internal_has_node_function()) {
    clear_has_node();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* temp = _impl_.node_.node_function_;
    _impl_.node_.node_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConditionNode::unsafe_arena_set_allocated_node_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* node_function) {
  clear_node();
  if (node_function) {
    set_has_node_function();
    _impl_.node_.node_function_ = node_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_function)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* ConditionNode::_internal_mutable_node_function() {
  if (!_internal_has_node_function()) {
    clear_node();
    set_has_node_function();
    _impl_.node_.node_function_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction >(GetArenaForAllocation());
  }
  return _impl_.node_.node_function_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* ConditionNode::mutable_node_function() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* _msg = _internal_mutable_node_function();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_function)
  return _msg;
}

// double node_double_value = 3;
inline bool ConditionNode::_internal_has_node_double_value() const {
  return node_case() == kNodeDoubleValue;
}
inline bool ConditionNode::has_node_double_value() const {
  return _internal_has_node_double_value();
}
inline void ConditionNode::set_has_node_double_value() {
  _impl_._oneof_case_[0] = kNodeDoubleValue;
}
inline void ConditionNode::clear_node_double_value() {
  if (_internal_has_node_double_value()) {
    _impl_.node_.node_double_value_ = 0;
    clear_has_node();
  }
}
inline double ConditionNode::_internal_node_double_value() const {
  if (_internal_has_node_double_value()) {
    return _impl_.node_.node_double_value_;
  }
  return 0;
}
inline void ConditionNode::_internal_set_node_double_value(double value) {
  if (!_internal_has_node_double_value()) {
    clear_node();
    set_has_node_double_value();
  }
  _impl_.node_.node_double_value_ = value;
}
inline double ConditionNode::node_double_value() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_double_value)
  return _internal_node_double_value();
}
inline void ConditionNode::set_node_double_value(double value) {
  _internal_set_node_double_value(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_double_value)
}

// uint32 node_signal_id = 4;
inline bool ConditionNode::_internal_has_node_signal_id() const {
  return node_case() == kNodeSignalId;
}
inline bool ConditionNode::has_node_signal_id() const {
  return _internal_has_node_signal_id();
}
inline void ConditionNode::set_has_node_signal_id() {
  _impl_._oneof_case_[0] = kNodeSignalId;
}
inline void ConditionNode::clear_node_signal_id() {
  if (_internal_has_node_signal_id()) {
    _impl_.node_.node_signal_id_ = 0u;
    clear_has_node();
  }
}
inline uint32_t ConditionNode::_internal_node_signal_id() const {
  if (_internal_has_node_signal_id()) {
    return _impl_.node_.node_signal_id_;
  }
  return 0u;
}
inline void ConditionNode::_internal_set_node_signal_id(uint32_t value) {
  if (!_internal_has_node_signal_id()) {
    clear_node();
    set_has_node_signal_id();
  }
  _impl_.node_.node_signal_id_ = value;
}
inline uint32_t ConditionNode::node_signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_signal_id)
  return _internal_node_signal_id();
}
inline void ConditionNode::set_node_signal_id(uint32_t value) {
  _internal_set_node_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_signal_id)
}

// bool node_boolean_value = 5;
inline bool ConditionNode::_internal_has_node_boolean_value() const {
  return node_case() == kNodeBooleanValue;
}
inline bool ConditionNode::has_node_boolean_value() const {
  return _internal_has_node_boolean_value();
}
inline void ConditionNode::set_has_node_boolean_value() {
  _impl_._oneof_case_[0] = kNodeBooleanValue;
}
inline void ConditionNode::clear_node_boolean_value() {
  if (_internal_has_node_boolean_value()) {
    _impl_.node_.node_boolean_value_ = false;
    clear_has_node();
  }
}
inline bool ConditionNode::_internal_node_boolean_value() const {
  if (_internal_has_node_boolean_value()) {
    return _impl_.node_.node_boolean_value_;
  }
  return false;
}
inline void ConditionNode::_internal_set_node_boolean_value(bool value) {
  if (!_internal_has_node_boolean_value()) {
    clear_node();
    set_has_node_boolean_value();
  }
  _impl_.node_.node_boolean_value_ = value;
}
inline bool ConditionNode::node_boolean_value() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_boolean_value)
  return _internal_node_boolean_value();
}
inline void ConditionNode::set_node_boolean_value(bool value) {
  _internal_set_node_boolean_value(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_boolean_value)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal node_primitive_type_in_signal = 6;
inline bool ConditionNode::_internal_has_node_primitive_type_in_signal() const {
  return node_case() == kNodePrimitiveTypeInSignal;
}
inline bool ConditionNode::has_node_primitive_type_in_signal() const {
  return _internal_has_node_primitive_type_in_signal();
}
inline void ConditionNode::set_has_node_primitive_type_in_signal() {
  _impl_._oneof_case_[0] = kNodePrimitiveTypeInSignal;
}
inline void ConditionNode::clear_node_primitive_type_in_signal() {
  if (_internal_has_node_primitive_type_in_signal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.node_.node_primitive_type_in_signal_;
    }
    clear_has_node();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode::release_node_primitive_type_in_signal() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_primitive_type_in_signal)
  if (_internal_has_node_primitive_type_in_signal()) {
    clear_has_node();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* temp = _impl_.node_.node_primitive_type_in_signal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.node_.node_primitive_type_in_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& ConditionNode::_internal_node_primitive_type_in_signal() const {
  return _internal_has_node_primitive_type_in_signal()
      ? *_impl_.node_.node_primitive_type_in_signal_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal&>(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_PrimitiveTypeInComplexSignal_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& ConditionNode::node_primitive_type_in_signal() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_primitive_type_in_signal)
  return _internal_node_primitive_type_in_signal();
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode::unsafe_arena_release_node_primitive_type_in_signal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_primitive_type_in_signal)
  if (_internal_has_node_primitive_type_in_signal()) {
    clear_has_node();
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* temp = _impl_.node_.node_primitive_type_in_signal_;
    _impl_.node_.node_primitive_type_in_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConditionNode::unsafe_arena_set_allocated_node_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* node_primitive_type_in_signal) {
  clear_node();
  if (node_primitive_type_in_signal) {
    set_has_node_primitive_type_in_signal();
    _impl_.node_.node_primitive_type_in_signal_ = node_primitive_type_in_signal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_primitive_type_in_signal)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode::_internal_mutable_node_primitive_type_in_signal() {
  if (!_internal_has_node_primitive_type_in_signal()) {
    clear_node();
    set_has_node_primitive_type_in_signal();
    _impl_.node_.node_primitive_type_in_signal_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal >(GetArenaForAllocation());
  }
  return _impl_.node_.node_primitive_type_in_signal_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* ConditionNode::mutable_node_primitive_type_in_signal() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* _msg = _internal_mutable_node_primitive_type_in_signal();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_primitive_type_in_signal)
  return _msg;
}

inline bool ConditionNode::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void ConditionNode::clear_has_node() {
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}
inline ConditionNode::NodeCase ConditionNode::node_case() const {
  return ConditionNode::NodeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CommonTypesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator>() {
  return ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator_descriptor();
}
template <> struct is_proto_enum< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType>() {
  return ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_descriptor();
}
template <> struct is_proto_enum< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType>() {
  return ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_5ftypes_2eproto
