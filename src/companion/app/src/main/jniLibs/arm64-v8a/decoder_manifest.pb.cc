// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decoder_manifest.proto

#include "decoder_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace DecoderManifestMsg {
PROTOBUF_CONSTEXPR DecoderManifest::DecoderManifest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.can_signals_)*/{}
  , /*decltype(_impl_.obd_pid_signals_)*/{}
  , /*decltype(_impl_.complex_types_)*/{}
  , /*decltype(_impl_.complex_signals_)*/{}
  , /*decltype(_impl_.sync_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DecoderManifestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecoderManifestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecoderManifestDefaultTypeInternal() {}
  union {
    DecoderManifest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecoderManifestDefaultTypeInternal _DecoderManifest_default_instance_;
PROTOBUF_CONSTEXPR CANSignal::CANSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signal_id_)*/0u
  , /*decltype(_impl_.message_id_)*/0u
  , /*decltype(_impl_.is_big_endian_)*/false
  , /*decltype(_impl_.is_signed_)*/false
  , /*decltype(_impl_.start_bit_)*/0u
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.factor_)*/0
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.primitive_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CANSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CANSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CANSignalDefaultTypeInternal() {}
  union {
    CANSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CANSignalDefaultTypeInternal _CANSignal_default_instance_;
PROTOBUF_CONSTEXPR OBDPIDSignal::OBDPIDSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signal_id_)*/0u
  , /*decltype(_impl_.pid_response_length_)*/0u
  , /*decltype(_impl_.service_mode_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.scaling_)*/0
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.start_byte_)*/0u
  , /*decltype(_impl_.byte_length_)*/0u
  , /*decltype(_impl_.bit_right_shift_)*/0u
  , /*decltype(_impl_.bit_mask_length_)*/0u
  , /*decltype(_impl_.primitive_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OBDPIDSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OBDPIDSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OBDPIDSignalDefaultTypeInternal() {}
  union {
    OBDPIDSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OBDPIDSignalDefaultTypeInternal _OBDPIDSignal_default_instance_;
PROTOBUF_CONSTEXPR PrimitiveData::PrimitiveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scaling_)*/0
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.primitive_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrimitiveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimitiveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimitiveDataDefaultTypeInternal() {}
  union {
    PrimitiveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimitiveDataDefaultTypeInternal _PrimitiveData_default_instance_;
PROTOBUF_CONSTEXPR StringData::StringData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.encoding_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringDataDefaultTypeInternal() {}
  union {
    StringData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringDataDefaultTypeInternal _StringData_default_instance_;
PROTOBUF_CONSTEXPR ComplexArray::ComplexArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.type_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexArrayDefaultTypeInternal() {}
  union {
    ComplexArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexArrayDefaultTypeInternal _ComplexArray_default_instance_;
PROTOBUF_CONSTEXPR ComplexStructMember::ComplexStructMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexStructMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexStructMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexStructMemberDefaultTypeInternal() {}
  union {
    ComplexStructMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexStructMemberDefaultTypeInternal _ComplexStructMember_default_instance_;
PROTOBUF_CONSTEXPR ComplexStruct::ComplexStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexStructDefaultTypeInternal() {}
  union {
    ComplexStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexStructDefaultTypeInternal _ComplexStruct_default_instance_;
PROTOBUF_CONSTEXPR ComplexType::ComplexType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_id_)*/0u
  , /*decltype(_impl_.variant_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ComplexTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexTypeDefaultTypeInternal() {}
  union {
    ComplexType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexTypeDefaultTypeInternal _ComplexType_default_instance_;
PROTOBUF_CONSTEXPR ComplexSignal::ComplexSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signal_id_)*/0u
  , /*decltype(_impl_.root_type_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComplexSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexSignalDefaultTypeInternal() {}
  union {
    ComplexSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexSignalDefaultTypeInternal _ComplexSignal_default_instance_;
}  // namespace DecoderManifestMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
static ::_pb::Metadata file_level_metadata_decoder_5fmanifest_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_decoder_5fmanifest_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_decoder_5fmanifest_2eproto = nullptr;

const uint32_t TableStruct_decoder_5fmanifest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest, _impl_.sync_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest, _impl_.can_signals_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest, _impl_.obd_pid_signals_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest, _impl_.complex_types_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest, _impl_.complex_signals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.interface_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.is_big_endian_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.is_signed_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.start_bit_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.factor_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal, _impl_.primitive_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.interface_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.pid_response_length_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.service_mode_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.scaling_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.start_byte_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.byte_length_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.bit_right_shift_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.bit_mask_length_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal, _impl_.primitive_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData, _impl_.primitive_type_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData, _impl_.scaling_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData, _impl_.encoding_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray, _impl_.type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember, _impl_.type_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct, _impl_.members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType, _impl_.type_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType, _impl_.variant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal, _impl_.signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal, _impl_.interface_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal, _impl_.root_type_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest)},
  { 11, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal)},
  { 27, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal)},
  { 45, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData)},
  { 54, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData)},
  { 62, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray)},
  { 70, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember)},
  { 77, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct)},
  { 84, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType)},
  { 96, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_DecoderManifest_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_CANSignal_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_OBDPIDSignal_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_PrimitiveData_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_StringData_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_ComplexArray_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_ComplexStructMember_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_ComplexStruct_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_ComplexType_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::_ComplexSignal_default_instance_._instance,
};

const char descriptor_table_protodef_decoder_5fmanifest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026decoder_manifest.proto\022+Aws.IoTFleetWi"
  "se.Schemas.DecoderManifestMsg\"\351\002\n\017Decode"
  "rManifest\022\017\n\007sync_id\030\001 \001(\t\022K\n\013can_signal"
  "s\030\002 \003(\01326.Aws.IoTFleetWise.Schemas.Decod"
  "erManifestMsg.CANSignal\022R\n\017obd_pid_signa"
  "ls\030\003 \003(\01329.Aws.IoTFleetWise.Schemas.Deco"
  "derManifestMsg.OBDPIDSignal\022O\n\rcomplex_t"
  "ypes\030\004 \003(\01328.Aws.IoTFleetWise.Schemas.De"
  "coderManifestMsg.ComplexType\022S\n\017complex_"
  "signals\030\005 \003(\0132:.Aws.IoTFleetWise.Schemas"
  ".DecoderManifestMsg.ComplexSignal\"\211\002\n\tCA"
  "NSignal\022\021\n\tsignal_id\030\001 \001(\r\022\024\n\014interface_"
  "id\030\002 \001(\t\022\022\n\nmessage_id\030\003 \001(\r\022\025\n\ris_big_e"
  "ndian\030\004 \001(\010\022\021\n\tis_signed\030\005 \001(\010\022\021\n\tstart_"
  "bit\030\006 \001(\r\022\016\n\006offset\030\007 \001(\001\022\016\n\006factor\030\010 \001("
  "\001\022\016\n\006length\030\t \001(\r\022R\n\016primitive_type\030\n \001("
  "\0162:.Aws.IoTFleetWise.Schemas.DecoderMani"
  "festMsg.PrimitiveType\"\307\002\n\014OBDPIDSignal\022\021"
  "\n\tsignal_id\030\001 \001(\r\022\024\n\014interface_id\030\002 \001(\t\022"
  "\033\n\023pid_response_length\030\003 \001(\r\022\024\n\014service_"
  "mode\030\004 \001(\r\022\013\n\003pid\030\005 \001(\r\022\017\n\007scaling\030\006 \001(\001"
  "\022\016\n\006offset\030\007 \001(\001\022\022\n\nstart_byte\030\010 \001(\r\022\023\n\013"
  "byte_length\030\t \001(\r\022\027\n\017bit_right_shift\030\n \001"
  "(\r\022\027\n\017bit_mask_length\030\013 \001(\r\022R\n\016primitive"
  "_type\030\014 \001(\0162:.Aws.IoTFleetWise.Schemas.D"
  "ecoderManifestMsg.PrimitiveType\"\204\001\n\rPrim"
  "itiveData\022R\n\016primitive_type\030\001 \001(\0162:.Aws."
  "IoTFleetWise.Schemas.DecoderManifestMsg."
  "PrimitiveType\022\017\n\007scaling\030\002 \001(\001\022\016\n\006offset"
  "\030\003 \001(\001\"i\n\nStringData\022M\n\010encoding\030\001 \001(\0162;"
  ".Aws.IoTFleetWise.Schemas.DecoderManifes"
  "tMsg.StringEncoding\022\014\n\004size\030\002 \001(\003\"-\n\014Com"
  "plexArray\022\014\n\004size\030\001 \001(\003\022\017\n\007type_id\030\002 \001(\r"
  "\"&\n\023ComplexStructMember\022\017\n\007type_id\030\001 \001(\r"
  "\"b\n\rComplexStruct\022Q\n\007members\030\001 \003(\0132@.Aws"
  ".IoTFleetWise.Schemas.DecoderManifestMsg"
  ".ComplexStructMember\"\351\002\n\013ComplexType\022\017\n\007"
  "type_id\030\001 \001(\r\022T\n\016primitive_data\030\002 \001(\0132:."
  "Aws.IoTFleetWise.Schemas.DecoderManifest"
  "Msg.PrimitiveDataH\000\022L\n\006struct\030\003 \001(\0132:.Aw"
  "s.IoTFleetWise.Schemas.DecoderManifestMs"
  "g.ComplexStructH\000\022J\n\005array\030\004 \001(\01329.Aws.I"
  "oTFleetWise.Schemas.DecoderManifestMsg.C"
  "omplexArrayH\000\022N\n\013string_data\030\005 \001(\01327.Aws"
  ".IoTFleetWise.Schemas.DecoderManifestMsg"
  ".StringDataH\000B\t\n\007variant\"b\n\rComplexSigna"
  "l\022\021\n\tsignal_id\030\001 \001(\r\022\024\n\014interface_id\030\002 \001"
  "(\t\022\022\n\nmessage_id\030\003 \001(\t\022\024\n\014root_type_id\030\004"
  " \001(\r*\227\001\n\rPrimitiveType\022\010\n\004NULL\020\000\022\010\n\004BOOL"
  "\020\001\022\t\n\005UINT8\020\002\022\n\n\006UINT16\020\003\022\n\n\006UINT32\020\004\022\n\n"
  "\006UINT64\020\005\022\010\n\004INT8\020\006\022\t\n\005INT16\020\007\022\t\n\005INT32\020"
  "\010\022\t\n\005INT64\020\t\022\013\n\007FLOAT32\020\n\022\013\n\007FLOAT64\020\013*\'"
  "\n\016StringEncoding\022\t\n\005UTF_8\020\000\022\n\n\006UTF_16\020\001B"
  "$\n\"com.amazonaws.iot.autobahn.schemasb\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_decoder_5fmanifest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_decoder_5fmanifest_2eproto = {
    false, false, 2165, descriptor_table_protodef_decoder_5fmanifest_2eproto,
    "decoder_manifest.proto",
    &descriptor_table_decoder_5fmanifest_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_decoder_5fmanifest_2eproto::offsets,
    file_level_metadata_decoder_5fmanifest_2eproto, file_level_enum_descriptors_decoder_5fmanifest_2eproto,
    file_level_service_descriptors_decoder_5fmanifest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_decoder_5fmanifest_2eproto_getter() {
  return &descriptor_table_decoder_5fmanifest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_decoder_5fmanifest_2eproto(&descriptor_table_decoder_5fmanifest_2eproto);
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace DecoderManifestMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_decoder_5fmanifest_2eproto);
  return file_level_enum_descriptors_decoder_5fmanifest_2eproto[0];
}
bool PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StringEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_decoder_5fmanifest_2eproto);
  return file_level_enum_descriptors_decoder_5fmanifest_2eproto[1];
}
bool StringEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DecoderManifest::_Internal {
 public:
};

DecoderManifest::DecoderManifest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
}
DecoderManifest::DecoderManifest(const DecoderManifest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DecoderManifest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.can_signals_){from._impl_.can_signals_}
    , decltype(_impl_.obd_pid_signals_){from._impl_.obd_pid_signals_}
    , decltype(_impl_.complex_types_){from._impl_.complex_types_}
    , decltype(_impl_.complex_signals_){from._impl_.complex_signals_}
    , decltype(_impl_.sync_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sync_id().empty()) {
    _this->_impl_.sync_id_.Set(from._internal_sync_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
}

inline void DecoderManifest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.can_signals_){arena}
    , decltype(_impl_.obd_pid_signals_){arena}
    , decltype(_impl_.complex_types_){arena}
    , decltype(_impl_.complex_signals_){arena}
    , decltype(_impl_.sync_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DecoderManifest::~DecoderManifest() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DecoderManifest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.can_signals_.~RepeatedPtrField();
  _impl_.obd_pid_signals_.~RepeatedPtrField();
  _impl_.complex_types_.~RepeatedPtrField();
  _impl_.complex_signals_.~RepeatedPtrField();
  _impl_.sync_id_.Destroy();
}

void DecoderManifest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DecoderManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.can_signals_.Clear();
  _impl_.obd_pid_signals_.Clear();
  _impl_.complex_types_.Clear();
  _impl_.complex_signals_.Clear();
  _impl_.sync_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecoderManifest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sync_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sync_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.sync_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal can_signals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_can_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal obd_pid_signals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obd_pid_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType complex_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_complex_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal complex_signals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_complex_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecoderManifest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sync_id = 1;
  if (!this->_internal_sync_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sync_id().data(), static_cast<int>(this->_internal_sync_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest.sync_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sync_id(), target);
  }

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal can_signals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_can_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_can_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal obd_pid_signals = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obd_pid_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_obd_pid_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType complex_types = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_complex_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_complex_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal complex_signals = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_complex_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_complex_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
  return target;
}

size_t DecoderManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal can_signals = 2;
  total_size += 1UL * this->_internal_can_signals_size();
  for (const auto& msg : this->_impl_.can_signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal obd_pid_signals = 3;
  total_size += 1UL * this->_internal_obd_pid_signals_size();
  for (const auto& msg : this->_impl_.obd_pid_signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType complex_types = 4;
  total_size += 1UL * this->_internal_complex_types_size();
  for (const auto& msg : this->_impl_.complex_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal complex_signals = 5;
  total_size += 1UL * this->_internal_complex_signals_size();
  for (const auto& msg : this->_impl_.complex_signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sync_id = 1;
  if (!this->_internal_sync_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sync_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecoderManifest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DecoderManifest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecoderManifest::GetClassData() const { return &_class_data_; }


void DecoderManifest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DecoderManifest*>(&to_msg);
  auto& from = static_cast<const DecoderManifest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.can_signals_.MergeFrom(from._impl_.can_signals_);
  _this->_impl_.obd_pid_signals_.MergeFrom(from._impl_.obd_pid_signals_);
  _this->_impl_.complex_types_.MergeFrom(from._impl_.complex_types_);
  _this->_impl_.complex_signals_.MergeFrom(from._impl_.complex_signals_);
  if (!from._internal_sync_id().empty()) {
    _this->_internal_set_sync_id(from._internal_sync_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecoderManifest::CopyFrom(const DecoderManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.DecoderManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecoderManifest::IsInitialized() const {
  return true;
}

void DecoderManifest::InternalSwap(DecoderManifest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.can_signals_.InternalSwap(&other->_impl_.can_signals_);
  _impl_.obd_pid_signals_.InternalSwap(&other->_impl_.obd_pid_signals_);
  _impl_.complex_types_.InternalSwap(&other->_impl_.complex_types_);
  _impl_.complex_signals_.InternalSwap(&other->_impl_.complex_signals_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sync_id_, lhs_arena,
      &other->_impl_.sync_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DecoderManifest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[0]);
}

// ===================================================================

class CANSignal::_Internal {
 public:
};

CANSignal::CANSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
}
CANSignal::CANSignal(const CANSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CANSignal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.signal_id_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.is_big_endian_){}
    , decltype(_impl_.is_signed_){}
    , decltype(_impl_.start_bit_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.factor_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.primitive_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_id().empty()) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.signal_id_, &from._impl_.signal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primitive_type_) -
    reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.primitive_type_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
}

inline void CANSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.signal_id_){0u}
    , decltype(_impl_.message_id_){0u}
    , decltype(_impl_.is_big_endian_){false}
    , decltype(_impl_.is_signed_){false}
    , decltype(_impl_.start_bit_){0u}
    , decltype(_impl_.offset_){0}
    , decltype(_impl_.factor_){0}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.primitive_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CANSignal::~CANSignal() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CANSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_id_.Destroy();
}

void CANSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CANSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_id_.ClearToEmpty();
  ::memset(&_impl_.signal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.primitive_type_) -
      reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.primitive_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CANSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string interface_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.interface_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_big_endian = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_big_endian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_signed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_signed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 start_bit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.start_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double factor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primitive_type(static_cast<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CANSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_id(), target);
  }

  // string interface_id = 2;
  if (!this->_internal_interface_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_id().data(), static_cast<int>(this->_internal_interface_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal.interface_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_interface_id(), target);
  }

  // uint32 message_id = 3;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_message_id(), target);
  }

  // bool is_big_endian = 4;
  if (this->_internal_is_big_endian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_big_endian(), target);
  }

  // bool is_signed = 5;
  if (this->_internal_is_signed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_signed(), target);
  }

  // uint32 start_bit = 6;
  if (this->_internal_start_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_bit(), target);
  }

  // double offset = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_offset(), target);
  }

  // double factor = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_factor = this->_internal_factor();
  uint64_t raw_factor;
  memcpy(&raw_factor, &tmp_factor, sizeof(tmp_factor));
  if (raw_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_factor(), target);
  }

  // uint32 length = 9;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_length(), target);
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 10;
  if (this->_internal_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_primitive_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
  return target;
}

size_t CANSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_id = 2;
  if (!this->_internal_interface_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_id());
  }

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
  }

  // uint32 message_id = 3;
  if (this->_internal_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id());
  }

  // bool is_big_endian = 4;
  if (this->_internal_is_big_endian() != 0) {
    total_size += 1 + 1;
  }

  // bool is_signed = 5;
  if (this->_internal_is_signed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 start_bit = 6;
  if (this->_internal_start_bit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_bit());
  }

  // double offset = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 1 + 8;
  }

  // double factor = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_factor = this->_internal_factor();
  uint64_t raw_factor;
  memcpy(&raw_factor, &tmp_factor, sizeof(tmp_factor));
  if (raw_factor != 0) {
    total_size += 1 + 8;
  }

  // uint32 length = 9;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 10;
  if (this->_internal_primitive_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_primitive_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CANSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CANSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CANSignal::GetClassData() const { return &_class_data_; }


void CANSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CANSignal*>(&to_msg);
  auto& from = static_cast<const CANSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface_id().empty()) {
    _this->_internal_set_interface_id(from._internal_interface_id());
  }
  if (from._internal_signal_id() != 0) {
    _this->_internal_set_signal_id(from._internal_signal_id());
  }
  if (from._internal_message_id() != 0) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_is_big_endian() != 0) {
    _this->_internal_set_is_big_endian(from._internal_is_big_endian());
  }
  if (from._internal_is_signed() != 0) {
    _this->_internal_set_is_signed(from._internal_is_signed());
  }
  if (from._internal_start_bit() != 0) {
    _this->_internal_set_start_bit(from._internal_start_bit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_factor = from._internal_factor();
  uint64_t raw_factor;
  memcpy(&raw_factor, &tmp_factor, sizeof(tmp_factor));
  if (raw_factor != 0) {
    _this->_internal_set_factor(from._internal_factor());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_primitive_type() != 0) {
    _this->_internal_set_primitive_type(from._internal_primitive_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CANSignal::CopyFrom(const CANSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.CANSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANSignal::IsInitialized() const {
  return true;
}

void CANSignal::InternalSwap(CANSignal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_id_, lhs_arena,
      &other->_impl_.interface_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CANSignal, _impl_.primitive_type_)
      + sizeof(CANSignal::_impl_.primitive_type_)
      - PROTOBUF_FIELD_OFFSET(CANSignal, _impl_.signal_id_)>(
          reinterpret_cast<char*>(&_impl_.signal_id_),
          reinterpret_cast<char*>(&other->_impl_.signal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CANSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[1]);
}

// ===================================================================

class OBDPIDSignal::_Internal {
 public:
};

OBDPIDSignal::OBDPIDSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
}
OBDPIDSignal::OBDPIDSignal(const OBDPIDSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OBDPIDSignal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.signal_id_){}
    , decltype(_impl_.pid_response_length_){}
    , decltype(_impl_.service_mode_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.scaling_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.start_byte_){}
    , decltype(_impl_.byte_length_){}
    , decltype(_impl_.bit_right_shift_){}
    , decltype(_impl_.bit_mask_length_){}
    , decltype(_impl_.primitive_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_id().empty()) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.signal_id_, &from._impl_.signal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primitive_type_) -
    reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.primitive_type_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
}

inline void OBDPIDSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.signal_id_){0u}
    , decltype(_impl_.pid_response_length_){0u}
    , decltype(_impl_.service_mode_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.scaling_){0}
    , decltype(_impl_.offset_){0}
    , decltype(_impl_.start_byte_){0u}
    , decltype(_impl_.byte_length_){0u}
    , decltype(_impl_.bit_right_shift_){0u}
    , decltype(_impl_.bit_mask_length_){0u}
    , decltype(_impl_.primitive_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OBDPIDSignal::~OBDPIDSignal() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OBDPIDSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_id_.Destroy();
}

void OBDPIDSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OBDPIDSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_id_.ClearToEmpty();
  ::memset(&_impl_.signal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.primitive_type_) -
      reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.primitive_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBDPIDSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string interface_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.interface_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 pid_response_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pid_response_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 service_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.service_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double scaling = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 start_byte = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.start_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 byte_length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.byte_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bit_right_shift = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.bit_right_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bit_mask_length = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.bit_mask_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primitive_type(static_cast<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OBDPIDSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_id(), target);
  }

  // string interface_id = 2;
  if (!this->_internal_interface_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_id().data(), static_cast<int>(this->_internal_interface_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal.interface_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_interface_id(), target);
  }

  // uint32 pid_response_length = 3;
  if (this->_internal_pid_response_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pid_response_length(), target);
  }

  // uint32 service_mode = 4;
  if (this->_internal_service_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_service_mode(), target);
  }

  // uint32 pid = 5;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pid(), target);
  }

  // double scaling = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scaling = this->_internal_scaling();
  uint64_t raw_scaling;
  memcpy(&raw_scaling, &tmp_scaling, sizeof(tmp_scaling));
  if (raw_scaling != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_scaling(), target);
  }

  // double offset = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_offset(), target);
  }

  // uint32 start_byte = 8;
  if (this->_internal_start_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_start_byte(), target);
  }

  // uint32 byte_length = 9;
  if (this->_internal_byte_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_byte_length(), target);
  }

  // uint32 bit_right_shift = 10;
  if (this->_internal_bit_right_shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bit_right_shift(), target);
  }

  // uint32 bit_mask_length = 11;
  if (this->_internal_bit_mask_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_bit_mask_length(), target);
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 12;
  if (this->_internal_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_primitive_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
  return target;
}

size_t OBDPIDSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_id = 2;
  if (!this->_internal_interface_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_id());
  }

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
  }

  // uint32 pid_response_length = 3;
  if (this->_internal_pid_response_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid_response_length());
  }

  // uint32 service_mode = 4;
  if (this->_internal_service_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_service_mode());
  }

  // uint32 pid = 5;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // double scaling = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scaling = this->_internal_scaling();
  uint64_t raw_scaling;
  memcpy(&raw_scaling, &tmp_scaling, sizeof(tmp_scaling));
  if (raw_scaling != 0) {
    total_size += 1 + 8;
  }

  // double offset = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 1 + 8;
  }

  // uint32 start_byte = 8;
  if (this->_internal_start_byte() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_byte());
  }

  // uint32 byte_length = 9;
  if (this->_internal_byte_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_byte_length());
  }

  // uint32 bit_right_shift = 10;
  if (this->_internal_bit_right_shift() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bit_right_shift());
  }

  // uint32 bit_mask_length = 11;
  if (this->_internal_bit_mask_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bit_mask_length());
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 12;
  if (this->_internal_primitive_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_primitive_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OBDPIDSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OBDPIDSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OBDPIDSignal::GetClassData() const { return &_class_data_; }


void OBDPIDSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OBDPIDSignal*>(&to_msg);
  auto& from = static_cast<const OBDPIDSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface_id().empty()) {
    _this->_internal_set_interface_id(from._internal_interface_id());
  }
  if (from._internal_signal_id() != 0) {
    _this->_internal_set_signal_id(from._internal_signal_id());
  }
  if (from._internal_pid_response_length() != 0) {
    _this->_internal_set_pid_response_length(from._internal_pid_response_length());
  }
  if (from._internal_service_mode() != 0) {
    _this->_internal_set_service_mode(from._internal_service_mode());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scaling = from._internal_scaling();
  uint64_t raw_scaling;
  memcpy(&raw_scaling, &tmp_scaling, sizeof(tmp_scaling));
  if (raw_scaling != 0) {
    _this->_internal_set_scaling(from._internal_scaling());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_start_byte() != 0) {
    _this->_internal_set_start_byte(from._internal_start_byte());
  }
  if (from._internal_byte_length() != 0) {
    _this->_internal_set_byte_length(from._internal_byte_length());
  }
  if (from._internal_bit_right_shift() != 0) {
    _this->_internal_set_bit_right_shift(from._internal_bit_right_shift());
  }
  if (from._internal_bit_mask_length() != 0) {
    _this->_internal_set_bit_mask_length(from._internal_bit_mask_length());
  }
  if (from._internal_primitive_type() != 0) {
    _this->_internal_set_primitive_type(from._internal_primitive_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OBDPIDSignal::CopyFrom(const OBDPIDSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.OBDPIDSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBDPIDSignal::IsInitialized() const {
  return true;
}

void OBDPIDSignal::InternalSwap(OBDPIDSignal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_id_, lhs_arena,
      &other->_impl_.interface_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OBDPIDSignal, _impl_.primitive_type_)
      + sizeof(OBDPIDSignal::_impl_.primitive_type_)
      - PROTOBUF_FIELD_OFFSET(OBDPIDSignal, _impl_.signal_id_)>(
          reinterpret_cast<char*>(&_impl_.signal_id_),
          reinterpret_cast<char*>(&other->_impl_.signal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OBDPIDSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[2]);
}

// ===================================================================

class PrimitiveData::_Internal {
 public:
};

PrimitiveData::PrimitiveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
}
PrimitiveData::PrimitiveData(const PrimitiveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimitiveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scaling_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.primitive_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scaling_, &from._impl_.scaling_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primitive_type_) -
    reinterpret_cast<char*>(&_impl_.scaling_)) + sizeof(_impl_.primitive_type_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
}

inline void PrimitiveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scaling_){0}
    , decltype(_impl_.offset_){0}
    , decltype(_impl_.primitive_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrimitiveData::~PrimitiveData() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimitiveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrimitiveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimitiveData::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scaling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.primitive_type_) -
      reinterpret_cast<char*>(&_impl_.scaling_)) + sizeof(_impl_.primitive_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primitive_type(static_cast<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // double scaling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimitiveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 1;
  if (this->_internal_primitive_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_primitive_type(), target);
  }

  // double scaling = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scaling = this->_internal_scaling();
  uint64_t raw_scaling;
  memcpy(&raw_scaling, &tmp_scaling, sizeof(tmp_scaling));
  if (raw_scaling != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_scaling(), target);
  }

  // double offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
  return target;
}

size_t PrimitiveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double scaling = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scaling = this->_internal_scaling();
  uint64_t raw_scaling;
  memcpy(&raw_scaling, &tmp_scaling, sizeof(tmp_scaling));
  if (raw_scaling != 0) {
    total_size += 1 + 8;
  }

  // double offset = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 1 + 8;
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveType primitive_type = 1;
  if (this->_internal_primitive_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_primitive_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimitiveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimitiveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimitiveData::GetClassData() const { return &_class_data_; }


void PrimitiveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimitiveData*>(&to_msg);
  auto& from = static_cast<const PrimitiveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_scaling = from._internal_scaling();
  uint64_t raw_scaling;
  memcpy(&raw_scaling, &tmp_scaling, sizeof(tmp_scaling));
  if (raw_scaling != 0) {
    _this->_internal_set_scaling(from._internal_scaling());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_primitive_type() != 0) {
    _this->_internal_set_primitive_type(from._internal_primitive_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimitiveData::CopyFrom(const PrimitiveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveData::IsInitialized() const {
  return true;
}

void PrimitiveData::InternalSwap(PrimitiveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimitiveData, _impl_.primitive_type_)
      + sizeof(PrimitiveData::_impl_.primitive_type_)
      - PROTOBUF_FIELD_OFFSET(PrimitiveData, _impl_.scaling_)>(
          reinterpret_cast<char*>(&_impl_.scaling_),
          reinterpret_cast<char*>(&other->_impl_.scaling_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[3]);
}

// ===================================================================

class StringData::_Internal {
 public:
};

StringData::StringData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
}
StringData::StringData(const StringData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , decltype(_impl_.encoding_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encoding_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.encoding_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
}

inline void StringData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.encoding_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StringData::~StringData() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StringData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringData::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.encoding_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringEncoding encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringEncoding>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringEncoding encoding = 1;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
  return target;
}

size_t StringData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringEncoding encoding = 1;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringData::GetClassData() const { return &_class_data_; }


void StringData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringData*>(&to_msg);
  auto& from = static_cast<const StringData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_encoding() != 0) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringData::CopyFrom(const StringData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringData::IsInitialized() const {
  return true;
}

void StringData::InternalSwap(StringData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringData, _impl_.encoding_)
      + sizeof(StringData::_impl_.encoding_)
      - PROTOBUF_FIELD_OFFSET(StringData, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[4]);
}

// ===================================================================

class ComplexArray::_Internal {
 public:
};

ComplexArray::ComplexArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
}
ComplexArray::ComplexArray(const ComplexArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , decltype(_impl_.type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_id_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.type_id_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
}

inline void ComplexArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.type_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComplexArray::~ComplexArray() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComplexArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexArray::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_id_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.type_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  // uint32 type_id = 2;
  if (this->_internal_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
  return target;
}

size_t ComplexArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // uint32 type_id = 2;
  if (this->_internal_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexArray::GetClassData() const { return &_class_data_; }


void ComplexArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexArray*>(&to_msg);
  auto& from = static_cast<const ComplexArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_type_id() != 0) {
    _this->_internal_set_type_id(from._internal_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexArray::CopyFrom(const ComplexArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexArray::IsInitialized() const {
  return true;
}

void ComplexArray::InternalSwap(ComplexArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexArray, _impl_.type_id_)
      + sizeof(ComplexArray::_impl_.type_id_)
      - PROTOBUF_FIELD_OFFSET(ComplexArray, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[5]);
}

// ===================================================================

class ComplexStructMember::_Internal {
 public:
};

ComplexStructMember::ComplexStructMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
}
ComplexStructMember::ComplexStructMember(const ComplexStructMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexStructMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_id_ = from._impl_.type_id_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
}

inline void ComplexStructMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComplexStructMember::~ComplexStructMember() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexStructMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComplexStructMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexStructMember::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexStructMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexStructMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_id = 1;
  if (this->_internal_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
  return target;
}

size_t ComplexStructMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_id = 1;
  if (this->_internal_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexStructMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexStructMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexStructMember::GetClassData() const { return &_class_data_; }


void ComplexStructMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexStructMember*>(&to_msg);
  auto& from = static_cast<const ComplexStructMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_id() != 0) {
    _this->_internal_set_type_id(from._internal_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexStructMember::CopyFrom(const ComplexStructMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexStructMember::IsInitialized() const {
  return true;
}

void ComplexStructMember::InternalSwap(ComplexStructMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_id_, other->_impl_.type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexStructMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[6]);
}

// ===================================================================

class ComplexStruct::_Internal {
 public:
};

ComplexStruct::ComplexStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
}
ComplexStruct::ComplexStruct(const ComplexStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
}

inline void ComplexStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ComplexStruct::~ComplexStruct() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
}

void ComplexStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
  return target;
}

size_t ComplexStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStructMember members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexStruct::GetClassData() const { return &_class_data_; }


void ComplexStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexStruct*>(&to_msg);
  auto& from = static_cast<const ComplexStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexStruct::CopyFrom(const ComplexStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexStruct::IsInitialized() const {
  return true;
}

void ComplexStruct::InternalSwap(ComplexStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[7]);
}

// ===================================================================

class ComplexType::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData& primitive_data(const ComplexType* msg);
  static const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct& struct_(const ComplexType* msg);
  static const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray& array(const ComplexType* msg);
  static const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData& string_data(const ComplexType* msg);
};

const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData&
ComplexType::_Internal::primitive_data(const ComplexType* msg) {
  return *msg->_impl_.variant_.primitive_data_;
}
const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct&
ComplexType::_Internal::struct_(const ComplexType* msg) {
  return *msg->_impl_.variant_.struct__;
}
const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray&
ComplexType::_Internal::array(const ComplexType* msg) {
  return *msg->_impl_.variant_.array_;
}
const ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData&
ComplexType::_Internal::string_data(const ComplexType* msg) {
  return *msg->_impl_.variant_.string_data_;
}
void ComplexType::set_allocated_primitive_data(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData* primitive_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_variant();
  if (primitive_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primitive_data);
    if (message_arena != submessage_arena) {
      primitive_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primitive_data, submessage_arena);
    }
    set_has_primitive_data();
    _impl_.variant_.primitive_data_ = primitive_data;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.primitive_data)
}
void ComplexType::set_allocated_struct_(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_variant();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    _impl_.variant_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.struct)
}
void ComplexType::set_allocated_array(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray* array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_variant();
  if (array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(array);
    if (message_arena != submessage_arena) {
      array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array, submessage_arena);
    }
    set_has_array();
    _impl_.variant_.array_ = array;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.array)
}
void ComplexType::set_allocated_string_data(::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData* string_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_variant();
  if (string_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_data);
    if (message_arena != submessage_arena) {
      string_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_data, submessage_arena);
    }
    set_has_string_data();
    _impl_.variant_.string_data_ = string_data;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType.string_data)
}
ComplexType::ComplexType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
}
ComplexType::ComplexType(const ComplexType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_id_){}
    , decltype(_impl_.variant_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_id_ = from._impl_.type_id_;
  clear_has_variant();
  switch (from.variant_case()) {
    case kPrimitiveData: {
      _this->_internal_mutable_primitive_data()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData::MergeFrom(
          from._internal_primitive_data());
      break;
    }
    case kStruct: {
      _this->_internal_mutable_struct_()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kArray: {
      _this->_internal_mutable_array()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray::MergeFrom(
          from._internal_array());
      break;
    }
    case kStringData: {
      _this->_internal_mutable_string_data()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData::MergeFrom(
          from._internal_string_data());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
}

inline void ComplexType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_id_){0u}
    , decltype(_impl_.variant_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_variant();
}

ComplexType::~ComplexType() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_variant()) {
    clear_variant();
  }
}

void ComplexType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexType::clear_variant() {
// @@protoc_insertion_point(one_of_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  switch (variant_case()) {
    case kPrimitiveData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.variant_.primitive_data_;
      }
      break;
    }
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.variant_.struct__;
      }
      break;
    }
    case kArray: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.variant_.array_;
      }
      break;
    }
    case kStringData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.variant_.string_data_;
      }
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VARIANT_NOT_SET;
}


void ComplexType::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_id_ = 0u;
  clear_variant();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData primitive_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_primitive_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct struct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData string_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_id = 1;
  if (this->_internal_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type_id(), target);
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData primitive_data = 2;
  if (_internal_has_primitive_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::primitive_data(this),
        _Internal::primitive_data(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct struct = 3;
  if (_internal_has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray array = 4;
  if (_internal_has_array()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::array(this),
        _Internal::array(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData string_data = 5;
  if (_internal_has_string_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::string_data(this),
        _Internal::string_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  return target;
}

size_t ComplexType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_id = 1;
  if (this->_internal_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type_id());
  }

  switch (variant_case()) {
    // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.PrimitiveData primitive_data = 2;
    case kPrimitiveData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variant_.primitive_data_);
      break;
    }
    // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexStruct struct = 3;
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variant_.struct__);
      break;
    }
    // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexArray array = 4;
    case kArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variant_.array_);
      break;
    }
    // .Aws.IoTFleetWise.Schemas.DecoderManifestMsg.StringData string_data = 5;
    case kStringData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variant_.string_data_);
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexType::GetClassData() const { return &_class_data_; }


void ComplexType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexType*>(&to_msg);
  auto& from = static_cast<const ComplexType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_id() != 0) {
    _this->_internal_set_type_id(from._internal_type_id());
  }
  switch (from.variant_case()) {
    case kPrimitiveData: {
      _this->_internal_mutable_primitive_data()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData::MergeFrom(
          from._internal_primitive_data());
      break;
    }
    case kStruct: {
      _this->_internal_mutable_struct_()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kArray: {
      _this->_internal_mutable_array()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray::MergeFrom(
          from._internal_array());
      break;
    }
    case kStringData: {
      _this->_internal_mutable_string_data()->::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData::MergeFrom(
          from._internal_string_data());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexType::CopyFrom(const ComplexType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexType::IsInitialized() const {
  return true;
}

void ComplexType::InternalSwap(ComplexType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_id_, other->_impl_.type_id_);
  swap(_impl_.variant_, other->_impl_.variant_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[8]);
}

// ===================================================================

class ComplexSignal::_Internal {
 public:
};

ComplexSignal::ComplexSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
}
ComplexSignal::ComplexSignal(const ComplexSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComplexSignal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.signal_id_){}
    , decltype(_impl_.root_type_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_id().empty()) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.signal_id_, &from._impl_.signal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.root_type_id_) -
    reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.root_type_id_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
}

inline void ComplexSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.signal_id_){0u}
    , decltype(_impl_.root_type_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComplexSignal::~ComplexSignal() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComplexSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_id_.Destroy();
  _impl_.message_id_.Destroy();
}

void ComplexSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComplexSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_id_.ClearToEmpty();
  _impl_.message_id_.ClearToEmpty();
  ::memset(&_impl_.signal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.root_type_id_) -
      reinterpret_cast<char*>(&_impl_.signal_id_)) + sizeof(_impl_.root_type_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string interface_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.interface_id"));
        } else
          goto handle_unusual;
        continue;
      // string message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.message_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 root_type_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.root_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComplexSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_id(), target);
  }

  // string interface_id = 2;
  if (!this->_internal_interface_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_id().data(), static_cast<int>(this->_internal_interface_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.interface_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_interface_id(), target);
  }

  // string message_id = 3;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal.message_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_id(), target);
  }

  // uint32 root_type_id = 4;
  if (this->_internal_root_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_root_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
  return target;
}

size_t ComplexSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_id = 2;
  if (!this->_internal_interface_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_id());
  }

  // string message_id = 3;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
  }

  // uint32 root_type_id = 4;
  if (this->_internal_root_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_root_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComplexSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComplexSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComplexSignal::GetClassData() const { return &_class_data_; }


void ComplexSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComplexSignal*>(&to_msg);
  auto& from = static_cast<const ComplexSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface_id().empty()) {
    _this->_internal_set_interface_id(from._internal_interface_id());
  }
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_signal_id() != 0) {
    _this->_internal_set_signal_id(from._internal_signal_id());
  }
  if (from._internal_root_type_id() != 0) {
    _this->_internal_set_root_type_id(from._internal_root_type_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexSignal::CopyFrom(const ComplexSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.DecoderManifestMsg.ComplexSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexSignal::IsInitialized() const {
  return true;
}

void ComplexSignal::InternalSwap(ComplexSignal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_id_, lhs_arena,
      &other->_impl_.interface_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexSignal, _impl_.root_type_id_)
      + sizeof(ComplexSignal::_impl_.root_type_id_)
      - PROTOBUF_FIELD_OFFSET(ComplexSignal, _impl_.signal_id_)>(
          reinterpret_cast<char*>(&_impl_.signal_id_),
          reinterpret_cast<char*>(&other->_impl_.signal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_decoder_5fmanifest_2eproto_getter, &descriptor_table_decoder_5fmanifest_2eproto_once,
      file_level_metadata_decoder_5fmanifest_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DecoderManifestMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::DecoderManifest >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::CANSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::OBDPIDSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::PrimitiveData >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::StringData >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexArray >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStructMember >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexType >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::DecoderManifestMsg::ComplexSignal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
