// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collection_schemes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_collection_5fschemes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_collection_5fschemes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_collection_5fschemes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_collection_5fschemes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collection_5fschemes_2eproto;
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CollectionSchemesMsg {
class CollectionScheme;
struct CollectionSchemeDefaultTypeInternal;
extern CollectionSchemeDefaultTypeInternal _CollectionScheme_default_instance_;
class CollectionSchemes;
struct CollectionSchemesDefaultTypeInternal;
extern CollectionSchemesDefaultTypeInternal _CollectionSchemes_default_instance_;
class ConditionBasedCollectionScheme;
struct ConditionBasedCollectionSchemeDefaultTypeInternal;
extern ConditionBasedCollectionSchemeDefaultTypeInternal _ConditionBasedCollectionScheme_default_instance_;
class Probabilities;
struct ProbabilitiesDefaultTypeInternal;
extern ProbabilitiesDefaultTypeInternal _Probabilities_default_instance_;
class RawCanFrame;
struct RawCanFrameDefaultTypeInternal;
extern RawCanFrameDefaultTypeInternal _RawCanFrame_default_instance_;
class S3UploadMetadata;
struct S3UploadMetadataDefaultTypeInternal;
extern S3UploadMetadataDefaultTypeInternal _S3UploadMetadata_default_instance_;
class SignalInformation;
struct SignalInformationDefaultTypeInternal;
extern SignalInformationDefaultTypeInternal _SignalInformation_default_instance_;
class TimeBasedCollectionScheme;
struct TimeBasedCollectionSchemeDefaultTypeInternal;
extern TimeBasedCollectionSchemeDefaultTypeInternal _TimeBasedCollectionScheme_default_instance_;
}  // namespace CollectionSchemesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionSchemes>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CollectionSchemesMsg {

enum ConditionBasedCollectionScheme_ConditionTriggerMode : int {
  ConditionBasedCollectionScheme_ConditionTriggerMode_TRIGGER_ALWAYS = 0,
  ConditionBasedCollectionScheme_ConditionTriggerMode_TRIGGER_ONLY_ON_RISING_EDGE = 1,
  ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionBasedCollectionScheme_ConditionTriggerMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionBasedCollectionScheme_ConditionTriggerMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConditionBasedCollectionScheme_ConditionTriggerMode_IsValid(int value);
constexpr ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionTriggerMode_MIN = ConditionBasedCollectionScheme_ConditionTriggerMode_TRIGGER_ALWAYS;
constexpr ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionTriggerMode_MAX = ConditionBasedCollectionScheme_ConditionTriggerMode_TRIGGER_ONLY_ON_RISING_EDGE;
constexpr int ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionTriggerMode_ARRAYSIZE = ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionTriggerMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionBasedCollectionScheme_ConditionTriggerMode_descriptor();
template<typename T>
inline const std::string& ConditionBasedCollectionScheme_ConditionTriggerMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConditionBasedCollectionScheme_ConditionTriggerMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConditionBasedCollectionScheme_ConditionTriggerMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConditionBasedCollectionScheme_ConditionTriggerMode_descriptor(), enum_t_value);
}
inline bool ConditionBasedCollectionScheme_ConditionTriggerMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConditionBasedCollectionScheme_ConditionTriggerMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConditionBasedCollectionScheme_ConditionTriggerMode>(
    ConditionBasedCollectionScheme_ConditionTriggerMode_descriptor(), name, value);
}
// ===================================================================

class CollectionSchemes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes) */ {
 public:
  inline CollectionSchemes() : CollectionSchemes(nullptr) {}
  ~CollectionSchemes() override;
  explicit PROTOBUF_CONSTEXPR CollectionSchemes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionSchemes(const CollectionSchemes& from);
  CollectionSchemes(CollectionSchemes&& from) noexcept
    : CollectionSchemes() {
    *this = ::std::move(from);
  }

  inline CollectionSchemes& operator=(const CollectionSchemes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionSchemes& operator=(CollectionSchemes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionSchemes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionSchemes* internal_default_instance() {
    return reinterpret_cast<const CollectionSchemes*>(
               &_CollectionSchemes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CollectionSchemes& a, CollectionSchemes& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionSchemes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionSchemes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionSchemes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionSchemes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionSchemes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionSchemes& from) {
    CollectionSchemes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionSchemes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes";
  }
  protected:
  explicit CollectionSchemes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionSchemesFieldNumber = 1,
    kTimestampMsEpochFieldNumber = 2,
  };
  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme collection_schemes = 1;
  int collection_schemes_size() const;
  private:
  int _internal_collection_schemes_size() const;
  public:
  void clear_collection_schemes();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* mutable_collection_schemes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme >*
      mutable_collection_schemes();
  private:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme& _internal_collection_schemes(int index) const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* _internal_add_collection_schemes();
  public:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme& collection_schemes(int index) const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* add_collection_schemes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme >&
      collection_schemes() const;

  // uint64 timestamp_ms_epoch = 2;
  void clear_timestamp_ms_epoch();
  uint64_t timestamp_ms_epoch() const;
  void set_timestamp_ms_epoch(uint64_t value);
  private:
  uint64_t _internal_timestamp_ms_epoch() const;
  void _internal_set_timestamp_ms_epoch(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme > collection_schemes_;
    uint64_t timestamp_ms_epoch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// -------------------------------------------------------------------

class CollectionScheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme) */ {
 public:
  inline CollectionScheme() : CollectionScheme(nullptr) {}
  ~CollectionScheme() override;
  explicit PROTOBUF_CONSTEXPR CollectionScheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionScheme(const CollectionScheme& from);
  CollectionScheme(CollectionScheme&& from) noexcept
    : CollectionScheme() {
    *this = ::std::move(from);
  }

  inline CollectionScheme& operator=(const CollectionScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionScheme& operator=(CollectionScheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionScheme& default_instance() {
    return *internal_default_instance();
  }
  enum CollectionSchemeTypeCase {
    kTimeBasedCollectionScheme = 5,
    kConditionBasedCollectionScheme = 6,
    COLLECTION_SCHEME_TYPE_NOT_SET = 0,
  };

  static inline const CollectionScheme* internal_default_instance() {
    return reinterpret_cast<const CollectionScheme*>(
               &_CollectionScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CollectionScheme& a, CollectionScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionScheme* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionScheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionScheme>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionScheme& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionScheme& from) {
    CollectionScheme::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionScheme* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme";
  }
  protected:
  explicit CollectionScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalInformationFieldNumber = 9,
    kRawCanFramesToCollectFieldNumber = 10,
    kCampaignSyncIdFieldNumber = 1,
    kDecoderManifestSyncIdFieldNumber = 2,
    kProbabilitiesFieldNumber = 14,
    kS3UploadMetadataFieldNumber = 16,
    kStartTimeMsEpochFieldNumber = 3,
    kExpiryTimeMsEpochFieldNumber = 4,
    kAfterDurationMsFieldNumber = 7,
    kIncludeActiveDtcsFieldNumber = 8,
    kPersistAllCollectedDataFieldNumber = 11,
    kCompressCollectedDataFieldNumber = 12,
    kPriorityFieldNumber = 13,
    kTimeBasedCollectionSchemeFieldNumber = 5,
    kConditionBasedCollectionSchemeFieldNumber = 6,
  };
  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation signal_information = 9;
  int signal_information_size() const;
  private:
  int _internal_signal_information_size() const;
  public:
  void clear_signal_information();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* mutable_signal_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation >*
      mutable_signal_information();
  private:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation& _internal_signal_information(int index) const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* _internal_add_signal_information();
  public:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation& signal_information(int index) const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* add_signal_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation >&
      signal_information() const;

  // repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame raw_can_frames_to_collect = 10;
  int raw_can_frames_to_collect_size() const;
  private:
  int _internal_raw_can_frames_to_collect_size() const;
  public:
  void clear_raw_can_frames_to_collect();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* mutable_raw_can_frames_to_collect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame >*
      mutable_raw_can_frames_to_collect();
  private:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame& _internal_raw_can_frames_to_collect(int index) const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* _internal_add_raw_can_frames_to_collect();
  public:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame& raw_can_frames_to_collect(int index) const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* add_raw_can_frames_to_collect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame >&
      raw_can_frames_to_collect() const;

  // string campaign_sync_id = 1;
  void clear_campaign_sync_id();
  const std::string& campaign_sync_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_campaign_sync_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_campaign_sync_id();
  PROTOBUF_NODISCARD std::string* release_campaign_sync_id();
  void set_allocated_campaign_sync_id(std::string* campaign_sync_id);
  private:
  const std::string& _internal_campaign_sync_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_campaign_sync_id(const std::string& value);
  std::string* _internal_mutable_campaign_sync_id();
  public:

  // string decoder_manifest_sync_id = 2;
  void clear_decoder_manifest_sync_id();
  const std::string& decoder_manifest_sync_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decoder_manifest_sync_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decoder_manifest_sync_id();
  PROTOBUF_NODISCARD std::string* release_decoder_manifest_sync_id();
  void set_allocated_decoder_manifest_sync_id(std::string* decoder_manifest_sync_id);
  private:
  const std::string& _internal_decoder_manifest_sync_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decoder_manifest_sync_id(const std::string& value);
  std::string* _internal_mutable_decoder_manifest_sync_id();
  public:

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities probabilities = 14;
  bool has_probabilities() const;
  private:
  bool _internal_has_probabilities() const;
  public:
  void clear_probabilities();
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities& probabilities() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* release_probabilities();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* mutable_probabilities();
  void set_allocated_probabilities(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* probabilities);
  private:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities& _internal_probabilities() const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* _internal_mutable_probabilities();
  public:
  void unsafe_arena_set_allocated_probabilities(
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* probabilities);
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* unsafe_arena_release_probabilities();

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata s3_upload_metadata = 16;
  bool has_s3_upload_metadata() const;
  private:
  bool _internal_has_s3_upload_metadata() const;
  public:
  void clear_s3_upload_metadata();
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata& s3_upload_metadata() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* release_s3_upload_metadata();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* mutable_s3_upload_metadata();
  void set_allocated_s3_upload_metadata(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* s3_upload_metadata);
  private:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata& _internal_s3_upload_metadata() const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* _internal_mutable_s3_upload_metadata();
  public:
  void unsafe_arena_set_allocated_s3_upload_metadata(
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* s3_upload_metadata);
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* unsafe_arena_release_s3_upload_metadata();

  // uint64 start_time_ms_epoch = 3;
  void clear_start_time_ms_epoch();
  uint64_t start_time_ms_epoch() const;
  void set_start_time_ms_epoch(uint64_t value);
  private:
  uint64_t _internal_start_time_ms_epoch() const;
  void _internal_set_start_time_ms_epoch(uint64_t value);
  public:

  // uint64 expiry_time_ms_epoch = 4;
  void clear_expiry_time_ms_epoch();
  uint64_t expiry_time_ms_epoch() const;
  void set_expiry_time_ms_epoch(uint64_t value);
  private:
  uint64_t _internal_expiry_time_ms_epoch() const;
  void _internal_set_expiry_time_ms_epoch(uint64_t value);
  public:

  // uint32 after_duration_ms = 7;
  void clear_after_duration_ms();
  uint32_t after_duration_ms() const;
  void set_after_duration_ms(uint32_t value);
  private:
  uint32_t _internal_after_duration_ms() const;
  void _internal_set_after_duration_ms(uint32_t value);
  public:

  // bool include_active_dtcs = 8;
  void clear_include_active_dtcs();
  bool include_active_dtcs() const;
  void set_include_active_dtcs(bool value);
  private:
  bool _internal_include_active_dtcs() const;
  void _internal_set_include_active_dtcs(bool value);
  public:

  // bool persist_all_collected_data = 11;
  void clear_persist_all_collected_data();
  bool persist_all_collected_data() const;
  void set_persist_all_collected_data(bool value);
  private:
  bool _internal_persist_all_collected_data() const;
  void _internal_set_persist_all_collected_data(bool value);
  public:

  // bool compress_collected_data = 12;
  void clear_compress_collected_data();
  bool compress_collected_data() const;
  void set_compress_collected_data(bool value);
  private:
  bool _internal_compress_collected_data() const;
  void _internal_set_compress_collected_data(bool value);
  public:

  // uint32 priority = 13;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme time_based_collection_scheme = 5;
  bool has_time_based_collection_scheme() const;
  private:
  bool _internal_has_time_based_collection_scheme() const;
  public:
  void clear_time_based_collection_scheme();
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme& time_based_collection_scheme() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* release_time_based_collection_scheme();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* mutable_time_based_collection_scheme();
  void set_allocated_time_based_collection_scheme(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* time_based_collection_scheme);
  private:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme& _internal_time_based_collection_scheme() const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* _internal_mutable_time_based_collection_scheme();
  public:
  void unsafe_arena_set_allocated_time_based_collection_scheme(
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* time_based_collection_scheme);
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* unsafe_arena_release_time_based_collection_scheme();

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme condition_based_collection_scheme = 6;
  bool has_condition_based_collection_scheme() const;
  private:
  bool _internal_has_condition_based_collection_scheme() const;
  public:
  void clear_condition_based_collection_scheme();
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme& condition_based_collection_scheme() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* release_condition_based_collection_scheme();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* mutable_condition_based_collection_scheme();
  void set_allocated_condition_based_collection_scheme(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* condition_based_collection_scheme);
  private:
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme& _internal_condition_based_collection_scheme() const;
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* _internal_mutable_condition_based_collection_scheme();
  public:
  void unsafe_arena_set_allocated_condition_based_collection_scheme(
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* condition_based_collection_scheme);
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* unsafe_arena_release_condition_based_collection_scheme();

  void clear_collection_scheme_type();
  CollectionSchemeTypeCase collection_scheme_type_case() const;
  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme)
 private:
  class _Internal;
  void set_has_time_based_collection_scheme();
  void set_has_condition_based_collection_scheme();

  inline bool has_collection_scheme_type() const;
  inline void clear_has_collection_scheme_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation > signal_information_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame > raw_can_frames_to_collect_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr campaign_sync_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoder_manifest_sync_id_;
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* probabilities_;
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* s3_upload_metadata_;
    uint64_t start_time_ms_epoch_;
    uint64_t expiry_time_ms_epoch_;
    uint32_t after_duration_ms_;
    bool include_active_dtcs_;
    bool persist_all_collected_data_;
    bool compress_collected_data_;
    uint32_t priority_;
    union CollectionSchemeTypeUnion {
      constexpr CollectionSchemeTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* time_based_collection_scheme_;
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* condition_based_collection_scheme_;
    } collection_scheme_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// -------------------------------------------------------------------

class S3UploadMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata) */ {
 public:
  inline S3UploadMetadata() : S3UploadMetadata(nullptr) {}
  ~S3UploadMetadata() override;
  explicit PROTOBUF_CONSTEXPR S3UploadMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S3UploadMetadata(const S3UploadMetadata& from);
  S3UploadMetadata(S3UploadMetadata&& from) noexcept
    : S3UploadMetadata() {
    *this = ::std::move(from);
  }

  inline S3UploadMetadata& operator=(const S3UploadMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline S3UploadMetadata& operator=(S3UploadMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S3UploadMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const S3UploadMetadata* internal_default_instance() {
    return reinterpret_cast<const S3UploadMetadata*>(
               &_S3UploadMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S3UploadMetadata& a, S3UploadMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(S3UploadMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S3UploadMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S3UploadMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S3UploadMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S3UploadMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S3UploadMetadata& from) {
    S3UploadMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S3UploadMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata";
  }
  protected:
  explicit S3UploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketNameFieldNumber = 1,
    kPrefixFieldNumber = 2,
    kRegionFieldNumber = 3,
    kBucketOwnerAccountIdFieldNumber = 4,
  };
  // string bucket_name = 1;
  void clear_bucket_name();
  const std::string& bucket_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket_name();
  PROTOBUF_NODISCARD std::string* release_bucket_name();
  void set_allocated_bucket_name(std::string* bucket_name);
  private:
  const std::string& _internal_bucket_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket_name(const std::string& value);
  std::string* _internal_mutable_bucket_name();
  public:

  // string prefix = 2;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // string region = 3;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string bucket_owner_account_id = 4;
  void clear_bucket_owner_account_id();
  const std::string& bucket_owner_account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket_owner_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket_owner_account_id();
  PROTOBUF_NODISCARD std::string* release_bucket_owner_account_id();
  void set_allocated_bucket_owner_account_id(std::string* bucket_owner_account_id);
  private:
  const std::string& _internal_bucket_owner_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket_owner_account_id(const std::string& value);
  std::string* _internal_mutable_bucket_owner_account_id();
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_owner_account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// -------------------------------------------------------------------

class Probabilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities) */ {
 public:
  inline Probabilities() : Probabilities(nullptr) {}
  ~Probabilities() override;
  explicit PROTOBUF_CONSTEXPR Probabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Probabilities(const Probabilities& from);
  Probabilities(Probabilities&& from) noexcept
    : Probabilities() {
    *this = ::std::move(from);
  }

  inline Probabilities& operator=(const Probabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Probabilities& operator=(Probabilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Probabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const Probabilities* internal_default_instance() {
    return reinterpret_cast<const Probabilities*>(
               &_Probabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Probabilities& a, Probabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(Probabilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Probabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Probabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Probabilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Probabilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Probabilities& from) {
    Probabilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Probabilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities";
  }
  protected:
  explicit Probabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbabilityToSendFieldNumber = 1,
  };
  // double probability_to_send = 1;
  void clear_probability_to_send();
  double probability_to_send() const;
  void set_probability_to_send(double value);
  private:
  double _internal_probability_to_send() const;
  void _internal_set_probability_to_send(double value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double probability_to_send_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// -------------------------------------------------------------------

class TimeBasedCollectionScheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme) */ {
 public:
  inline TimeBasedCollectionScheme() : TimeBasedCollectionScheme(nullptr) {}
  ~TimeBasedCollectionScheme() override;
  explicit PROTOBUF_CONSTEXPR TimeBasedCollectionScheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeBasedCollectionScheme(const TimeBasedCollectionScheme& from);
  TimeBasedCollectionScheme(TimeBasedCollectionScheme&& from) noexcept
    : TimeBasedCollectionScheme() {
    *this = ::std::move(from);
  }

  inline TimeBasedCollectionScheme& operator=(const TimeBasedCollectionScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeBasedCollectionScheme& operator=(TimeBasedCollectionScheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeBasedCollectionScheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeBasedCollectionScheme* internal_default_instance() {
    return reinterpret_cast<const TimeBasedCollectionScheme*>(
               &_TimeBasedCollectionScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TimeBasedCollectionScheme& a, TimeBasedCollectionScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeBasedCollectionScheme* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeBasedCollectionScheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeBasedCollectionScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeBasedCollectionScheme>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeBasedCollectionScheme& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeBasedCollectionScheme& from) {
    TimeBasedCollectionScheme::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeBasedCollectionScheme* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme";
  }
  protected:
  explicit TimeBasedCollectionScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeBasedCollectionSchemePeriodMsFieldNumber = 1,
  };
  // uint32 time_based_collection_scheme_period_ms = 1;
  void clear_time_based_collection_scheme_period_ms();
  uint32_t time_based_collection_scheme_period_ms() const;
  void set_time_based_collection_scheme_period_ms(uint32_t value);
  private:
  uint32_t _internal_time_based_collection_scheme_period_ms() const;
  void _internal_set_time_based_collection_scheme_period_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t time_based_collection_scheme_period_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// -------------------------------------------------------------------

class ConditionBasedCollectionScheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme) */ {
 public:
  inline ConditionBasedCollectionScheme() : ConditionBasedCollectionScheme(nullptr) {}
  ~ConditionBasedCollectionScheme() override;
  explicit PROTOBUF_CONSTEXPR ConditionBasedCollectionScheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionBasedCollectionScheme(const ConditionBasedCollectionScheme& from);
  ConditionBasedCollectionScheme(ConditionBasedCollectionScheme&& from) noexcept
    : ConditionBasedCollectionScheme() {
    *this = ::std::move(from);
  }

  inline ConditionBasedCollectionScheme& operator=(const ConditionBasedCollectionScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionBasedCollectionScheme& operator=(ConditionBasedCollectionScheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionBasedCollectionScheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionBasedCollectionScheme* internal_default_instance() {
    return reinterpret_cast<const ConditionBasedCollectionScheme*>(
               &_ConditionBasedCollectionScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConditionBasedCollectionScheme& a, ConditionBasedCollectionScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionBasedCollectionScheme* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionBasedCollectionScheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionBasedCollectionScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionBasedCollectionScheme>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionBasedCollectionScheme& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionBasedCollectionScheme& from) {
    ConditionBasedCollectionScheme::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionBasedCollectionScheme* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme";
  }
  protected:
  explicit ConditionBasedCollectionScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionBasedCollectionScheme_ConditionTriggerMode ConditionTriggerMode;
  static constexpr ConditionTriggerMode TRIGGER_ALWAYS =
    ConditionBasedCollectionScheme_ConditionTriggerMode_TRIGGER_ALWAYS;
  static constexpr ConditionTriggerMode TRIGGER_ONLY_ON_RISING_EDGE =
    ConditionBasedCollectionScheme_ConditionTriggerMode_TRIGGER_ONLY_ON_RISING_EDGE;
  static inline bool ConditionTriggerMode_IsValid(int value) {
    return ConditionBasedCollectionScheme_ConditionTriggerMode_IsValid(value);
  }
  static constexpr ConditionTriggerMode ConditionTriggerMode_MIN =
    ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionTriggerMode_MIN;
  static constexpr ConditionTriggerMode ConditionTriggerMode_MAX =
    ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionTriggerMode_MAX;
  static constexpr int ConditionTriggerMode_ARRAYSIZE =
    ConditionBasedCollectionScheme_ConditionTriggerMode_ConditionTriggerMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConditionTriggerMode_descriptor() {
    return ConditionBasedCollectionScheme_ConditionTriggerMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ConditionTriggerMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConditionTriggerMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConditionTriggerMode_Name.");
    return ConditionBasedCollectionScheme_ConditionTriggerMode_Name(enum_t_value);
  }
  static inline bool ConditionTriggerMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConditionTriggerMode* value) {
    return ConditionBasedCollectionScheme_ConditionTriggerMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConditionTreeFieldNumber = 3,
    kConditionMinimumIntervalMsFieldNumber = 1,
    kConditionLanguageVersionFieldNumber = 2,
    kConditionTriggerModeFieldNumber = 4,
  };
  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode condition_tree = 3;
  bool has_condition_tree() const;
  private:
  bool _internal_has_condition_tree() const;
  public:
  void clear_condition_tree();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& condition_tree() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* release_condition_tree();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* mutable_condition_tree();
  void set_allocated_condition_tree(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* condition_tree);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& _internal_condition_tree() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* _internal_mutable_condition_tree();
  public:
  void unsafe_arena_set_allocated_condition_tree(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* condition_tree);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* unsafe_arena_release_condition_tree();

  // uint32 condition_minimum_interval_ms = 1;
  void clear_condition_minimum_interval_ms();
  uint32_t condition_minimum_interval_ms() const;
  void set_condition_minimum_interval_ms(uint32_t value);
  private:
  uint32_t _internal_condition_minimum_interval_ms() const;
  void _internal_set_condition_minimum_interval_ms(uint32_t value);
  public:

  // uint32 condition_language_version = 2;
  void clear_condition_language_version();
  uint32_t condition_language_version() const;
  void set_condition_language_version(uint32_t value);
  private:
  uint32_t _internal_condition_language_version() const;
  void _internal_set_condition_language_version(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.ConditionTriggerMode condition_trigger_mode = 4;
  void clear_condition_trigger_mode();
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode condition_trigger_mode() const;
  void set_condition_trigger_mode(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode value);
  private:
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode _internal_condition_trigger_mode() const;
  void _internal_set_condition_trigger_mode(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* condition_tree_;
    uint32_t condition_minimum_interval_ms_;
    uint32_t condition_language_version_;
    int condition_trigger_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// -------------------------------------------------------------------

class SignalInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation) */ {
 public:
  inline SignalInformation() : SignalInformation(nullptr) {}
  ~SignalInformation() override;
  explicit PROTOBUF_CONSTEXPR SignalInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalInformation(const SignalInformation& from);
  SignalInformation(SignalInformation&& from) noexcept
    : SignalInformation() {
    *this = ::std::move(from);
  }

  inline SignalInformation& operator=(const SignalInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalInformation& operator=(SignalInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignalInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalInformation* internal_default_instance() {
    return reinterpret_cast<const SignalInformation*>(
               &_SignalInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SignalInformation& a, SignalInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignalInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignalInformation& from) {
    SignalInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation";
  }
  protected:
  explicit SignalInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalPathFieldNumber = 6,
    kSignalIdFieldNumber = 1,
    kSampleBufferSizeFieldNumber = 2,
    kMinimumSamplePeriodMsFieldNumber = 3,
    kFixedWindowPeriodMsFieldNumber = 4,
    kConditionOnlySignalFieldNumber = 5,
  };
  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 6;
  bool has_signal_path() const;
  private:
  bool _internal_has_signal_path() const;
  public:
  void clear_signal_path();
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& signal_path() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* release_signal_path();
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* mutable_signal_path();
  void set_allocated_signal_path(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path);
  private:
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& _internal_signal_path() const;
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* _internal_mutable_signal_path();
  public:
  void unsafe_arena_set_allocated_signal_path(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path);
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* unsafe_arena_release_signal_path();

  // uint32 signal_id = 1;
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // uint32 sample_buffer_size = 2;
  void clear_sample_buffer_size();
  uint32_t sample_buffer_size() const;
  void set_sample_buffer_size(uint32_t value);
  private:
  uint32_t _internal_sample_buffer_size() const;
  void _internal_set_sample_buffer_size(uint32_t value);
  public:

  // uint32 minimum_sample_period_ms = 3;
  void clear_minimum_sample_period_ms();
  uint32_t minimum_sample_period_ms() const;
  void set_minimum_sample_period_ms(uint32_t value);
  private:
  uint32_t _internal_minimum_sample_period_ms() const;
  void _internal_set_minimum_sample_period_ms(uint32_t value);
  public:

  // uint32 fixed_window_period_ms = 4;
  void clear_fixed_window_period_ms();
  uint32_t fixed_window_period_ms() const;
  void set_fixed_window_period_ms(uint32_t value);
  private:
  uint32_t _internal_fixed_window_period_ms() const;
  void _internal_set_fixed_window_period_ms(uint32_t value);
  public:

  // bool condition_only_signal = 5;
  void clear_condition_only_signal();
  bool condition_only_signal() const;
  void set_condition_only_signal(bool value);
  private:
  bool _internal_condition_only_signal() const;
  void _internal_set_condition_only_signal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path_;
    uint32_t signal_id_;
    uint32_t sample_buffer_size_;
    uint32_t minimum_sample_period_ms_;
    uint32_t fixed_window_period_ms_;
    bool condition_only_signal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// -------------------------------------------------------------------

class RawCanFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame) */ {
 public:
  inline RawCanFrame() : RawCanFrame(nullptr) {}
  ~RawCanFrame() override;
  explicit PROTOBUF_CONSTEXPR RawCanFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawCanFrame(const RawCanFrame& from);
  RawCanFrame(RawCanFrame&& from) noexcept
    : RawCanFrame() {
    *this = ::std::move(from);
  }

  inline RawCanFrame& operator=(const RawCanFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawCanFrame& operator=(RawCanFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawCanFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawCanFrame* internal_default_instance() {
    return reinterpret_cast<const RawCanFrame*>(
               &_RawCanFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RawCanFrame& a, RawCanFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(RawCanFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawCanFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawCanFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RawCanFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawCanFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RawCanFrame& from) {
    RawCanFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawCanFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame";
  }
  protected:
  explicit RawCanFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanInterfaceIdFieldNumber = 1,
    kCanMessageIdFieldNumber = 2,
    kSampleBufferSizeFieldNumber = 3,
    kMinimumSamplePeriodMsFieldNumber = 4,
  };
  // string can_interface_id = 1;
  void clear_can_interface_id();
  const std::string& can_interface_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_can_interface_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_can_interface_id();
  PROTOBUF_NODISCARD std::string* release_can_interface_id();
  void set_allocated_can_interface_id(std::string* can_interface_id);
  private:
  const std::string& _internal_can_interface_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_can_interface_id(const std::string& value);
  std::string* _internal_mutable_can_interface_id();
  public:

  // uint32 can_message_id = 2;
  void clear_can_message_id();
  uint32_t can_message_id() const;
  void set_can_message_id(uint32_t value);
  private:
  uint32_t _internal_can_message_id() const;
  void _internal_set_can_message_id(uint32_t value);
  public:

  // uint32 sample_buffer_size = 3;
  void clear_sample_buffer_size();
  uint32_t sample_buffer_size() const;
  void set_sample_buffer_size(uint32_t value);
  private:
  uint32_t _internal_sample_buffer_size() const;
  void _internal_set_sample_buffer_size(uint32_t value);
  public:

  // uint32 minimum_sample_period_ms = 4;
  void clear_minimum_sample_period_ms();
  uint32_t minimum_sample_period_ms() const;
  void set_minimum_sample_period_ms(uint32_t value);
  private:
  uint32_t _internal_minimum_sample_period_ms() const;
  void _internal_set_minimum_sample_period_ms(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr can_interface_id_;
    uint32_t can_message_id_;
    uint32_t sample_buffer_size_;
    uint32_t minimum_sample_period_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collection_5fschemes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CollectionSchemes

// repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme collection_schemes = 1;
inline int CollectionSchemes::_internal_collection_schemes_size() const {
  return _impl_.collection_schemes_.size();
}
inline int CollectionSchemes::collection_schemes_size() const {
  return _internal_collection_schemes_size();
}
inline void CollectionSchemes::clear_collection_schemes() {
  _impl_.collection_schemes_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* CollectionSchemes::mutable_collection_schemes(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes.collection_schemes)
  return _impl_.collection_schemes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme >*
CollectionSchemes::mutable_collection_schemes() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes.collection_schemes)
  return &_impl_.collection_schemes_;
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme& CollectionSchemes::_internal_collection_schemes(int index) const {
  return _impl_.collection_schemes_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme& CollectionSchemes::collection_schemes(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes.collection_schemes)
  return _internal_collection_schemes(index);
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* CollectionSchemes::_internal_add_collection_schemes() {
  return _impl_.collection_schemes_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* CollectionSchemes::add_collection_schemes() {
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme* _add = _internal_add_collection_schemes();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes.collection_schemes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::CollectionScheme >&
CollectionSchemes::collection_schemes() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes.collection_schemes)
  return _impl_.collection_schemes_;
}

// uint64 timestamp_ms_epoch = 2;
inline void CollectionSchemes::clear_timestamp_ms_epoch() {
  _impl_.timestamp_ms_epoch_ = uint64_t{0u};
}
inline uint64_t CollectionSchemes::_internal_timestamp_ms_epoch() const {
  return _impl_.timestamp_ms_epoch_;
}
inline uint64_t CollectionSchemes::timestamp_ms_epoch() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes.timestamp_ms_epoch)
  return _internal_timestamp_ms_epoch();
}
inline void CollectionSchemes::_internal_set_timestamp_ms_epoch(uint64_t value) {
  
  _impl_.timestamp_ms_epoch_ = value;
}
inline void CollectionSchemes::set_timestamp_ms_epoch(uint64_t value) {
  _internal_set_timestamp_ms_epoch(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionSchemes.timestamp_ms_epoch)
}

// -------------------------------------------------------------------

// CollectionScheme

// string campaign_sync_id = 1;
inline void CollectionScheme::clear_campaign_sync_id() {
  _impl_.campaign_sync_id_.ClearToEmpty();
}
inline const std::string& CollectionScheme::campaign_sync_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.campaign_sync_id)
  return _internal_campaign_sync_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectionScheme::set_campaign_sync_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.campaign_sync_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.campaign_sync_id)
}
inline std::string* CollectionScheme::mutable_campaign_sync_id() {
  std::string* _s = _internal_mutable_campaign_sync_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.campaign_sync_id)
  return _s;
}
inline const std::string& CollectionScheme::_internal_campaign_sync_id() const {
  return _impl_.campaign_sync_id_.Get();
}
inline void CollectionScheme::_internal_set_campaign_sync_id(const std::string& value) {
  
  _impl_.campaign_sync_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CollectionScheme::_internal_mutable_campaign_sync_id() {
  
  return _impl_.campaign_sync_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CollectionScheme::release_campaign_sync_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.campaign_sync_id)
  return _impl_.campaign_sync_id_.Release();
}
inline void CollectionScheme::set_allocated_campaign_sync_id(std::string* campaign_sync_id) {
  if (campaign_sync_id != nullptr) {
    
  } else {
    
  }
  _impl_.campaign_sync_id_.SetAllocated(campaign_sync_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.campaign_sync_id_.IsDefault()) {
    _impl_.campaign_sync_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.campaign_sync_id)
}

// string decoder_manifest_sync_id = 2;
inline void CollectionScheme::clear_decoder_manifest_sync_id() {
  _impl_.decoder_manifest_sync_id_.ClearToEmpty();
}
inline const std::string& CollectionScheme::decoder_manifest_sync_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.decoder_manifest_sync_id)
  return _internal_decoder_manifest_sync_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectionScheme::set_decoder_manifest_sync_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.decoder_manifest_sync_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.decoder_manifest_sync_id)
}
inline std::string* CollectionScheme::mutable_decoder_manifest_sync_id() {
  std::string* _s = _internal_mutable_decoder_manifest_sync_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.decoder_manifest_sync_id)
  return _s;
}
inline const std::string& CollectionScheme::_internal_decoder_manifest_sync_id() const {
  return _impl_.decoder_manifest_sync_id_.Get();
}
inline void CollectionScheme::_internal_set_decoder_manifest_sync_id(const std::string& value) {
  
  _impl_.decoder_manifest_sync_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CollectionScheme::_internal_mutable_decoder_manifest_sync_id() {
  
  return _impl_.decoder_manifest_sync_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CollectionScheme::release_decoder_manifest_sync_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.decoder_manifest_sync_id)
  return _impl_.decoder_manifest_sync_id_.Release();
}
inline void CollectionScheme::set_allocated_decoder_manifest_sync_id(std::string* decoder_manifest_sync_id) {
  if (decoder_manifest_sync_id != nullptr) {
    
  } else {
    
  }
  _impl_.decoder_manifest_sync_id_.SetAllocated(decoder_manifest_sync_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decoder_manifest_sync_id_.IsDefault()) {
    _impl_.decoder_manifest_sync_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.decoder_manifest_sync_id)
}

// uint64 start_time_ms_epoch = 3;
inline void CollectionScheme::clear_start_time_ms_epoch() {
  _impl_.start_time_ms_epoch_ = uint64_t{0u};
}
inline uint64_t CollectionScheme::_internal_start_time_ms_epoch() const {
  return _impl_.start_time_ms_epoch_;
}
inline uint64_t CollectionScheme::start_time_ms_epoch() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.start_time_ms_epoch)
  return _internal_start_time_ms_epoch();
}
inline void CollectionScheme::_internal_set_start_time_ms_epoch(uint64_t value) {
  
  _impl_.start_time_ms_epoch_ = value;
}
inline void CollectionScheme::set_start_time_ms_epoch(uint64_t value) {
  _internal_set_start_time_ms_epoch(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.start_time_ms_epoch)
}

// uint64 expiry_time_ms_epoch = 4;
inline void CollectionScheme::clear_expiry_time_ms_epoch() {
  _impl_.expiry_time_ms_epoch_ = uint64_t{0u};
}
inline uint64_t CollectionScheme::_internal_expiry_time_ms_epoch() const {
  return _impl_.expiry_time_ms_epoch_;
}
inline uint64_t CollectionScheme::expiry_time_ms_epoch() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.expiry_time_ms_epoch)
  return _internal_expiry_time_ms_epoch();
}
inline void CollectionScheme::_internal_set_expiry_time_ms_epoch(uint64_t value) {
  
  _impl_.expiry_time_ms_epoch_ = value;
}
inline void CollectionScheme::set_expiry_time_ms_epoch(uint64_t value) {
  _internal_set_expiry_time_ms_epoch(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.expiry_time_ms_epoch)
}

// .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme time_based_collection_scheme = 5;
inline bool CollectionScheme::_internal_has_time_based_collection_scheme() const {
  return collection_scheme_type_case() == kTimeBasedCollectionScheme;
}
inline bool CollectionScheme::has_time_based_collection_scheme() const {
  return _internal_has_time_based_collection_scheme();
}
inline void CollectionScheme::set_has_time_based_collection_scheme() {
  _impl_._oneof_case_[0] = kTimeBasedCollectionScheme;
}
inline void CollectionScheme::clear_time_based_collection_scheme() {
  if (_internal_has_time_based_collection_scheme()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.collection_scheme_type_.time_based_collection_scheme_;
    }
    clear_has_collection_scheme_type();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* CollectionScheme::release_time_based_collection_scheme() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.time_based_collection_scheme)
  if (_internal_has_time_based_collection_scheme()) {
    clear_has_collection_scheme_type();
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* temp = _impl_.collection_scheme_type_.time_based_collection_scheme_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.collection_scheme_type_.time_based_collection_scheme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme& CollectionScheme::_internal_time_based_collection_scheme() const {
  return _internal_has_time_based_collection_scheme()
      ? *_impl_.collection_scheme_type_.time_based_collection_scheme_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme&>(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_TimeBasedCollectionScheme_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme& CollectionScheme::time_based_collection_scheme() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.time_based_collection_scheme)
  return _internal_time_based_collection_scheme();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* CollectionScheme::unsafe_arena_release_time_based_collection_scheme() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.time_based_collection_scheme)
  if (_internal_has_time_based_collection_scheme()) {
    clear_has_collection_scheme_type();
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* temp = _impl_.collection_scheme_type_.time_based_collection_scheme_;
    _impl_.collection_scheme_type_.time_based_collection_scheme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CollectionScheme::unsafe_arena_set_allocated_time_based_collection_scheme(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* time_based_collection_scheme) {
  clear_collection_scheme_type();
  if (time_based_collection_scheme) {
    set_has_time_based_collection_scheme();
    _impl_.collection_scheme_type_.time_based_collection_scheme_ = time_based_collection_scheme;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.time_based_collection_scheme)
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* CollectionScheme::_internal_mutable_time_based_collection_scheme() {
  if (!_internal_has_time_based_collection_scheme()) {
    clear_collection_scheme_type();
    set_has_time_based_collection_scheme();
    _impl_.collection_scheme_type_.time_based_collection_scheme_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme >(GetArenaForAllocation());
  }
  return _impl_.collection_scheme_type_.time_based_collection_scheme_;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* CollectionScheme::mutable_time_based_collection_scheme() {
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::TimeBasedCollectionScheme* _msg = _internal_mutable_time_based_collection_scheme();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.time_based_collection_scheme)
  return _msg;
}

// .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme condition_based_collection_scheme = 6;
inline bool CollectionScheme::_internal_has_condition_based_collection_scheme() const {
  return collection_scheme_type_case() == kConditionBasedCollectionScheme;
}
inline bool CollectionScheme::has_condition_based_collection_scheme() const {
  return _internal_has_condition_based_collection_scheme();
}
inline void CollectionScheme::set_has_condition_based_collection_scheme() {
  _impl_._oneof_case_[0] = kConditionBasedCollectionScheme;
}
inline void CollectionScheme::clear_condition_based_collection_scheme() {
  if (_internal_has_condition_based_collection_scheme()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.collection_scheme_type_.condition_based_collection_scheme_;
    }
    clear_has_collection_scheme_type();
  }
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* CollectionScheme::release_condition_based_collection_scheme() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.condition_based_collection_scheme)
  if (_internal_has_condition_based_collection_scheme()) {
    clear_has_collection_scheme_type();
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* temp = _impl_.collection_scheme_type_.condition_based_collection_scheme_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.collection_scheme_type_.condition_based_collection_scheme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme& CollectionScheme::_internal_condition_based_collection_scheme() const {
  return _internal_has_condition_based_collection_scheme()
      ? *_impl_.collection_scheme_type_.condition_based_collection_scheme_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme&>(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_ConditionBasedCollectionScheme_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme& CollectionScheme::condition_based_collection_scheme() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.condition_based_collection_scheme)
  return _internal_condition_based_collection_scheme();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* CollectionScheme::unsafe_arena_release_condition_based_collection_scheme() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.condition_based_collection_scheme)
  if (_internal_has_condition_based_collection_scheme()) {
    clear_has_collection_scheme_type();
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* temp = _impl_.collection_scheme_type_.condition_based_collection_scheme_;
    _impl_.collection_scheme_type_.condition_based_collection_scheme_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CollectionScheme::unsafe_arena_set_allocated_condition_based_collection_scheme(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* condition_based_collection_scheme) {
  clear_collection_scheme_type();
  if (condition_based_collection_scheme) {
    set_has_condition_based_collection_scheme();
    _impl_.collection_scheme_type_.condition_based_collection_scheme_ = condition_based_collection_scheme;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.condition_based_collection_scheme)
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* CollectionScheme::_internal_mutable_condition_based_collection_scheme() {
  if (!_internal_has_condition_based_collection_scheme()) {
    clear_collection_scheme_type();
    set_has_condition_based_collection_scheme();
    _impl_.collection_scheme_type_.condition_based_collection_scheme_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme >(GetArenaForAllocation());
  }
  return _impl_.collection_scheme_type_.condition_based_collection_scheme_;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* CollectionScheme::mutable_condition_based_collection_scheme() {
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme* _msg = _internal_mutable_condition_based_collection_scheme();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.condition_based_collection_scheme)
  return _msg;
}

// uint32 after_duration_ms = 7;
inline void CollectionScheme::clear_after_duration_ms() {
  _impl_.after_duration_ms_ = 0u;
}
inline uint32_t CollectionScheme::_internal_after_duration_ms() const {
  return _impl_.after_duration_ms_;
}
inline uint32_t CollectionScheme::after_duration_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.after_duration_ms)
  return _internal_after_duration_ms();
}
inline void CollectionScheme::_internal_set_after_duration_ms(uint32_t value) {
  
  _impl_.after_duration_ms_ = value;
}
inline void CollectionScheme::set_after_duration_ms(uint32_t value) {
  _internal_set_after_duration_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.after_duration_ms)
}

// bool include_active_dtcs = 8;
inline void CollectionScheme::clear_include_active_dtcs() {
  _impl_.include_active_dtcs_ = false;
}
inline bool CollectionScheme::_internal_include_active_dtcs() const {
  return _impl_.include_active_dtcs_;
}
inline bool CollectionScheme::include_active_dtcs() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.include_active_dtcs)
  return _internal_include_active_dtcs();
}
inline void CollectionScheme::_internal_set_include_active_dtcs(bool value) {
  
  _impl_.include_active_dtcs_ = value;
}
inline void CollectionScheme::set_include_active_dtcs(bool value) {
  _internal_set_include_active_dtcs(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.include_active_dtcs)
}

// repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation signal_information = 9;
inline int CollectionScheme::_internal_signal_information_size() const {
  return _impl_.signal_information_.size();
}
inline int CollectionScheme::signal_information_size() const {
  return _internal_signal_information_size();
}
inline void CollectionScheme::clear_signal_information() {
  _impl_.signal_information_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* CollectionScheme::mutable_signal_information(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.signal_information)
  return _impl_.signal_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation >*
CollectionScheme::mutable_signal_information() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.signal_information)
  return &_impl_.signal_information_;
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation& CollectionScheme::_internal_signal_information(int index) const {
  return _impl_.signal_information_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation& CollectionScheme::signal_information(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.signal_information)
  return _internal_signal_information(index);
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* CollectionScheme::_internal_add_signal_information() {
  return _impl_.signal_information_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* CollectionScheme::add_signal_information() {
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation* _add = _internal_add_signal_information();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.signal_information)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::SignalInformation >&
CollectionScheme::signal_information() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.signal_information)
  return _impl_.signal_information_;
}

// repeated .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame raw_can_frames_to_collect = 10;
inline int CollectionScheme::_internal_raw_can_frames_to_collect_size() const {
  return _impl_.raw_can_frames_to_collect_.size();
}
inline int CollectionScheme::raw_can_frames_to_collect_size() const {
  return _internal_raw_can_frames_to_collect_size();
}
inline void CollectionScheme::clear_raw_can_frames_to_collect() {
  _impl_.raw_can_frames_to_collect_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* CollectionScheme::mutable_raw_can_frames_to_collect(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.raw_can_frames_to_collect)
  return _impl_.raw_can_frames_to_collect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame >*
CollectionScheme::mutable_raw_can_frames_to_collect() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.raw_can_frames_to_collect)
  return &_impl_.raw_can_frames_to_collect_;
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame& CollectionScheme::_internal_raw_can_frames_to_collect(int index) const {
  return _impl_.raw_can_frames_to_collect_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame& CollectionScheme::raw_can_frames_to_collect(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.raw_can_frames_to_collect)
  return _internal_raw_can_frames_to_collect(index);
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* CollectionScheme::_internal_add_raw_can_frames_to_collect() {
  return _impl_.raw_can_frames_to_collect_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* CollectionScheme::add_raw_can_frames_to_collect() {
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame* _add = _internal_add_raw_can_frames_to_collect();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.raw_can_frames_to_collect)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::RawCanFrame >&
CollectionScheme::raw_can_frames_to_collect() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.raw_can_frames_to_collect)
  return _impl_.raw_can_frames_to_collect_;
}

// bool persist_all_collected_data = 11;
inline void CollectionScheme::clear_persist_all_collected_data() {
  _impl_.persist_all_collected_data_ = false;
}
inline bool CollectionScheme::_internal_persist_all_collected_data() const {
  return _impl_.persist_all_collected_data_;
}
inline bool CollectionScheme::persist_all_collected_data() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.persist_all_collected_data)
  return _internal_persist_all_collected_data();
}
inline void CollectionScheme::_internal_set_persist_all_collected_data(bool value) {
  
  _impl_.persist_all_collected_data_ = value;
}
inline void CollectionScheme::set_persist_all_collected_data(bool value) {
  _internal_set_persist_all_collected_data(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.persist_all_collected_data)
}

// bool compress_collected_data = 12;
inline void CollectionScheme::clear_compress_collected_data() {
  _impl_.compress_collected_data_ = false;
}
inline bool CollectionScheme::_internal_compress_collected_data() const {
  return _impl_.compress_collected_data_;
}
inline bool CollectionScheme::compress_collected_data() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.compress_collected_data)
  return _internal_compress_collected_data();
}
inline void CollectionScheme::_internal_set_compress_collected_data(bool value) {
  
  _impl_.compress_collected_data_ = value;
}
inline void CollectionScheme::set_compress_collected_data(bool value) {
  _internal_set_compress_collected_data(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.compress_collected_data)
}

// uint32 priority = 13;
inline void CollectionScheme::clear_priority() {
  _impl_.priority_ = 0u;
}
inline uint32_t CollectionScheme::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t CollectionScheme::priority() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.priority)
  return _internal_priority();
}
inline void CollectionScheme::_internal_set_priority(uint32_t value) {
  
  _impl_.priority_ = value;
}
inline void CollectionScheme::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.priority)
}

// .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities probabilities = 14;
inline bool CollectionScheme::_internal_has_probabilities() const {
  return this != internal_default_instance() && _impl_.probabilities_ != nullptr;
}
inline bool CollectionScheme::has_probabilities() const {
  return _internal_has_probabilities();
}
inline void CollectionScheme::clear_probabilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.probabilities_ != nullptr) {
    delete _impl_.probabilities_;
  }
  _impl_.probabilities_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities& CollectionScheme::_internal_probabilities() const {
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* p = _impl_.probabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities&>(
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_Probabilities_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities& CollectionScheme::probabilities() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.probabilities)
  return _internal_probabilities();
}
inline void CollectionScheme::unsafe_arena_set_allocated_probabilities(
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* probabilities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.probabilities_);
  }
  _impl_.probabilities_ = probabilities;
  if (probabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.probabilities)
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* CollectionScheme::release_probabilities() {
  
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* temp = _impl_.probabilities_;
  _impl_.probabilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* CollectionScheme::unsafe_arena_release_probabilities() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.probabilities)
  
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* temp = _impl_.probabilities_;
  _impl_.probabilities_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* CollectionScheme::_internal_mutable_probabilities() {
  
  if (_impl_.probabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities>(GetArenaForAllocation());
    _impl_.probabilities_ = p;
  }
  return _impl_.probabilities_;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* CollectionScheme::mutable_probabilities() {
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* _msg = _internal_mutable_probabilities();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.probabilities)
  return _msg;
}
inline void CollectionScheme::set_allocated_probabilities(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::Probabilities* probabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.probabilities_;
  }
  if (probabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(probabilities);
    if (message_arena != submessage_arena) {
      probabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probabilities, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.probabilities_ = probabilities;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.probabilities)
}

// .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata s3_upload_metadata = 16;
inline bool CollectionScheme::_internal_has_s3_upload_metadata() const {
  return this != internal_default_instance() && _impl_.s3_upload_metadata_ != nullptr;
}
inline bool CollectionScheme::has_s3_upload_metadata() const {
  return _internal_has_s3_upload_metadata();
}
inline void CollectionScheme::clear_s3_upload_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.s3_upload_metadata_ != nullptr) {
    delete _impl_.s3_upload_metadata_;
  }
  _impl_.s3_upload_metadata_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata& CollectionScheme::_internal_s3_upload_metadata() const {
  const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* p = _impl_.s3_upload_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata&>(
      ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::_S3UploadMetadata_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata& CollectionScheme::s3_upload_metadata() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.s3_upload_metadata)
  return _internal_s3_upload_metadata();
}
inline void CollectionScheme::unsafe_arena_set_allocated_s3_upload_metadata(
    ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* s3_upload_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.s3_upload_metadata_);
  }
  _impl_.s3_upload_metadata_ = s3_upload_metadata;
  if (s3_upload_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.s3_upload_metadata)
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* CollectionScheme::release_s3_upload_metadata() {
  
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* temp = _impl_.s3_upload_metadata_;
  _impl_.s3_upload_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* CollectionScheme::unsafe_arena_release_s3_upload_metadata() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.s3_upload_metadata)
  
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* temp = _impl_.s3_upload_metadata_;
  _impl_.s3_upload_metadata_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* CollectionScheme::_internal_mutable_s3_upload_metadata() {
  
  if (_impl_.s3_upload_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata>(GetArenaForAllocation());
    _impl_.s3_upload_metadata_ = p;
  }
  return _impl_.s3_upload_metadata_;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* CollectionScheme::mutable_s3_upload_metadata() {
  ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* _msg = _internal_mutable_s3_upload_metadata();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.s3_upload_metadata)
  return _msg;
}
inline void CollectionScheme::set_allocated_s3_upload_metadata(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::S3UploadMetadata* s3_upload_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.s3_upload_metadata_;
  }
  if (s3_upload_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s3_upload_metadata);
    if (message_arena != submessage_arena) {
      s3_upload_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s3_upload_metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.s3_upload_metadata_ = s3_upload_metadata;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.CollectionScheme.s3_upload_metadata)
}

inline bool CollectionScheme::has_collection_scheme_type() const {
  return collection_scheme_type_case() != COLLECTION_SCHEME_TYPE_NOT_SET;
}
inline void CollectionScheme::clear_has_collection_scheme_type() {
  _impl_._oneof_case_[0] = COLLECTION_SCHEME_TYPE_NOT_SET;
}
inline CollectionScheme::CollectionSchemeTypeCase CollectionScheme::collection_scheme_type_case() const {
  return CollectionScheme::CollectionSchemeTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// S3UploadMetadata

// string bucket_name = 1;
inline void S3UploadMetadata::clear_bucket_name() {
  _impl_.bucket_name_.ClearToEmpty();
}
inline const std::string& S3UploadMetadata::bucket_name() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_name)
  return _internal_bucket_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3UploadMetadata::set_bucket_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_name)
}
inline std::string* S3UploadMetadata::mutable_bucket_name() {
  std::string* _s = _internal_mutable_bucket_name();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_name)
  return _s;
}
inline const std::string& S3UploadMetadata::_internal_bucket_name() const {
  return _impl_.bucket_name_.Get();
}
inline void S3UploadMetadata::_internal_set_bucket_name(const std::string& value) {
  
  _impl_.bucket_name_.Set(value, GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::_internal_mutable_bucket_name() {
  
  return _impl_.bucket_name_.Mutable(GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::release_bucket_name() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_name)
  return _impl_.bucket_name_.Release();
}
inline void S3UploadMetadata::set_allocated_bucket_name(std::string* bucket_name) {
  if (bucket_name != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_name_.SetAllocated(bucket_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_name_.IsDefault()) {
    _impl_.bucket_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_name)
}

// string prefix = 2;
inline void S3UploadMetadata::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& S3UploadMetadata::prefix() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3UploadMetadata::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.prefix)
}
inline std::string* S3UploadMetadata::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.prefix)
  return _s;
}
inline const std::string& S3UploadMetadata::_internal_prefix() const {
  return _impl_.prefix_.Get();
}
inline void S3UploadMetadata::_internal_set_prefix(const std::string& value) {
  
  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::_internal_mutable_prefix() {
  
  return _impl_.prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::release_prefix() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.prefix)
  return _impl_.prefix_.Release();
}
inline void S3UploadMetadata::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  _impl_.prefix_.SetAllocated(prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_.IsDefault()) {
    _impl_.prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.prefix)
}

// string region = 3;
inline void S3UploadMetadata::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& S3UploadMetadata::region() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3UploadMetadata::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.region)
}
inline std::string* S3UploadMetadata::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.region)
  return _s;
}
inline const std::string& S3UploadMetadata::_internal_region() const {
  return _impl_.region_.Get();
}
inline void S3UploadMetadata::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::release_region() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.region)
  return _impl_.region_.Release();
}
inline void S3UploadMetadata::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.region)
}

// string bucket_owner_account_id = 4;
inline void S3UploadMetadata::clear_bucket_owner_account_id() {
  _impl_.bucket_owner_account_id_.ClearToEmpty();
}
inline const std::string& S3UploadMetadata::bucket_owner_account_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_owner_account_id)
  return _internal_bucket_owner_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3UploadMetadata::set_bucket_owner_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_owner_account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_owner_account_id)
}
inline std::string* S3UploadMetadata::mutable_bucket_owner_account_id() {
  std::string* _s = _internal_mutable_bucket_owner_account_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_owner_account_id)
  return _s;
}
inline const std::string& S3UploadMetadata::_internal_bucket_owner_account_id() const {
  return _impl_.bucket_owner_account_id_.Get();
}
inline void S3UploadMetadata::_internal_set_bucket_owner_account_id(const std::string& value) {
  
  _impl_.bucket_owner_account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::_internal_mutable_bucket_owner_account_id() {
  
  return _impl_.bucket_owner_account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S3UploadMetadata::release_bucket_owner_account_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_owner_account_id)
  return _impl_.bucket_owner_account_id_.Release();
}
inline void S3UploadMetadata::set_allocated_bucket_owner_account_id(std::string* bucket_owner_account_id) {
  if (bucket_owner_account_id != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_owner_account_id_.SetAllocated(bucket_owner_account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_owner_account_id_.IsDefault()) {
    _impl_.bucket_owner_account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.S3UploadMetadata.bucket_owner_account_id)
}

// -------------------------------------------------------------------

// Probabilities

// double probability_to_send = 1;
inline void Probabilities::clear_probability_to_send() {
  _impl_.probability_to_send_ = 0;
}
inline double Probabilities::_internal_probability_to_send() const {
  return _impl_.probability_to_send_;
}
inline double Probabilities::probability_to_send() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities.probability_to_send)
  return _internal_probability_to_send();
}
inline void Probabilities::_internal_set_probability_to_send(double value) {
  
  _impl_.probability_to_send_ = value;
}
inline void Probabilities::set_probability_to_send(double value) {
  _internal_set_probability_to_send(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.Probabilities.probability_to_send)
}

// -------------------------------------------------------------------

// TimeBasedCollectionScheme

// uint32 time_based_collection_scheme_period_ms = 1;
inline void TimeBasedCollectionScheme::clear_time_based_collection_scheme_period_ms() {
  _impl_.time_based_collection_scheme_period_ms_ = 0u;
}
inline uint32_t TimeBasedCollectionScheme::_internal_time_based_collection_scheme_period_ms() const {
  return _impl_.time_based_collection_scheme_period_ms_;
}
inline uint32_t TimeBasedCollectionScheme::time_based_collection_scheme_period_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme.time_based_collection_scheme_period_ms)
  return _internal_time_based_collection_scheme_period_ms();
}
inline void TimeBasedCollectionScheme::_internal_set_time_based_collection_scheme_period_ms(uint32_t value) {
  
  _impl_.time_based_collection_scheme_period_ms_ = value;
}
inline void TimeBasedCollectionScheme::set_time_based_collection_scheme_period_ms(uint32_t value) {
  _internal_set_time_based_collection_scheme_period_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.TimeBasedCollectionScheme.time_based_collection_scheme_period_ms)
}

// -------------------------------------------------------------------

// ConditionBasedCollectionScheme

// uint32 condition_minimum_interval_ms = 1;
inline void ConditionBasedCollectionScheme::clear_condition_minimum_interval_ms() {
  _impl_.condition_minimum_interval_ms_ = 0u;
}
inline uint32_t ConditionBasedCollectionScheme::_internal_condition_minimum_interval_ms() const {
  return _impl_.condition_minimum_interval_ms_;
}
inline uint32_t ConditionBasedCollectionScheme::condition_minimum_interval_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_minimum_interval_ms)
  return _internal_condition_minimum_interval_ms();
}
inline void ConditionBasedCollectionScheme::_internal_set_condition_minimum_interval_ms(uint32_t value) {
  
  _impl_.condition_minimum_interval_ms_ = value;
}
inline void ConditionBasedCollectionScheme::set_condition_minimum_interval_ms(uint32_t value) {
  _internal_set_condition_minimum_interval_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_minimum_interval_ms)
}

// uint32 condition_language_version = 2;
inline void ConditionBasedCollectionScheme::clear_condition_language_version() {
  _impl_.condition_language_version_ = 0u;
}
inline uint32_t ConditionBasedCollectionScheme::_internal_condition_language_version() const {
  return _impl_.condition_language_version_;
}
inline uint32_t ConditionBasedCollectionScheme::condition_language_version() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_language_version)
  return _internal_condition_language_version();
}
inline void ConditionBasedCollectionScheme::_internal_set_condition_language_version(uint32_t value) {
  
  _impl_.condition_language_version_ = value;
}
inline void ConditionBasedCollectionScheme::set_condition_language_version(uint32_t value) {
  _internal_set_condition_language_version(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_language_version)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode condition_tree = 3;
inline bool ConditionBasedCollectionScheme::_internal_has_condition_tree() const {
  return this != internal_default_instance() && _impl_.condition_tree_ != nullptr;
}
inline bool ConditionBasedCollectionScheme::has_condition_tree() const {
  return _internal_has_condition_tree();
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& ConditionBasedCollectionScheme::_internal_condition_tree() const {
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* p = _impl_.condition_tree_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode&>(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& ConditionBasedCollectionScheme::condition_tree() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_tree)
  return _internal_condition_tree();
}
inline void ConditionBasedCollectionScheme::unsafe_arena_set_allocated_condition_tree(
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* condition_tree) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_tree_);
  }
  _impl_.condition_tree_ = condition_tree;
  if (condition_tree) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_tree)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionBasedCollectionScheme::release_condition_tree() {
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* temp = _impl_.condition_tree_;
  _impl_.condition_tree_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionBasedCollectionScheme::unsafe_arena_release_condition_tree() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_tree)
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* temp = _impl_.condition_tree_;
  _impl_.condition_tree_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionBasedCollectionScheme::_internal_mutable_condition_tree() {
  
  if (_impl_.condition_tree_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode>(GetArenaForAllocation());
    _impl_.condition_tree_ = p;
  }
  return _impl_.condition_tree_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* ConditionBasedCollectionScheme::mutable_condition_tree() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* _msg = _internal_mutable_condition_tree();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_tree)
  return _msg;
}
inline void ConditionBasedCollectionScheme::set_allocated_condition_tree(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode* condition_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_tree_);
  }
  if (condition_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_tree));
    if (message_arena != submessage_arena) {
      condition_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition_tree, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.condition_tree_ = condition_tree;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_tree)
}

// .Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.ConditionTriggerMode condition_trigger_mode = 4;
inline void ConditionBasedCollectionScheme::clear_condition_trigger_mode() {
  _impl_.condition_trigger_mode_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme::_internal_condition_trigger_mode() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode >(_impl_.condition_trigger_mode_);
}
inline ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode ConditionBasedCollectionScheme::condition_trigger_mode() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_trigger_mode)
  return _internal_condition_trigger_mode();
}
inline void ConditionBasedCollectionScheme::_internal_set_condition_trigger_mode(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode value) {
  
  _impl_.condition_trigger_mode_ = value;
}
inline void ConditionBasedCollectionScheme::set_condition_trigger_mode(::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode value) {
  _internal_set_condition_trigger_mode(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.ConditionBasedCollectionScheme.condition_trigger_mode)
}

// -------------------------------------------------------------------

// SignalInformation

// uint32 signal_id = 1;
inline void SignalInformation::clear_signal_id() {
  _impl_.signal_id_ = 0u;
}
inline uint32_t SignalInformation::_internal_signal_id() const {
  return _impl_.signal_id_;
}
inline uint32_t SignalInformation::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.signal_id)
  return _internal_signal_id();
}
inline void SignalInformation::_internal_set_signal_id(uint32_t value) {
  
  _impl_.signal_id_ = value;
}
inline void SignalInformation::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.signal_id)
}

// .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 6;
inline bool SignalInformation::_internal_has_signal_path() const {
  return this != internal_default_instance() && _impl_.signal_path_ != nullptr;
}
inline bool SignalInformation::has_signal_path() const {
  return _internal_has_signal_path();
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& SignalInformation::_internal_signal_path() const {
  const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* p = _impl_.signal_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath&>(
      ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_SignalPath_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& SignalInformation::signal_path() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.signal_path)
  return _internal_signal_path();
}
inline void SignalInformation::unsafe_arena_set_allocated_signal_path(
    ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_path_);
  }
  _impl_.signal_path_ = signal_path;
  if (signal_path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.signal_path)
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* SignalInformation::release_signal_path() {
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* temp = _impl_.signal_path_;
  _impl_.signal_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* SignalInformation::unsafe_arena_release_signal_path() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.signal_path)
  
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* temp = _impl_.signal_path_;
  _impl_.signal_path_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* SignalInformation::_internal_mutable_signal_path() {
  
  if (_impl_.signal_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath>(GetArenaForAllocation());
    _impl_.signal_path_ = p;
  }
  return _impl_.signal_path_;
}
inline ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* SignalInformation::mutable_signal_path() {
  ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* _msg = _internal_mutable_signal_path();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.signal_path)
  return _msg;
}
inline void SignalInformation::set_allocated_signal_path(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath* signal_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_path_);
  }
  if (signal_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_path));
    if (message_arena != submessage_arena) {
      signal_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_path, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.signal_path_ = signal_path;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.signal_path)
}

// uint32 sample_buffer_size = 2;
inline void SignalInformation::clear_sample_buffer_size() {
  _impl_.sample_buffer_size_ = 0u;
}
inline uint32_t SignalInformation::_internal_sample_buffer_size() const {
  return _impl_.sample_buffer_size_;
}
inline uint32_t SignalInformation::sample_buffer_size() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.sample_buffer_size)
  return _internal_sample_buffer_size();
}
inline void SignalInformation::_internal_set_sample_buffer_size(uint32_t value) {
  
  _impl_.sample_buffer_size_ = value;
}
inline void SignalInformation::set_sample_buffer_size(uint32_t value) {
  _internal_set_sample_buffer_size(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.sample_buffer_size)
}

// uint32 minimum_sample_period_ms = 3;
inline void SignalInformation::clear_minimum_sample_period_ms() {
  _impl_.minimum_sample_period_ms_ = 0u;
}
inline uint32_t SignalInformation::_internal_minimum_sample_period_ms() const {
  return _impl_.minimum_sample_period_ms_;
}
inline uint32_t SignalInformation::minimum_sample_period_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.minimum_sample_period_ms)
  return _internal_minimum_sample_period_ms();
}
inline void SignalInformation::_internal_set_minimum_sample_period_ms(uint32_t value) {
  
  _impl_.minimum_sample_period_ms_ = value;
}
inline void SignalInformation::set_minimum_sample_period_ms(uint32_t value) {
  _internal_set_minimum_sample_period_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.minimum_sample_period_ms)
}

// uint32 fixed_window_period_ms = 4;
inline void SignalInformation::clear_fixed_window_period_ms() {
  _impl_.fixed_window_period_ms_ = 0u;
}
inline uint32_t SignalInformation::_internal_fixed_window_period_ms() const {
  return _impl_.fixed_window_period_ms_;
}
inline uint32_t SignalInformation::fixed_window_period_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.fixed_window_period_ms)
  return _internal_fixed_window_period_ms();
}
inline void SignalInformation::_internal_set_fixed_window_period_ms(uint32_t value) {
  
  _impl_.fixed_window_period_ms_ = value;
}
inline void SignalInformation::set_fixed_window_period_ms(uint32_t value) {
  _internal_set_fixed_window_period_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.fixed_window_period_ms)
}

// bool condition_only_signal = 5;
inline void SignalInformation::clear_condition_only_signal() {
  _impl_.condition_only_signal_ = false;
}
inline bool SignalInformation::_internal_condition_only_signal() const {
  return _impl_.condition_only_signal_;
}
inline bool SignalInformation::condition_only_signal() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.condition_only_signal)
  return _internal_condition_only_signal();
}
inline void SignalInformation::_internal_set_condition_only_signal(bool value) {
  
  _impl_.condition_only_signal_ = value;
}
inline void SignalInformation::set_condition_only_signal(bool value) {
  _internal_set_condition_only_signal(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.SignalInformation.condition_only_signal)
}

// -------------------------------------------------------------------

// RawCanFrame

// string can_interface_id = 1;
inline void RawCanFrame::clear_can_interface_id() {
  _impl_.can_interface_id_.ClearToEmpty();
}
inline const std::string& RawCanFrame::can_interface_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_interface_id)
  return _internal_can_interface_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RawCanFrame::set_can_interface_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.can_interface_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_interface_id)
}
inline std::string* RawCanFrame::mutable_can_interface_id() {
  std::string* _s = _internal_mutable_can_interface_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_interface_id)
  return _s;
}
inline const std::string& RawCanFrame::_internal_can_interface_id() const {
  return _impl_.can_interface_id_.Get();
}
inline void RawCanFrame::_internal_set_can_interface_id(const std::string& value) {
  
  _impl_.can_interface_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RawCanFrame::_internal_mutable_can_interface_id() {
  
  return _impl_.can_interface_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RawCanFrame::release_can_interface_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_interface_id)
  return _impl_.can_interface_id_.Release();
}
inline void RawCanFrame::set_allocated_can_interface_id(std::string* can_interface_id) {
  if (can_interface_id != nullptr) {
    
  } else {
    
  }
  _impl_.can_interface_id_.SetAllocated(can_interface_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.can_interface_id_.IsDefault()) {
    _impl_.can_interface_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_interface_id)
}

// uint32 can_message_id = 2;
inline void RawCanFrame::clear_can_message_id() {
  _impl_.can_message_id_ = 0u;
}
inline uint32_t RawCanFrame::_internal_can_message_id() const {
  return _impl_.can_message_id_;
}
inline uint32_t RawCanFrame::can_message_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_message_id)
  return _internal_can_message_id();
}
inline void RawCanFrame::_internal_set_can_message_id(uint32_t value) {
  
  _impl_.can_message_id_ = value;
}
inline void RawCanFrame::set_can_message_id(uint32_t value) {
  _internal_set_can_message_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.can_message_id)
}

// uint32 sample_buffer_size = 3;
inline void RawCanFrame::clear_sample_buffer_size() {
  _impl_.sample_buffer_size_ = 0u;
}
inline uint32_t RawCanFrame::_internal_sample_buffer_size() const {
  return _impl_.sample_buffer_size_;
}
inline uint32_t RawCanFrame::sample_buffer_size() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.sample_buffer_size)
  return _internal_sample_buffer_size();
}
inline void RawCanFrame::_internal_set_sample_buffer_size(uint32_t value) {
  
  _impl_.sample_buffer_size_ = value;
}
inline void RawCanFrame::set_sample_buffer_size(uint32_t value) {
  _internal_set_sample_buffer_size(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.sample_buffer_size)
}

// uint32 minimum_sample_period_ms = 4;
inline void RawCanFrame::clear_minimum_sample_period_ms() {
  _impl_.minimum_sample_period_ms_ = 0u;
}
inline uint32_t RawCanFrame::_internal_minimum_sample_period_ms() const {
  return _impl_.minimum_sample_period_ms_;
}
inline uint32_t RawCanFrame::minimum_sample_period_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.minimum_sample_period_ms)
  return _internal_minimum_sample_period_ms();
}
inline void RawCanFrame::_internal_set_minimum_sample_period_ms(uint32_t value) {
  
  _impl_.minimum_sample_period_ms_ = value;
}
inline void RawCanFrame::set_minimum_sample_period_ms(uint32_t value) {
  _internal_set_minimum_sample_period_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CollectionSchemesMsg.RawCanFrame.minimum_sample_period_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CollectionSchemesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode>() {
  return ::Aws::IoTFleetWise::Schemas::CollectionSchemesMsg::ConditionBasedCollectionScheme_ConditionTriggerMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_collection_5fschemes_2eproto
