// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_types.proto

#include "common_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CommonTypesMsg {
PROTOBUF_CONSTEXPR PrimitiveTypeInComplexSignal::PrimitiveTypeInComplexSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_path_)*/nullptr
  , /*decltype(_impl_.signal_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrimitiveTypeInComplexSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimitiveTypeInComplexSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimitiveTypeInComplexSignalDefaultTypeInternal() {}
  union {
    PrimitiveTypeInComplexSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimitiveTypeInComplexSignalDefaultTypeInternal _PrimitiveTypeInComplexSignal_default_instance_;
PROTOBUF_CONSTEXPR SignalPath::SignalPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_path_)*/{}
  , /*decltype(_impl_._signal_path_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalPathDefaultTypeInternal() {}
  union {
    SignalPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalPathDefaultTypeInternal _SignalPath_default_instance_;
PROTOBUF_CONSTEXPR ConditionNode_NodeOperator::ConditionNode_NodeOperator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.left_child_)*/nullptr
  , /*decltype(_impl_.right_child_)*/nullptr
  , /*decltype(_impl_.operator__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConditionNode_NodeOperatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionNode_NodeOperatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionNode_NodeOperatorDefaultTypeInternal() {}
  union {
    ConditionNode_NodeOperator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionNode_NodeOperatorDefaultTypeInternal _ConditionNode_NodeOperator_default_instance_;
PROTOBUF_CONSTEXPR ConditionNode_NodeFunction_GeohashFunction::ConditionNode_NodeFunction_GeohashFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_signal_id_)*/0u
  , /*decltype(_impl_.longitude_signal_id_)*/0u
  , /*decltype(_impl_.geohash_precision_)*/0u
  , /*decltype(_impl_.gps_unit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConditionNode_NodeFunction_GeohashFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionNode_NodeFunction_GeohashFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionNode_NodeFunction_GeohashFunctionDefaultTypeInternal() {}
  union {
    ConditionNode_NodeFunction_GeohashFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionNode_NodeFunction_GeohashFunctionDefaultTypeInternal _ConditionNode_NodeFunction_GeohashFunction_default_instance_;
PROTOBUF_CONSTEXPR ConditionNode_NodeFunction_WindowFunction::ConditionNode_NodeFunction_WindowFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.window_type_)*/0
  , /*decltype(_impl_.primitiveTypes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConditionNode_NodeFunction_WindowFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionNode_NodeFunction_WindowFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionNode_NodeFunction_WindowFunctionDefaultTypeInternal() {}
  union {
    ConditionNode_NodeFunction_WindowFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionNode_NodeFunction_WindowFunctionDefaultTypeInternal _ConditionNode_NodeFunction_WindowFunction_default_instance_;
PROTOBUF_CONSTEXPR ConditionNode_NodeFunction::ConditionNode_NodeFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.functionType_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConditionNode_NodeFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionNode_NodeFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionNode_NodeFunctionDefaultTypeInternal() {}
  union {
    ConditionNode_NodeFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionNode_NodeFunctionDefaultTypeInternal _ConditionNode_NodeFunction_default_instance_;
PROTOBUF_CONSTEXPR ConditionNode::ConditionNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ConditionNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionNodeDefaultTypeInternal() {}
  union {
    ConditionNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionNodeDefaultTypeInternal _ConditionNode_default_instance_;
}  // namespace CommonTypesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
static ::_pb::Metadata file_level_metadata_common_5ftypes_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_5ftypes_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_5ftypes_2eproto = nullptr;

const uint32_t TableStruct_common_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal, _impl_.signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal, _impl_.signal_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath, _impl_.signal_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator, _impl_.left_child_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator, _impl_.right_child_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator, _impl_.operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction, _impl_.latitude_signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction, _impl_.longitude_signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction, _impl_.geohash_precision_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction, _impl_.gps_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction, _impl_.window_type_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction, _impl_.primitiveTypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction, _impl_.functionType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode, _impl_.node_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal)},
  { 8, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath)},
  { 15, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator)},
  { 24, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction)},
  { 34, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction)},
  { 44, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction)},
  { 53, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_PrimitiveTypeInComplexSignal_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_SignalPath_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeOperator_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeFunction_GeohashFunction_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeFunction_WindowFunction_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_NodeFunction_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::CommonTypesMsg::_ConditionNode_default_instance_._instance,
};

const char descriptor_table_protodef_common_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022common_types.proto\022\'Aws.IoTFleetWise.S"
  "chemas.CommonTypesMsg\"{\n\034PrimitiveTypeIn"
  "ComplexSignal\022\021\n\tsignal_id\030\001 \001(\r\022H\n\013sign"
  "al_path\030\002 \001(\01323.Aws.IoTFleetWise.Schemas"
  ".CommonTypesMsg.SignalPath\"!\n\nSignalPath"
  "\022\023\n\013signal_path\030\001 \003(\r\"\257\017\n\rConditionNode\022"
  "\\\n\rnode_operator\030\001 \001(\0132C.Aws.IoTFleetWis"
  "e.Schemas.CommonTypesMsg.ConditionNode.N"
  "odeOperatorH\000\022\\\n\rnode_function\030\002 \001(\0132C.A"
  "ws.IoTFleetWise.Schemas.CommonTypesMsg.C"
  "onditionNode.NodeFunctionH\000\022\033\n\021node_doub"
  "le_value\030\003 \001(\001H\000\022\030\n\016node_signal_id\030\004 \001(\r"
  "H\000\022\034\n\022node_boolean_value\030\005 \001(\010H\000\022n\n\035node"
  "_primitive_type_in_signal\030\006 \001(\0132E.Aws.Io"
  "TFleetWise.Schemas.CommonTypesMsg.Primit"
  "iveTypeInComplexSignalH\000\032\251\004\n\014NodeOperato"
  "r\022J\n\nleft_child\030\001 \001(\01326.Aws.IoTFleetWise"
  ".Schemas.CommonTypesMsg.ConditionNode\022K\n"
  "\013right_child\030\002 \001(\01326.Aws.IoTFleetWise.Sc"
  "hemas.CommonTypesMsg.ConditionNode\022^\n\010op"
  "erator\030\003 \001(\0162L.Aws.IoTFleetWise.Schemas."
  "CommonTypesMsg.ConditionNode.NodeOperato"
  "r.Operator\"\237\002\n\010Operator\022\023\n\017COMPARE_SMALL"
  "ER\020\000\022\022\n\016COMPARE_BIGGER\020\001\022\031\n\025COMPARE_SMAL"
  "LER_EQUAL\020\002\022\030\n\024COMPARE_BIGGER_EQUAL\020\003\022\021\n"
  "\rCOMPARE_EQUAL\020\004\022\025\n\021COMPARE_NOT_EQUAL\020\005\022"
  "\017\n\013LOGICAL_AND\020\006\022\016\n\nLOGICAL_OR\020\007\022\017\n\013LOGI"
  "CAL_NOT\020\010\022\023\n\017ARITHMETIC_PLUS\020\t\022\024\n\020ARITHM"
  "ETIC_MINUS\020\n\022\027\n\023ARITHMETIC_MULTIPLY\020\013\022\025\n"
  "\021ARITHMETIC_DIVIDE\020\014\032\350\007\n\014NodeFunction\022m\n"
  "\017window_function\030\001 \001(\0132R.Aws.IoTFleetWis"
  "e.Schemas.CommonTypesMsg.ConditionNode.N"
  "odeFunction.WindowFunctionH\000\022o\n\020geohash_"
  "function\030\002 \001(\0132S.Aws.IoTFleetWise.Schema"
  "s.CommonTypesMsg.ConditionNode.NodeFunct"
  "ion.GeohashFunctionH\000\032\262\002\n\017GeohashFunctio"
  "n\022\032\n\022latitude_signal_id\030\001 \001(\r\022\033\n\023longitu"
  "de_signal_id\030\002 \001(\r\022\031\n\021geohash_precision\030"
  "\003 \001(\r\022q\n\010gps_unit\030\004 \001(\0162_.Aws.IoTFleetWi"
  "se.Schemas.CommonTypesMsg.ConditionNode."
  "NodeFunction.GeohashFunction.GPSUnitType"
  "\"X\n\013GPSUnitType\022\022\n\016DECIMAL_DEGREE\020\000\022\022\n\016M"
  "ICROARCSECOND\020\001\022\022\n\016MILLIARCSECOND\020\002\022\r\n\tA"
  "RCSECOND\020\003\032\262\003\n\016WindowFunction\022\023\n\tsignal_"
  "id\030\001 \001(\rH\000\022i\n\030primitive_type_in_signal\030\003"
  " \001(\0132E.Aws.IoTFleetWise.Schemas.CommonTy"
  "pesMsg.PrimitiveTypeInComplexSignalH\000\022r\n"
  "\013window_type\030\002 \001(\0162].Aws.IoTFleetWise.Sc"
  "hemas.CommonTypesMsg.ConditionNode.NodeF"
  "unction.WindowFunction.WindowType\"\231\001\n\nWi"
  "ndowType\022\023\n\017LAST_WINDOW_MIN\020\000\022\023\n\017LAST_WI"
  "NDOW_MAX\020\001\022\023\n\017LAST_WINDOW_AVG\020\002\022\030\n\024PREV_"
  "LAST_WINDOW_MIN\020\003\022\030\n\024PREV_LAST_WINDOW_MA"
  "X\020\004\022\030\n\024PREV_LAST_WINDOW_AVG\020\005B\020\n\016primiti"
  "veTypesB\016\n\014functionTypeB\006\n\004nodeB$\n\"com.a"
  "mazonaws.iot.autobahn.schemasb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_common_5ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_5ftypes_2eproto = {
    false, false, 2237, descriptor_table_protodef_common_5ftypes_2eproto,
    "common_types.proto",
    &descriptor_table_common_5ftypes_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_common_5ftypes_2eproto::offsets,
    file_level_metadata_common_5ftypes_2eproto, file_level_enum_descriptors_common_5ftypes_2eproto,
    file_level_service_descriptors_common_5ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_5ftypes_2eproto_getter() {
  return &descriptor_table_common_5ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_5ftypes_2eproto(&descriptor_table_common_5ftypes_2eproto);
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CommonTypesMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionNode_NodeOperator_Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5ftypes_2eproto);
  return file_level_enum_descriptors_common_5ftypes_2eproto[0];
}
bool ConditionNode_NodeOperator_Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::COMPARE_SMALLER;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::COMPARE_BIGGER;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::COMPARE_SMALLER_EQUAL;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::COMPARE_BIGGER_EQUAL;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::COMPARE_EQUAL;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::COMPARE_NOT_EQUAL;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::LOGICAL_AND;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::LOGICAL_OR;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::LOGICAL_NOT;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::ARITHMETIC_PLUS;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::ARITHMETIC_MINUS;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::ARITHMETIC_MULTIPLY;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::ARITHMETIC_DIVIDE;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::Operator_MIN;
constexpr ConditionNode_NodeOperator_Operator ConditionNode_NodeOperator::Operator_MAX;
constexpr int ConditionNode_NodeOperator::Operator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5ftypes_2eproto);
  return file_level_enum_descriptors_common_5ftypes_2eproto[1];
}
bool ConditionNode_NodeFunction_GeohashFunction_GPSUnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::DECIMAL_DEGREE;
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::MICROARCSECOND;
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::MILLIARCSECOND;
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::ARCSECOND;
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::GPSUnitType_MIN;
constexpr ConditionNode_NodeFunction_GeohashFunction_GPSUnitType ConditionNode_NodeFunction_GeohashFunction::GPSUnitType_MAX;
constexpr int ConditionNode_NodeFunction_GeohashFunction::GPSUnitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionNode_NodeFunction_WindowFunction_WindowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_5ftypes_2eproto);
  return file_level_enum_descriptors_common_5ftypes_2eproto[2];
}
bool ConditionNode_NodeFunction_WindowFunction_WindowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::LAST_WINDOW_MIN;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::LAST_WINDOW_MAX;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::LAST_WINDOW_AVG;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::PREV_LAST_WINDOW_MIN;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::PREV_LAST_WINDOW_MAX;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::PREV_LAST_WINDOW_AVG;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::WindowType_MIN;
constexpr ConditionNode_NodeFunction_WindowFunction_WindowType ConditionNode_NodeFunction_WindowFunction::WindowType_MAX;
constexpr int ConditionNode_NodeFunction_WindowFunction::WindowType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PrimitiveTypeInComplexSignal::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath& signal_path(const PrimitiveTypeInComplexSignal* msg);
};

const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath&
PrimitiveTypeInComplexSignal::_Internal::signal_path(const PrimitiveTypeInComplexSignal* msg) {
  return *msg->_impl_.signal_path_;
}
PrimitiveTypeInComplexSignal::PrimitiveTypeInComplexSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
}
PrimitiveTypeInComplexSignal::PrimitiveTypeInComplexSignal(const PrimitiveTypeInComplexSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimitiveTypeInComplexSignal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){nullptr}
    , decltype(_impl_.signal_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signal_path()) {
    _this->_impl_.signal_path_ = new ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath(*from._impl_.signal_path_);
  }
  _this->_impl_.signal_id_ = from._impl_.signal_id_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
}

inline void PrimitiveTypeInComplexSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){nullptr}
    , decltype(_impl_.signal_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrimitiveTypeInComplexSignal::~PrimitiveTypeInComplexSignal() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimitiveTypeInComplexSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signal_path_;
}

void PrimitiveTypeInComplexSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimitiveTypeInComplexSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.signal_path_ != nullptr) {
    delete _impl_.signal_path_;
  }
  _impl_.signal_path_ = nullptr;
  _impl_.signal_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveTypeInComplexSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimitiveTypeInComplexSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_id(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 2;
  if (this->_internal_has_signal_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signal_path(this),
        _Internal::signal_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
  return target;
}

size_t PrimitiveTypeInComplexSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath signal_path = 2;
  if (this->_internal_has_signal_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signal_path_);
  }

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimitiveTypeInComplexSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimitiveTypeInComplexSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimitiveTypeInComplexSignal::GetClassData() const { return &_class_data_; }


void PrimitiveTypeInComplexSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimitiveTypeInComplexSignal*>(&to_msg);
  auto& from = static_cast<const PrimitiveTypeInComplexSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signal_path()) {
    _this->_internal_mutable_signal_path()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath::MergeFrom(
        from._internal_signal_path());
  }
  if (from._internal_signal_id() != 0) {
    _this->_internal_set_signal_id(from._internal_signal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimitiveTypeInComplexSignal::CopyFrom(const PrimitiveTypeInComplexSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveTypeInComplexSignal::IsInitialized() const {
  return true;
}

void PrimitiveTypeInComplexSignal::InternalSwap(PrimitiveTypeInComplexSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimitiveTypeInComplexSignal, _impl_.signal_id_)
      + sizeof(PrimitiveTypeInComplexSignal::_impl_.signal_id_)
      - PROTOBUF_FIELD_OFFSET(PrimitiveTypeInComplexSignal, _impl_.signal_path_)>(
          reinterpret_cast<char*>(&_impl_.signal_path_),
          reinterpret_cast<char*>(&other->_impl_.signal_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveTypeInComplexSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_5ftypes_2eproto_getter, &descriptor_table_common_5ftypes_2eproto_once,
      file_level_metadata_common_5ftypes_2eproto[0]);
}

// ===================================================================

class SignalPath::_Internal {
 public:
};

SignalPath::SignalPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
}
SignalPath::SignalPath(const SignalPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){from._impl_.signal_path_}
    , /*decltype(_impl_._signal_path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
}

inline void SignalPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){arena}
    , /*decltype(_impl_._signal_path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalPath::~SignalPath() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_path_.~RepeatedField();
}

void SignalPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalPath::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 signal_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_signal_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_signal_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 signal_path = 1;
  {
    int byte_size = _impl_._signal_path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_signal_path(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
  return target;
}

size_t SignalPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 signal_path = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.signal_path_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._signal_path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalPath::GetClassData() const { return &_class_data_; }


void SignalPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalPath*>(&to_msg);
  auto& from = static_cast<const SignalPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signal_path_.MergeFrom(from._impl_.signal_path_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalPath::CopyFrom(const SignalPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.SignalPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalPath::IsInitialized() const {
  return true;
}

void SignalPath::InternalSwap(SignalPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signal_path_.InternalSwap(&other->_impl_.signal_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_5ftypes_2eproto_getter, &descriptor_table_common_5ftypes_2eproto_once,
      file_level_metadata_common_5ftypes_2eproto[1]);
}

// ===================================================================

class ConditionNode_NodeOperator::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& left_child(const ConditionNode_NodeOperator* msg);
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode& right_child(const ConditionNode_NodeOperator* msg);
};

const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode&
ConditionNode_NodeOperator::_Internal::left_child(const ConditionNode_NodeOperator* msg) {
  return *msg->_impl_.left_child_;
}
const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode&
ConditionNode_NodeOperator::_Internal::right_child(const ConditionNode_NodeOperator* msg) {
  return *msg->_impl_.right_child_;
}
ConditionNode_NodeOperator::ConditionNode_NodeOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
}
ConditionNode_NodeOperator::ConditionNode_NodeOperator(const ConditionNode_NodeOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionNode_NodeOperator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.left_child_){nullptr}
    , decltype(_impl_.right_child_){nullptr}
    , decltype(_impl_.operator__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_child()) {
    _this->_impl_.left_child_ = new ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode(*from._impl_.left_child_);
  }
  if (from._internal_has_right_child()) {
    _this->_impl_.right_child_ = new ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode(*from._impl_.right_child_);
  }
  _this->_impl_.operator__ = from._impl_.operator__;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
}

inline void ConditionNode_NodeOperator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.left_child_){nullptr}
    , decltype(_impl_.right_child_){nullptr}
    , decltype(_impl_.operator__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConditionNode_NodeOperator::~ConditionNode_NodeOperator() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionNode_NodeOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.left_child_;
  if (this != internal_default_instance()) delete _impl_.right_child_;
}

void ConditionNode_NodeOperator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionNode_NodeOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.left_child_ != nullptr) {
    delete _impl_.left_child_;
  }
  _impl_.left_child_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_child_ != nullptr) {
    delete _impl_.right_child_;
  }
  _impl_.right_child_ = nullptr;
  _impl_.operator__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionNode_NodeOperator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode left_child = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode right_child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.Operator operator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator_Operator>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionNode_NodeOperator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode left_child = 1;
  if (this->_internal_has_left_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::left_child(this),
        _Internal::left_child(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode right_child = 2;
  if (this->_internal_has_right_child()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::right_child(this),
        _Internal::right_child(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.Operator operator = 3;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
  return target;
}

size_t ConditionNode_NodeOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode left_child = 1;
  if (this->_internal_has_left_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_child_);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode right_child = 2;
  if (this->_internal_has_right_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_child_);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator.Operator operator = 3;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionNode_NodeOperator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionNode_NodeOperator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionNode_NodeOperator::GetClassData() const { return &_class_data_; }


void ConditionNode_NodeOperator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionNode_NodeOperator*>(&to_msg);
  auto& from = static_cast<const ConditionNode_NodeOperator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_left_child()) {
    _this->_internal_mutable_left_child()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode::MergeFrom(
        from._internal_left_child());
  }
  if (from._internal_has_right_child()) {
    _this->_internal_mutable_right_child()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode::MergeFrom(
        from._internal_right_child());
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionNode_NodeOperator::CopyFrom(const ConditionNode_NodeOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionNode_NodeOperator::IsInitialized() const {
  return true;
}

void ConditionNode_NodeOperator::InternalSwap(ConditionNode_NodeOperator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionNode_NodeOperator, _impl_.operator__)
      + sizeof(ConditionNode_NodeOperator::_impl_.operator__)
      - PROTOBUF_FIELD_OFFSET(ConditionNode_NodeOperator, _impl_.left_child_)>(
          reinterpret_cast<char*>(&_impl_.left_child_),
          reinterpret_cast<char*>(&other->_impl_.left_child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionNode_NodeOperator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_5ftypes_2eproto_getter, &descriptor_table_common_5ftypes_2eproto_once,
      file_level_metadata_common_5ftypes_2eproto[2]);
}

// ===================================================================

class ConditionNode_NodeFunction_GeohashFunction::_Internal {
 public:
};

ConditionNode_NodeFunction_GeohashFunction::ConditionNode_NodeFunction_GeohashFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
}
ConditionNode_NodeFunction_GeohashFunction::ConditionNode_NodeFunction_GeohashFunction(const ConditionNode_NodeFunction_GeohashFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionNode_NodeFunction_GeohashFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_signal_id_){}
    , decltype(_impl_.longitude_signal_id_){}
    , decltype(_impl_.geohash_precision_){}
    , decltype(_impl_.gps_unit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_signal_id_, &from._impl_.latitude_signal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gps_unit_) -
    reinterpret_cast<char*>(&_impl_.latitude_signal_id_)) + sizeof(_impl_.gps_unit_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
}

inline void ConditionNode_NodeFunction_GeohashFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_signal_id_){0u}
    , decltype(_impl_.longitude_signal_id_){0u}
    , decltype(_impl_.geohash_precision_){0u}
    , decltype(_impl_.gps_unit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConditionNode_NodeFunction_GeohashFunction::~ConditionNode_NodeFunction_GeohashFunction() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionNode_NodeFunction_GeohashFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConditionNode_NodeFunction_GeohashFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionNode_NodeFunction_GeohashFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_signal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gps_unit_) -
      reinterpret_cast<char*>(&_impl_.latitude_signal_id_)) + sizeof(_impl_.gps_unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionNode_NodeFunction_GeohashFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 latitude_signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.latitude_signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 longitude_signal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.longitude_signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 geohash_precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.geohash_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.GPSUnitType gps_unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gps_unit(static_cast<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction_GPSUnitType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionNode_NodeFunction_GeohashFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 latitude_signal_id = 1;
  if (this->_internal_latitude_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_latitude_signal_id(), target);
  }

  // uint32 longitude_signal_id = 2;
  if (this->_internal_longitude_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_longitude_signal_id(), target);
  }

  // uint32 geohash_precision = 3;
  if (this->_internal_geohash_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_geohash_precision(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.GPSUnitType gps_unit = 4;
  if (this->_internal_gps_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_gps_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
  return target;
}

size_t ConditionNode_NodeFunction_GeohashFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 latitude_signal_id = 1;
  if (this->_internal_latitude_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_latitude_signal_id());
  }

  // uint32 longitude_signal_id = 2;
  if (this->_internal_longitude_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_longitude_signal_id());
  }

  // uint32 geohash_precision = 3;
  if (this->_internal_geohash_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_geohash_precision());
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction.GPSUnitType gps_unit = 4;
  if (this->_internal_gps_unit() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gps_unit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionNode_NodeFunction_GeohashFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionNode_NodeFunction_GeohashFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionNode_NodeFunction_GeohashFunction::GetClassData() const { return &_class_data_; }


void ConditionNode_NodeFunction_GeohashFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionNode_NodeFunction_GeohashFunction*>(&to_msg);
  auto& from = static_cast<const ConditionNode_NodeFunction_GeohashFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_latitude_signal_id() != 0) {
    _this->_internal_set_latitude_signal_id(from._internal_latitude_signal_id());
  }
  if (from._internal_longitude_signal_id() != 0) {
    _this->_internal_set_longitude_signal_id(from._internal_longitude_signal_id());
  }
  if (from._internal_geohash_precision() != 0) {
    _this->_internal_set_geohash_precision(from._internal_geohash_precision());
  }
  if (from._internal_gps_unit() != 0) {
    _this->_internal_set_gps_unit(from._internal_gps_unit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionNode_NodeFunction_GeohashFunction::CopyFrom(const ConditionNode_NodeFunction_GeohashFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionNode_NodeFunction_GeohashFunction::IsInitialized() const {
  return true;
}

void ConditionNode_NodeFunction_GeohashFunction::InternalSwap(ConditionNode_NodeFunction_GeohashFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionNode_NodeFunction_GeohashFunction, _impl_.gps_unit_)
      + sizeof(ConditionNode_NodeFunction_GeohashFunction::_impl_.gps_unit_)
      - PROTOBUF_FIELD_OFFSET(ConditionNode_NodeFunction_GeohashFunction, _impl_.latitude_signal_id_)>(
          reinterpret_cast<char*>(&_impl_.latitude_signal_id_),
          reinterpret_cast<char*>(&other->_impl_.latitude_signal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionNode_NodeFunction_GeohashFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_5ftypes_2eproto_getter, &descriptor_table_common_5ftypes_2eproto_once,
      file_level_metadata_common_5ftypes_2eproto[3]);
}

// ===================================================================

class ConditionNode_NodeFunction_WindowFunction::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& primitive_type_in_signal(const ConditionNode_NodeFunction_WindowFunction* msg);
};

const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal&
ConditionNode_NodeFunction_WindowFunction::_Internal::primitive_type_in_signal(const ConditionNode_NodeFunction_WindowFunction* msg) {
  return *msg->_impl_.primitiveTypes_.primitive_type_in_signal_;
}
void ConditionNode_NodeFunction_WindowFunction::set_allocated_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* primitive_type_in_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_primitiveTypes();
  if (primitive_type_in_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primitive_type_in_signal);
    if (message_arena != submessage_arena) {
      primitive_type_in_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primitive_type_in_signal, submessage_arena);
    }
    set_has_primitive_type_in_signal();
    _impl_.primitiveTypes_.primitive_type_in_signal_ = primitive_type_in_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.primitive_type_in_signal)
}
ConditionNode_NodeFunction_WindowFunction::ConditionNode_NodeFunction_WindowFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
}
ConditionNode_NodeFunction_WindowFunction::ConditionNode_NodeFunction_WindowFunction(const ConditionNode_NodeFunction_WindowFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionNode_NodeFunction_WindowFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){}
    , decltype(_impl_.primitiveTypes_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.window_type_ = from._impl_.window_type_;
  clear_has_primitiveTypes();
  switch (from.primitiveTypes_case()) {
    case kSignalId: {
      _this->_internal_set_signal_id(from._internal_signal_id());
      break;
    }
    case kPrimitiveTypeInSignal: {
      _this->_internal_mutable_primitive_type_in_signal()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal::MergeFrom(
          from._internal_primitive_type_in_signal());
      break;
    }
    case PRIMITIVETYPES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
}

inline void ConditionNode_NodeFunction_WindowFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.window_type_){0}
    , decltype(_impl_.primitiveTypes_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_primitiveTypes();
}

ConditionNode_NodeFunction_WindowFunction::~ConditionNode_NodeFunction_WindowFunction() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionNode_NodeFunction_WindowFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_primitiveTypes()) {
    clear_primitiveTypes();
  }
}

void ConditionNode_NodeFunction_WindowFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionNode_NodeFunction_WindowFunction::clear_primitiveTypes() {
// @@protoc_insertion_point(one_of_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  switch (primitiveTypes_case()) {
    case kSignalId: {
      // No need to clear
      break;
    }
    case kPrimitiveTypeInSignal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.primitiveTypes_.primitive_type_in_signal_;
      }
      break;
    }
    case PRIMITIVETYPES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PRIMITIVETYPES_NOT_SET;
}


void ConditionNode_NodeFunction_WindowFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.window_type_ = 0;
  clear_primitiveTypes();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionNode_NodeFunction_WindowFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_signal_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.WindowType window_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_window_type(static_cast<::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction_WindowType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal primitive_type_in_signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_primitive_type_in_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionNode_NodeFunction_WindowFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal_id = 1;
  if (_internal_has_signal_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_id(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.WindowType window_type = 2;
  if (this->_internal_window_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_window_type(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal primitive_type_in_signal = 3;
  if (_internal_has_primitive_type_in_signal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::primitive_type_in_signal(this),
        _Internal::primitive_type_in_signal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  return target;
}

size_t ConditionNode_NodeFunction_WindowFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction.WindowType window_type = 2;
  if (this->_internal_window_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_window_type());
  }

  switch (primitiveTypes_case()) {
    // uint32 signal_id = 1;
    case kSignalId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
      break;
    }
    // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal primitive_type_in_signal = 3;
    case kPrimitiveTypeInSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primitiveTypes_.primitive_type_in_signal_);
      break;
    }
    case PRIMITIVETYPES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionNode_NodeFunction_WindowFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionNode_NodeFunction_WindowFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionNode_NodeFunction_WindowFunction::GetClassData() const { return &_class_data_; }


void ConditionNode_NodeFunction_WindowFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionNode_NodeFunction_WindowFunction*>(&to_msg);
  auto& from = static_cast<const ConditionNode_NodeFunction_WindowFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_window_type() != 0) {
    _this->_internal_set_window_type(from._internal_window_type());
  }
  switch (from.primitiveTypes_case()) {
    case kSignalId: {
      _this->_internal_set_signal_id(from._internal_signal_id());
      break;
    }
    case kPrimitiveTypeInSignal: {
      _this->_internal_mutable_primitive_type_in_signal()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal::MergeFrom(
          from._internal_primitive_type_in_signal());
      break;
    }
    case PRIMITIVETYPES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionNode_NodeFunction_WindowFunction::CopyFrom(const ConditionNode_NodeFunction_WindowFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionNode_NodeFunction_WindowFunction::IsInitialized() const {
  return true;
}

void ConditionNode_NodeFunction_WindowFunction::InternalSwap(ConditionNode_NodeFunction_WindowFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.window_type_, other->_impl_.window_type_);
  swap(_impl_.primitiveTypes_, other->_impl_.primitiveTypes_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionNode_NodeFunction_WindowFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_5ftypes_2eproto_getter, &descriptor_table_common_5ftypes_2eproto_once,
      file_level_metadata_common_5ftypes_2eproto[4]);
}

// ===================================================================

class ConditionNode_NodeFunction::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction& window_function(const ConditionNode_NodeFunction* msg);
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction& geohash_function(const ConditionNode_NodeFunction* msg);
};

const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction&
ConditionNode_NodeFunction::_Internal::window_function(const ConditionNode_NodeFunction* msg) {
  return *msg->_impl_.functionType_.window_function_;
}
const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction&
ConditionNode_NodeFunction::_Internal::geohash_function(const ConditionNode_NodeFunction* msg) {
  return *msg->_impl_.functionType_.geohash_function_;
}
void ConditionNode_NodeFunction::set_allocated_window_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction* window_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_functionType();
  if (window_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window_function);
    if (message_arena != submessage_arena) {
      window_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_function, submessage_arena);
    }
    set_has_window_function();
    _impl_.functionType_.window_function_ = window_function;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.window_function)
}
void ConditionNode_NodeFunction::set_allocated_geohash_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction* geohash_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_functionType();
  if (geohash_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(geohash_function);
    if (message_arena != submessage_arena) {
      geohash_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geohash_function, submessage_arena);
    }
    set_has_geohash_function();
    _impl_.functionType_.geohash_function_ = geohash_function;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.geohash_function)
}
ConditionNode_NodeFunction::ConditionNode_NodeFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
}
ConditionNode_NodeFunction::ConditionNode_NodeFunction(const ConditionNode_NodeFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionNode_NodeFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.functionType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_functionType();
  switch (from.functionType_case()) {
    case kWindowFunction: {
      _this->_internal_mutable_window_function()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction::MergeFrom(
          from._internal_window_function());
      break;
    }
    case kGeohashFunction: {
      _this->_internal_mutable_geohash_function()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction::MergeFrom(
          from._internal_geohash_function());
      break;
    }
    case FUNCTIONTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
}

inline void ConditionNode_NodeFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.functionType_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_functionType();
}

ConditionNode_NodeFunction::~ConditionNode_NodeFunction() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionNode_NodeFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_functionType()) {
    clear_functionType();
  }
}

void ConditionNode_NodeFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionNode_NodeFunction::clear_functionType() {
// @@protoc_insertion_point(one_of_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  switch (functionType_case()) {
    case kWindowFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.functionType_.window_function_;
      }
      break;
    }
    case kGeohashFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.functionType_.geohash_function_;
      }
      break;
    }
    case FUNCTIONTYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = FUNCTIONTYPE_NOT_SET;
}


void ConditionNode_NodeFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_functionType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionNode_NodeFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction window_function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction geohash_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geohash_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionNode_NodeFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction window_function = 1;
  if (_internal_has_window_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::window_function(this),
        _Internal::window_function(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction geohash_function = 2;
  if (_internal_has_geohash_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::geohash_function(this),
        _Internal::geohash_function(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  return target;
}

size_t ConditionNode_NodeFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (functionType_case()) {
    // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.WindowFunction window_function = 1;
    case kWindowFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.functionType_.window_function_);
      break;
    }
    // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction.GeohashFunction geohash_function = 2;
    case kGeohashFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.functionType_.geohash_function_);
      break;
    }
    case FUNCTIONTYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionNode_NodeFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionNode_NodeFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionNode_NodeFunction::GetClassData() const { return &_class_data_; }


void ConditionNode_NodeFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionNode_NodeFunction*>(&to_msg);
  auto& from = static_cast<const ConditionNode_NodeFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.functionType_case()) {
    case kWindowFunction: {
      _this->_internal_mutable_window_function()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction::MergeFrom(
          from._internal_window_function());
      break;
    }
    case kGeohashFunction: {
      _this->_internal_mutable_geohash_function()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction::MergeFrom(
          from._internal_geohash_function());
      break;
    }
    case FUNCTIONTYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionNode_NodeFunction::CopyFrom(const ConditionNode_NodeFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionNode_NodeFunction::IsInitialized() const {
  return true;
}

void ConditionNode_NodeFunction::InternalSwap(ConditionNode_NodeFunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.functionType_, other->_impl_.functionType_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionNode_NodeFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_5ftypes_2eproto_getter, &descriptor_table_common_5ftypes_2eproto_once,
      file_level_metadata_common_5ftypes_2eproto[5]);
}

// ===================================================================

class ConditionNode::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator& node_operator(const ConditionNode* msg);
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction& node_function(const ConditionNode* msg);
  static const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal& node_primitive_type_in_signal(const ConditionNode* msg);
};

const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator&
ConditionNode::_Internal::node_operator(const ConditionNode* msg) {
  return *msg->_impl_.node_.node_operator_;
}
const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction&
ConditionNode::_Internal::node_function(const ConditionNode* msg) {
  return *msg->_impl_.node_.node_function_;
}
const ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal&
ConditionNode::_Internal::node_primitive_type_in_signal(const ConditionNode* msg) {
  return *msg->_impl_.node_.node_primitive_type_in_signal_;
}
void ConditionNode::set_allocated_node_operator(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator* node_operator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (node_operator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node_operator);
    if (message_arena != submessage_arena) {
      node_operator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_operator, submessage_arena);
    }
    set_has_node_operator();
    _impl_.node_.node_operator_ = node_operator;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_operator)
}
void ConditionNode::set_allocated_node_function(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction* node_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (node_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node_function);
    if (message_arena != submessage_arena) {
      node_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_function, submessage_arena);
    }
    set_has_node_function();
    _impl_.node_.node_function_ = node_function;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_function)
}
void ConditionNode::set_allocated_node_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal* node_primitive_type_in_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (node_primitive_type_in_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node_primitive_type_in_signal);
    if (message_arena != submessage_arena) {
      node_primitive_type_in_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_primitive_type_in_signal, submessage_arena);
    }
    set_has_node_primitive_type_in_signal();
    _impl_.node_.node_primitive_type_in_signal_ = node_primitive_type_in_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.node_primitive_type_in_signal)
}
ConditionNode::ConditionNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
}
ConditionNode::ConditionNode(const ConditionNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kNodeOperator: {
      _this->_internal_mutable_node_operator()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator::MergeFrom(
          from._internal_node_operator());
      break;
    }
    case kNodeFunction: {
      _this->_internal_mutable_node_function()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction::MergeFrom(
          from._internal_node_function());
      break;
    }
    case kNodeDoubleValue: {
      _this->_internal_set_node_double_value(from._internal_node_double_value());
      break;
    }
    case kNodeSignalId: {
      _this->_internal_set_node_signal_id(from._internal_node_signal_id());
      break;
    }
    case kNodeBooleanValue: {
      _this->_internal_set_node_boolean_value(from._internal_node_boolean_value());
      break;
    }
    case kNodePrimitiveTypeInSignal: {
      _this->_internal_mutable_node_primitive_type_in_signal()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal::MergeFrom(
          from._internal_node_primitive_type_in_signal());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
}

inline void ConditionNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

ConditionNode::~ConditionNode() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void ConditionNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  switch (node_case()) {
    case kNodeOperator: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.node_operator_;
      }
      break;
    }
    case kNodeFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.node_function_;
      }
      break;
    }
    case kNodeDoubleValue: {
      // No need to clear
      break;
    }
    case kNodeSignalId: {
      // No need to clear
      break;
    }
    case kNodeBooleanValue: {
      // No need to clear
      break;
    }
    case kNodePrimitiveTypeInSignal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.node_primitive_type_in_signal_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void ConditionNode::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_node();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator node_operator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_operator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction node_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double node_double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_node_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 node_signal_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_node_signal_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool node_boolean_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_node_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal node_primitive_type_in_signal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_primitive_type_in_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator node_operator = 1;
  if (_internal_has_node_operator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::node_operator(this),
        _Internal::node_operator(this).GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction node_function = 2;
  if (_internal_has_node_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::node_function(this),
        _Internal::node_function(this).GetCachedSize(), target, stream);
  }

  // double node_double_value = 3;
  if (_internal_has_node_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_node_double_value(), target);
  }

  // uint32 node_signal_id = 4;
  if (_internal_has_node_signal_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_node_signal_id(), target);
  }

  // bool node_boolean_value = 5;
  if (_internal_has_node_boolean_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_node_boolean_value(), target);
  }

  // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal node_primitive_type_in_signal = 6;
  if (_internal_has_node_primitive_type_in_signal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::node_primitive_type_in_signal(this),
        _Internal::node_primitive_type_in_signal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  return target;
}

size_t ConditionNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (node_case()) {
    // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeOperator node_operator = 1;
    case kNodeOperator: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_.node_operator_);
      break;
    }
    // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode.NodeFunction node_function = 2;
    case kNodeFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_.node_function_);
      break;
    }
    // double node_double_value = 3;
    case kNodeDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // uint32 node_signal_id = 4;
    case kNodeSignalId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_node_signal_id());
      break;
    }
    // bool node_boolean_value = 5;
    case kNodeBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // .Aws.IoTFleetWise.Schemas.CommonTypesMsg.PrimitiveTypeInComplexSignal node_primitive_type_in_signal = 6;
    case kNodePrimitiveTypeInSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_.node_primitive_type_in_signal_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionNode::GetClassData() const { return &_class_data_; }


void ConditionNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionNode*>(&to_msg);
  auto& from = static_cast<const ConditionNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.node_case()) {
    case kNodeOperator: {
      _this->_internal_mutable_node_operator()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator::MergeFrom(
          from._internal_node_operator());
      break;
    }
    case kNodeFunction: {
      _this->_internal_mutable_node_function()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction::MergeFrom(
          from._internal_node_function());
      break;
    }
    case kNodeDoubleValue: {
      _this->_internal_set_node_double_value(from._internal_node_double_value());
      break;
    }
    case kNodeSignalId: {
      _this->_internal_set_node_signal_id(from._internal_node_signal_id());
      break;
    }
    case kNodeBooleanValue: {
      _this->_internal_set_node_boolean_value(from._internal_node_boolean_value());
      break;
    }
    case kNodePrimitiveTypeInSignal: {
      _this->_internal_mutable_node_primitive_type_in_signal()->::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal::MergeFrom(
          from._internal_node_primitive_type_in_signal());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionNode::CopyFrom(const ConditionNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.CommonTypesMsg.ConditionNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionNode::IsInitialized() const {
  return true;
}

void ConditionNode::InternalSwap(ConditionNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.node_, other->_impl_.node_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_5ftypes_2eproto_getter, &descriptor_table_common_5ftypes_2eproto_once,
      file_level_metadata_common_5ftypes_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CommonTypesMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::PrimitiveTypeInComplexSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::SignalPath >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeOperator >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_GeohashFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction_WindowFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode_NodeFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::CommonTypesMsg::ConditionNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
