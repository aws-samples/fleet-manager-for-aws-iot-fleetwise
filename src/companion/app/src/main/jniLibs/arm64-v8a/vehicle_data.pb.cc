// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_data.proto

#include "vehicle_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace VehicleDataMsg {
PROTOBUF_CONSTEXPR VehicleData::VehicleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.captured_signals_)*/{}
  , /*decltype(_impl_.can_frames_)*/{}
  , /*decltype(_impl_.s3_objects_)*/{}
  , /*decltype(_impl_.campaign_sync_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decoder_sync_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtc_data_)*/nullptr
  , /*decltype(_impl_.geohash_)*/nullptr
  , /*decltype(_impl_.collection_event_time_ms_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.collection_event_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleDataDefaultTypeInternal() {}
  union {
    VehicleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleDataDefaultTypeInternal _VehicleData_default_instance_;
PROTOBUF_CONSTEXPR SignalPath::SignalPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_path_)*/{}
  , /*decltype(_impl_._signal_path_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalPathDefaultTypeInternal() {}
  union {
    SignalPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalPathDefaultTypeInternal _SignalPath_default_instance_;
PROTOBUF_CONSTEXPR PrimitiveTypeInComplexCapturedSignal::PrimitiveTypeInComplexCapturedSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_path_)*/nullptr
  , /*decltype(_impl_.signal_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrimitiveTypeInComplexCapturedSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimitiveTypeInComplexCapturedSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimitiveTypeInComplexCapturedSignalDefaultTypeInternal() {}
  union {
    PrimitiveTypeInComplexCapturedSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimitiveTypeInComplexCapturedSignalDefaultTypeInternal _PrimitiveTypeInComplexCapturedSignal_default_instance_;
PROTOBUF_CONSTEXPR CapturedSignal::CapturedSignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relative_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.primitiveType_)*/{}
  , /*decltype(_impl_.SignalValue_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CapturedSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapturedSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapturedSignalDefaultTypeInternal() {}
  union {
    CapturedSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapturedSignalDefaultTypeInternal _CapturedSignal_default_instance_;
PROTOBUF_CONSTEXPR CanFrame::CanFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.byte_values_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.relative_time_ms_)*/int64_t{0}
  , /*decltype(_impl_.message_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CanFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanFrameDefaultTypeInternal() {}
  union {
    CanFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanFrameDefaultTypeInternal _CanFrame_default_instance_;
PROTOBUF_CONSTEXPR DtcData::DtcData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.active_dtc_codes_)*/{}
  , /*decltype(_impl_.relative_time_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DtcDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DtcDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DtcDataDefaultTypeInternal() {}
  union {
    DtcData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DtcDataDefaultTypeInternal _DtcData_default_instance_;
PROTOBUF_CONSTEXPR Geohash::Geohash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.geohash_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prev_reported_geohash_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GeohashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeohashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeohashDefaultTypeInternal() {}
  union {
    Geohash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeohashDefaultTypeInternal _Geohash_default_instance_;
PROTOBUF_CONSTEXPR S3Object::S3Object(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_format_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S3ObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3ObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3ObjectDefaultTypeInternal() {}
  union {
    S3Object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3ObjectDefaultTypeInternal _S3Object_default_instance_;
}  // namespace VehicleDataMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
static ::_pb::Metadata file_level_metadata_vehicle_5fdata_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_vehicle_5fdata_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fdata_2eproto = nullptr;

const uint32_t TableStruct_vehicle_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.campaign_sync_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.decoder_sync_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.collection_event_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.collection_event_time_ms_epoch_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.captured_signals_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.dtc_data_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.can_frames_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.geohash_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData, _impl_.s3_objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath, _impl_.signal_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal, _impl_.signal_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal, _impl_.signal_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal, _impl_.relative_time_ms_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal, _impl_.primitiveType_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal, _impl_.SignalValue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame, _impl_.relative_time_ms_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame, _impl_.interface_id_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame, _impl_.byte_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData, _impl_.relative_time_ms_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData, _impl_.active_dtc_codes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash, _impl_.geohash_string_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash, _impl_.prev_reported_geohash_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object, _impl_.data_format_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData)},
  { 15, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath)},
  { 22, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal)},
  { 30, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal)},
  { 42, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame)},
  { 52, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData)},
  { 60, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash)},
  { 68, -1, -1, sizeof(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_VehicleData_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_SignalPath_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_PrimitiveTypeInComplexCapturedSignal_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_CapturedSignal_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_CanFrame_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_DtcData_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_Geohash_default_instance_._instance,
  &::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_S3Object_default_instance_._instance,
};

const char descriptor_table_protodef_vehicle_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022vehicle_data.proto\022\'Aws.IoTFleetWise.S"
  "chemas.VehicleDataMsg\"\355\003\n\013VehicleData\022\030\n"
  "\020campaign_sync_id\030\001 \001(\t\022\027\n\017decoder_sync_"
  "id\030\002 \001(\t\022\033\n\023collection_event_id\030\003 \001(\r\022&\n"
  "\036collection_event_time_ms_epoch\030\004 \001(\004\022Q\n"
  "\020captured_signals\030\005 \003(\01327.Aws.IoTFleetWi"
  "se.Schemas.VehicleDataMsg.CapturedSignal"
  "\022B\n\010dtc_data\030\006 \001(\01320.Aws.IoTFleetWise.Sc"
  "hemas.VehicleDataMsg.DtcData\022E\n\ncan_fram"
  "es\030\007 \003(\01321.Aws.IoTFleetWise.Schemas.Vehi"
  "cleDataMsg.CanFrame\022A\n\007geohash\030\010 \001(\01320.A"
  "ws.IoTFleetWise.Schemas.VehicleDataMsg.G"
  "eohash\022E\n\ns3_objects\030\t \003(\01321.Aws.IoTFlee"
  "tWise.Schemas.VehicleDataMsg.S3Object\"!\n"
  "\nSignalPath\022\023\n\013signal_path\030\001 \003(\r\"\203\001\n$Pri"
  "mitiveTypeInComplexCapturedSignal\022\021\n\tsig"
  "nal_id\030\001 \001(\r\022H\n\013signal_path\030\002 \001(\01323.Aws."
  "IoTFleetWise.Schemas.VehicleDataMsg.Sign"
  "alPath\"\352\001\n\016CapturedSignal\022\030\n\020relative_ti"
  "me_ms\030\001 \001(\022\022\023\n\tsignal_id\030\002 \001(\rH\000\022q\n\030prim"
  "itive_type_in_signal\030\n \001(\0132M.Aws.IoTFlee"
  "tWise.Schemas.VehicleDataMsg.PrimitiveTy"
  "peInComplexCapturedSignalH\000\022\026\n\014double_va"
  "lue\030\003 \001(\001H\001B\017\n\rprimitiveTypeB\r\n\013SignalVa"
  "lue\"c\n\010CanFrame\022\030\n\020relative_time_ms\030\001 \001("
  "\022\022\022\n\nmessage_id\030\002 \001(\r\022\024\n\014interface_id\030\003 "
  "\001(\t\022\023\n\013byte_values\030\004 \001(\014\"=\n\007DtcData\022\030\n\020r"
  "elative_time_ms\030\001 \001(\022\022\030\n\020active_dtc_code"
  "s\030\002 \003(\t\"G\n\007Geohash\022\026\n\016geohash_string\030\001 \001"
  "(\t\022$\n\034prev_reported_geohash_string\030\002 \001(\t"
  "\"a\n\010S3Object\022\013\n\003key\030\001 \001(\t\022H\n\013data_format"
  "\030\002 \001(\01623.Aws.IoTFleetWise.Schemas.Vehicl"
  "eDataMsg.DataFormat*.\n\nDataFormat\022\027\n\023UNK"
  "NOWN_DATA_FORMAT\020\000\022\007\n\003CDR\020\001B$\n\"com.amazo"
  "naws.iot.autobahn.schemasb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_vehicle_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vehicle_5fdata_2eproto = {
    false, false, 1393, descriptor_table_protodef_vehicle_5fdata_2eproto,
    "vehicle_data.proto",
    &descriptor_table_vehicle_5fdata_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_vehicle_5fdata_2eproto::offsets,
    file_level_metadata_vehicle_5fdata_2eproto, file_level_enum_descriptors_vehicle_5fdata_2eproto,
    file_level_service_descriptors_vehicle_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vehicle_5fdata_2eproto_getter() {
  return &descriptor_table_vehicle_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vehicle_5fdata_2eproto(&descriptor_table_vehicle_5fdata_2eproto);
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace VehicleDataMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fdata_2eproto);
  return file_level_enum_descriptors_vehicle_5fdata_2eproto[0];
}
bool DataFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VehicleData::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData& dtc_data(const VehicleData* msg);
  static const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash& geohash(const VehicleData* msg);
};

const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData&
VehicleData::_Internal::dtc_data(const VehicleData* msg) {
  return *msg->_impl_.dtc_data_;
}
const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash&
VehicleData::_Internal::geohash(const VehicleData* msg) {
  return *msg->_impl_.geohash_;
}
VehicleData::VehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
}
VehicleData::VehicleData(const VehicleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.captured_signals_){from._impl_.captured_signals_}
    , decltype(_impl_.can_frames_){from._impl_.can_frames_}
    , decltype(_impl_.s3_objects_){from._impl_.s3_objects_}
    , decltype(_impl_.campaign_sync_id_){}
    , decltype(_impl_.decoder_sync_id_){}
    , decltype(_impl_.dtc_data_){nullptr}
    , decltype(_impl_.geohash_){nullptr}
    , decltype(_impl_.collection_event_time_ms_epoch_){}
    , decltype(_impl_.collection_event_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.campaign_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.campaign_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_campaign_sync_id().empty()) {
    _this->_impl_.campaign_sync_id_.Set(from._internal_campaign_sync_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.decoder_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decoder_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_decoder_sync_id().empty()) {
    _this->_impl_.decoder_sync_id_.Set(from._internal_decoder_sync_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dtc_data()) {
    _this->_impl_.dtc_data_ = new ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData(*from._impl_.dtc_data_);
  }
  if (from._internal_has_geohash()) {
    _this->_impl_.geohash_ = new ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash(*from._impl_.geohash_);
  }
  ::memcpy(&_impl_.collection_event_time_ms_epoch_, &from._impl_.collection_event_time_ms_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collection_event_id_) -
    reinterpret_cast<char*>(&_impl_.collection_event_time_ms_epoch_)) + sizeof(_impl_.collection_event_id_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
}

inline void VehicleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.captured_signals_){arena}
    , decltype(_impl_.can_frames_){arena}
    , decltype(_impl_.s3_objects_){arena}
    , decltype(_impl_.campaign_sync_id_){}
    , decltype(_impl_.decoder_sync_id_){}
    , decltype(_impl_.dtc_data_){nullptr}
    , decltype(_impl_.geohash_){nullptr}
    , decltype(_impl_.collection_event_time_ms_epoch_){uint64_t{0u}}
    , decltype(_impl_.collection_event_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.campaign_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.campaign_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.decoder_sync_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decoder_sync_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.captured_signals_.~RepeatedPtrField();
  _impl_.can_frames_.~RepeatedPtrField();
  _impl_.s3_objects_.~RepeatedPtrField();
  _impl_.campaign_sync_id_.Destroy();
  _impl_.decoder_sync_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dtc_data_;
  if (this != internal_default_instance()) delete _impl_.geohash_;
}

void VehicleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.captured_signals_.Clear();
  _impl_.can_frames_.Clear();
  _impl_.s3_objects_.Clear();
  _impl_.campaign_sync_id_.ClearToEmpty();
  _impl_.decoder_sync_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.dtc_data_ != nullptr) {
    delete _impl_.dtc_data_;
  }
  _impl_.dtc_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.geohash_ != nullptr) {
    delete _impl_.geohash_;
  }
  _impl_.geohash_ = nullptr;
  ::memset(&_impl_.collection_event_time_ms_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.collection_event_id_) -
      reinterpret_cast<char*>(&_impl_.collection_event_time_ms_epoch_)) + sizeof(_impl_.collection_event_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string campaign_sync_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_campaign_sync_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.campaign_sync_id"));
        } else
          goto handle_unusual;
        continue;
      // string decoder_sync_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_decoder_sync_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.decoder_sync_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 collection_event_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.collection_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 collection_event_time_ms_epoch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.collection_event_time_ms_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal captured_signals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_captured_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData dtc_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dtc_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame can_frames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_can_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash geohash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_geohash(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object s3_objects = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_s3_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string campaign_sync_id = 1;
  if (!this->_internal_campaign_sync_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_campaign_sync_id().data(), static_cast<int>(this->_internal_campaign_sync_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.campaign_sync_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_campaign_sync_id(), target);
  }

  // string decoder_sync_id = 2;
  if (!this->_internal_decoder_sync_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decoder_sync_id().data(), static_cast<int>(this->_internal_decoder_sync_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.decoder_sync_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_decoder_sync_id(), target);
  }

  // uint32 collection_event_id = 3;
  if (this->_internal_collection_event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_collection_event_id(), target);
  }

  // uint64 collection_event_time_ms_epoch = 4;
  if (this->_internal_collection_event_time_ms_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_collection_event_time_ms_epoch(), target);
  }

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal captured_signals = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_captured_signals_size()); i < n; i++) {
    const auto& repfield = this->_internal_captured_signals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData dtc_data = 6;
  if (this->_internal_has_dtc_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::dtc_data(this),
        _Internal::dtc_data(this).GetCachedSize(), target, stream);
  }

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame can_frames = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_can_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_can_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash geohash = 8;
  if (this->_internal_has_geohash()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::geohash(this),
        _Internal::geohash(this).GetCachedSize(), target, stream);
  }

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object s3_objects = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_s3_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_s3_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
  return target;
}

size_t VehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal captured_signals = 5;
  total_size += 1UL * this->_internal_captured_signals_size();
  for (const auto& msg : this->_impl_.captured_signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame can_frames = 7;
  total_size += 1UL * this->_internal_can_frames_size();
  for (const auto& msg : this->_impl_.can_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object s3_objects = 9;
  total_size += 1UL * this->_internal_s3_objects_size();
  for (const auto& msg : this->_impl_.s3_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string campaign_sync_id = 1;
  if (!this->_internal_campaign_sync_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_campaign_sync_id());
  }

  // string decoder_sync_id = 2;
  if (!this->_internal_decoder_sync_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decoder_sync_id());
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData dtc_data = 6;
  if (this->_internal_has_dtc_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dtc_data_);
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash geohash = 8;
  if (this->_internal_has_geohash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geohash_);
  }

  // uint64 collection_event_time_ms_epoch = 4;
  if (this->_internal_collection_event_time_ms_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_collection_event_time_ms_epoch());
  }

  // uint32 collection_event_id = 3;
  if (this->_internal_collection_event_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_collection_event_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleData::GetClassData() const { return &_class_data_; }


void VehicleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleData*>(&to_msg);
  auto& from = static_cast<const VehicleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.captured_signals_.MergeFrom(from._impl_.captured_signals_);
  _this->_impl_.can_frames_.MergeFrom(from._impl_.can_frames_);
  _this->_impl_.s3_objects_.MergeFrom(from._impl_.s3_objects_);
  if (!from._internal_campaign_sync_id().empty()) {
    _this->_internal_set_campaign_sync_id(from._internal_campaign_sync_id());
  }
  if (!from._internal_decoder_sync_id().empty()) {
    _this->_internal_set_decoder_sync_id(from._internal_decoder_sync_id());
  }
  if (from._internal_has_dtc_data()) {
    _this->_internal_mutable_dtc_data()->::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData::MergeFrom(
        from._internal_dtc_data());
  }
  if (from._internal_has_geohash()) {
    _this->_internal_mutable_geohash()->::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash::MergeFrom(
        from._internal_geohash());
  }
  if (from._internal_collection_event_time_ms_epoch() != 0) {
    _this->_internal_set_collection_event_time_ms_epoch(from._internal_collection_event_time_ms_epoch());
  }
  if (from._internal_collection_event_id() != 0) {
    _this->_internal_set_collection_event_id(from._internal_collection_event_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleData::CopyFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {
  return true;
}

void VehicleData::InternalSwap(VehicleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.captured_signals_.InternalSwap(&other->_impl_.captured_signals_);
  _impl_.can_frames_.InternalSwap(&other->_impl_.can_frames_);
  _impl_.s3_objects_.InternalSwap(&other->_impl_.s3_objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.campaign_sync_id_, lhs_arena,
      &other->_impl_.campaign_sync_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decoder_sync_id_, lhs_arena,
      &other->_impl_.decoder_sync_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleData, _impl_.collection_event_id_)
      + sizeof(VehicleData::_impl_.collection_event_id_)
      - PROTOBUF_FIELD_OFFSET(VehicleData, _impl_.dtc_data_)>(
          reinterpret_cast<char*>(&_impl_.dtc_data_),
          reinterpret_cast<char*>(&other->_impl_.dtc_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[0]);
}

// ===================================================================

class SignalPath::_Internal {
 public:
};

SignalPath::SignalPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
}
SignalPath::SignalPath(const SignalPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignalPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){from._impl_.signal_path_}
    , /*decltype(_impl_._signal_path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
}

inline void SignalPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){arena}
    , /*decltype(_impl_._signal_path_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalPath::~SignalPath() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_path_.~RepeatedField();
}

void SignalPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalPath::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 signal_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_signal_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_signal_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 signal_path = 1;
  {
    int byte_size = _impl_._signal_path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_signal_path(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
  return target;
}

size_t SignalPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 signal_path = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.signal_path_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._signal_path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignalPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalPath::GetClassData() const { return &_class_data_; }


void SignalPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignalPath*>(&to_msg);
  auto& from = static_cast<const SignalPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signal_path_.MergeFrom(from._impl_.signal_path_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalPath::CopyFrom(const SignalPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalPath::IsInitialized() const {
  return true;
}

void SignalPath::InternalSwap(SignalPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signal_path_.InternalSwap(&other->_impl_.signal_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[1]);
}

// ===================================================================

class PrimitiveTypeInComplexCapturedSignal::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath& signal_path(const PrimitiveTypeInComplexCapturedSignal* msg);
};

const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath&
PrimitiveTypeInComplexCapturedSignal::_Internal::signal_path(const PrimitiveTypeInComplexCapturedSignal* msg) {
  return *msg->_impl_.signal_path_;
}
PrimitiveTypeInComplexCapturedSignal::PrimitiveTypeInComplexCapturedSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
}
PrimitiveTypeInComplexCapturedSignal::PrimitiveTypeInComplexCapturedSignal(const PrimitiveTypeInComplexCapturedSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimitiveTypeInComplexCapturedSignal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){nullptr}
    , decltype(_impl_.signal_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signal_path()) {
    _this->_impl_.signal_path_ = new ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath(*from._impl_.signal_path_);
  }
  _this->_impl_.signal_id_ = from._impl_.signal_id_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
}

inline void PrimitiveTypeInComplexCapturedSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_path_){nullptr}
    , decltype(_impl_.signal_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrimitiveTypeInComplexCapturedSignal::~PrimitiveTypeInComplexCapturedSignal() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimitiveTypeInComplexCapturedSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signal_path_;
}

void PrimitiveTypeInComplexCapturedSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimitiveTypeInComplexCapturedSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.signal_path_ != nullptr) {
    delete _impl_.signal_path_;
  }
  _impl_.signal_path_ = nullptr;
  _impl_.signal_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveTypeInComplexCapturedSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath signal_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimitiveTypeInComplexCapturedSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_id(), target);
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath signal_path = 2;
  if (this->_internal_has_signal_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::signal_path(this),
        _Internal::signal_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
  return target;
}

size_t PrimitiveTypeInComplexCapturedSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath signal_path = 2;
  if (this->_internal_has_signal_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.signal_path_);
  }

  // uint32 signal_id = 1;
  if (this->_internal_signal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimitiveTypeInComplexCapturedSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimitiveTypeInComplexCapturedSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimitiveTypeInComplexCapturedSignal::GetClassData() const { return &_class_data_; }


void PrimitiveTypeInComplexCapturedSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimitiveTypeInComplexCapturedSignal*>(&to_msg);
  auto& from = static_cast<const PrimitiveTypeInComplexCapturedSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signal_path()) {
    _this->_internal_mutable_signal_path()->::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath::MergeFrom(
        from._internal_signal_path());
  }
  if (from._internal_signal_id() != 0) {
    _this->_internal_set_signal_id(from._internal_signal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimitiveTypeInComplexCapturedSignal::CopyFrom(const PrimitiveTypeInComplexCapturedSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveTypeInComplexCapturedSignal::IsInitialized() const {
  return true;
}

void PrimitiveTypeInComplexCapturedSignal::InternalSwap(PrimitiveTypeInComplexCapturedSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimitiveTypeInComplexCapturedSignal, _impl_.signal_id_)
      + sizeof(PrimitiveTypeInComplexCapturedSignal::_impl_.signal_id_)
      - PROTOBUF_FIELD_OFFSET(PrimitiveTypeInComplexCapturedSignal, _impl_.signal_path_)>(
          reinterpret_cast<char*>(&_impl_.signal_path_),
          reinterpret_cast<char*>(&other->_impl_.signal_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveTypeInComplexCapturedSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[2]);
}

// ===================================================================

class CapturedSignal::_Internal {
 public:
  static const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal& primitive_type_in_signal(const CapturedSignal* msg);
};

const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal&
CapturedSignal::_Internal::primitive_type_in_signal(const CapturedSignal* msg) {
  return *msg->_impl_.primitiveType_.primitive_type_in_signal_;
}
void CapturedSignal::set_allocated_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* primitive_type_in_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_primitiveType();
  if (primitive_type_in_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primitive_type_in_signal);
    if (message_arena != submessage_arena) {
      primitive_type_in_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primitive_type_in_signal, submessage_arena);
    }
    set_has_primitive_type_in_signal();
    _impl_.primitiveType_.primitive_type_in_signal_ = primitive_type_in_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.primitive_type_in_signal)
}
CapturedSignal::CapturedSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
}
CapturedSignal::CapturedSignal(const CapturedSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CapturedSignal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relative_time_ms_){}
    , decltype(_impl_.primitiveType_){}
    , decltype(_impl_.SignalValue_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.relative_time_ms_ = from._impl_.relative_time_ms_;
  clear_has_primitiveType();
  switch (from.primitiveType_case()) {
    case kSignalId: {
      _this->_internal_set_signal_id(from._internal_signal_id());
      break;
    }
    case kPrimitiveTypeInSignal: {
      _this->_internal_mutable_primitive_type_in_signal()->::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal::MergeFrom(
          from._internal_primitive_type_in_signal());
      break;
    }
    case PRIMITIVETYPE_NOT_SET: {
      break;
    }
  }
  clear_has_SignalValue();
  switch (from.SignalValue_case()) {
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case SIGNALVALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
}

inline void CapturedSignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relative_time_ms_){int64_t{0}}
    , decltype(_impl_.primitiveType_){}
    , decltype(_impl_.SignalValue_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_primitiveType();
  clear_has_SignalValue();
}

CapturedSignal::~CapturedSignal() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CapturedSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_primitiveType()) {
    clear_primitiveType();
  }
  if (has_SignalValue()) {
    clear_SignalValue();
  }
}

void CapturedSignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CapturedSignal::clear_primitiveType() {
// @@protoc_insertion_point(one_of_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  switch (primitiveType_case()) {
    case kSignalId: {
      // No need to clear
      break;
    }
    case kPrimitiveTypeInSignal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.primitiveType_.primitive_type_in_signal_;
      }
      break;
    }
    case PRIMITIVETYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PRIMITIVETYPE_NOT_SET;
}

void CapturedSignal::clear_SignalValue() {
// @@protoc_insertion_point(one_of_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  switch (SignalValue_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case SIGNALVALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = SIGNALVALUE_NOT_SET;
}


void CapturedSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relative_time_ms_ = int64_t{0};
  clear_primitiveType();
  clear_SignalValue();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapturedSignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 relative_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.relative_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 signal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_signal_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal primitive_type_in_signal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_primitive_type_in_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CapturedSignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 relative_time_ms = 1;
  if (this->_internal_relative_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_relative_time_ms(), target);
  }

  // uint32 signal_id = 2;
  if (_internal_has_signal_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_signal_id(), target);
  }

  // double double_value = 3;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_value(), target);
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal primitive_type_in_signal = 10;
  if (_internal_has_primitive_type_in_signal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::primitive_type_in_signal(this),
        _Internal::primitive_type_in_signal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  return target;
}

size_t CapturedSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 relative_time_ms = 1;
  if (this->_internal_relative_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_relative_time_ms());
  }

  switch (primitiveType_case()) {
    // uint32 signal_id = 2;
    case kSignalId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_id());
      break;
    }
    // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal primitive_type_in_signal = 10;
    case kPrimitiveTypeInSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primitiveType_.primitive_type_in_signal_);
      break;
    }
    case PRIMITIVETYPE_NOT_SET: {
      break;
    }
  }
  switch (SignalValue_case()) {
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    case SIGNALVALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapturedSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CapturedSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapturedSignal::GetClassData() const { return &_class_data_; }


void CapturedSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CapturedSignal*>(&to_msg);
  auto& from = static_cast<const CapturedSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_relative_time_ms() != 0) {
    _this->_internal_set_relative_time_ms(from._internal_relative_time_ms());
  }
  switch (from.primitiveType_case()) {
    case kSignalId: {
      _this->_internal_set_signal_id(from._internal_signal_id());
      break;
    }
    case kPrimitiveTypeInSignal: {
      _this->_internal_mutable_primitive_type_in_signal()->::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal::MergeFrom(
          from._internal_primitive_type_in_signal());
      break;
    }
    case PRIMITIVETYPE_NOT_SET: {
      break;
    }
  }
  switch (from.SignalValue_case()) {
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case SIGNALVALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CapturedSignal::CopyFrom(const CapturedSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapturedSignal::IsInitialized() const {
  return true;
}

void CapturedSignal::InternalSwap(CapturedSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.relative_time_ms_, other->_impl_.relative_time_ms_);
  swap(_impl_.primitiveType_, other->_impl_.primitiveType_);
  swap(_impl_.SignalValue_, other->_impl_.SignalValue_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CapturedSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[3]);
}

// ===================================================================

class CanFrame::_Internal {
 public:
};

CanFrame::CanFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
}
CanFrame::CanFrame(const CanFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.byte_values_){}
    , decltype(_impl_.relative_time_ms_){}
    , decltype(_impl_.message_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_id().empty()) {
    _this->_impl_.interface_id_.Set(from._internal_interface_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.byte_values_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.byte_values_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_byte_values().empty()) {
    _this->_impl_.byte_values_.Set(from._internal_byte_values(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.relative_time_ms_, &from._impl_.relative_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_id_) -
    reinterpret_cast<char*>(&_impl_.relative_time_ms_)) + sizeof(_impl_.message_id_));
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
}

inline void CanFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_id_){}
    , decltype(_impl_.byte_values_){}
    , decltype(_impl_.relative_time_ms_){int64_t{0}}
    , decltype(_impl_.message_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.byte_values_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.byte_values_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CanFrame::~CanFrame() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_id_.Destroy();
  _impl_.byte_values_.Destroy();
}

void CanFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_id_.ClearToEmpty();
  _impl_.byte_values_.ClearToEmpty();
  ::memset(&_impl_.relative_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.message_id_) -
      reinterpret_cast<char*>(&_impl_.relative_time_ms_)) + sizeof(_impl_.message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 relative_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.relative_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string interface_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_interface_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.interface_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes byte_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_byte_values();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 relative_time_ms = 1;
  if (this->_internal_relative_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_relative_time_ms(), target);
  }

  // uint32 message_id = 2;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_message_id(), target);
  }

  // string interface_id = 3;
  if (!this->_internal_interface_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_id().data(), static_cast<int>(this->_internal_interface_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.interface_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_interface_id(), target);
  }

  // bytes byte_values = 4;
  if (!this->_internal_byte_values().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_byte_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
  return target;
}

size_t CanFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_id = 3;
  if (!this->_internal_interface_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_id());
  }

  // bytes byte_values = 4;
  if (!this->_internal_byte_values().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_byte_values());
  }

  // sint64 relative_time_ms = 1;
  if (this->_internal_relative_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_relative_time_ms());
  }

  // uint32 message_id = 2;
  if (this->_internal_message_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_message_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanFrame::GetClassData() const { return &_class_data_; }


void CanFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanFrame*>(&to_msg);
  auto& from = static_cast<const CanFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface_id().empty()) {
    _this->_internal_set_interface_id(from._internal_interface_id());
  }
  if (!from._internal_byte_values().empty()) {
    _this->_internal_set_byte_values(from._internal_byte_values());
  }
  if (from._internal_relative_time_ms() != 0) {
    _this->_internal_set_relative_time_ms(from._internal_relative_time_ms());
  }
  if (from._internal_message_id() != 0) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanFrame::CopyFrom(const CanFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanFrame::IsInitialized() const {
  return true;
}

void CanFrame::InternalSwap(CanFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_id_, lhs_arena,
      &other->_impl_.interface_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.byte_values_, lhs_arena,
      &other->_impl_.byte_values_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanFrame, _impl_.message_id_)
      + sizeof(CanFrame::_impl_.message_id_)
      - PROTOBUF_FIELD_OFFSET(CanFrame, _impl_.relative_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.relative_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.relative_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[4]);
}

// ===================================================================

class DtcData::_Internal {
 public:
};

DtcData::DtcData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
}
DtcData::DtcData(const DtcData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DtcData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.active_dtc_codes_){from._impl_.active_dtc_codes_}
    , decltype(_impl_.relative_time_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.relative_time_ms_ = from._impl_.relative_time_ms_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
}

inline void DtcData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.active_dtc_codes_){arena}
    , decltype(_impl_.relative_time_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DtcData::~DtcData() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DtcData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.active_dtc_codes_.~RepeatedPtrField();
}

void DtcData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DtcData::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.active_dtc_codes_.Clear();
  _impl_.relative_time_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DtcData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 relative_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.relative_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string active_dtc_codes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_active_dtc_codes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DtcData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 relative_time_ms = 1;
  if (this->_internal_relative_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_relative_time_ms(), target);
  }

  // repeated string active_dtc_codes = 2;
  for (int i = 0, n = this->_internal_active_dtc_codes_size(); i < n; i++) {
    const auto& s = this->_internal_active_dtc_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
  return target;
}

size_t DtcData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string active_dtc_codes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.active_dtc_codes_.size());
  for (int i = 0, n = _impl_.active_dtc_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.active_dtc_codes_.Get(i));
  }

  // sint64 relative_time_ms = 1;
  if (this->_internal_relative_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_relative_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DtcData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DtcData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DtcData::GetClassData() const { return &_class_data_; }


void DtcData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DtcData*>(&to_msg);
  auto& from = static_cast<const DtcData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.active_dtc_codes_.MergeFrom(from._impl_.active_dtc_codes_);
  if (from._internal_relative_time_ms() != 0) {
    _this->_internal_set_relative_time_ms(from._internal_relative_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DtcData::CopyFrom(const DtcData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtcData::IsInitialized() const {
  return true;
}

void DtcData::InternalSwap(DtcData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.active_dtc_codes_.InternalSwap(&other->_impl_.active_dtc_codes_);
  swap(_impl_.relative_time_ms_, other->_impl_.relative_time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DtcData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[5]);
}

// ===================================================================

class Geohash::_Internal {
 public:
};

Geohash::Geohash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
}
Geohash::Geohash(const Geohash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Geohash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.geohash_string_){}
    , decltype(_impl_.prev_reported_geohash_string_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.geohash_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geohash_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_geohash_string().empty()) {
    _this->_impl_.geohash_string_.Set(from._internal_geohash_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prev_reported_geohash_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_reported_geohash_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_reported_geohash_string().empty()) {
    _this->_impl_.prev_reported_geohash_string_.Set(from._internal_prev_reported_geohash_string(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
}

inline void Geohash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.geohash_string_){}
    , decltype(_impl_.prev_reported_geohash_string_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.geohash_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.geohash_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prev_reported_geohash_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_reported_geohash_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Geohash::~Geohash() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Geohash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.geohash_string_.Destroy();
  _impl_.prev_reported_geohash_string_.Destroy();
}

void Geohash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Geohash::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.geohash_string_.ClearToEmpty();
  _impl_.prev_reported_geohash_string_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geohash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string geohash_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_geohash_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.geohash_string"));
        } else
          goto handle_unusual;
        continue;
      // string prev_reported_geohash_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prev_reported_geohash_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.prev_reported_geohash_string"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Geohash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string geohash_string = 1;
  if (!this->_internal_geohash_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geohash_string().data(), static_cast<int>(this->_internal_geohash_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.geohash_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_geohash_string(), target);
  }

  // string prev_reported_geohash_string = 2;
  if (!this->_internal_prev_reported_geohash_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_reported_geohash_string().data(), static_cast<int>(this->_internal_prev_reported_geohash_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.prev_reported_geohash_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prev_reported_geohash_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
  return target;
}

size_t Geohash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geohash_string = 1;
  if (!this->_internal_geohash_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geohash_string());
  }

  // string prev_reported_geohash_string = 2;
  if (!this->_internal_prev_reported_geohash_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_reported_geohash_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Geohash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Geohash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Geohash::GetClassData() const { return &_class_data_; }


void Geohash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Geohash*>(&to_msg);
  auto& from = static_cast<const Geohash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_geohash_string().empty()) {
    _this->_internal_set_geohash_string(from._internal_geohash_string());
  }
  if (!from._internal_prev_reported_geohash_string().empty()) {
    _this->_internal_set_prev_reported_geohash_string(from._internal_prev_reported_geohash_string());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Geohash::CopyFrom(const Geohash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geohash::IsInitialized() const {
  return true;
}

void Geohash::InternalSwap(Geohash* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.geohash_string_, lhs_arena,
      &other->_impl_.geohash_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_reported_geohash_string_, lhs_arena,
      &other->_impl_.prev_reported_geohash_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Geohash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[6]);
}

// ===================================================================

class S3Object::_Internal {
 public:
};

S3Object::S3Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
}
S3Object::S3Object(const S3Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S3Object* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.data_format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.data_format_ = from._impl_.data_format_;
  // @@protoc_insertion_point(copy_constructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
}

inline void S3Object::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.data_format_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S3Object::~S3Object() {
  // @@protoc_insertion_point(destructor:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S3Object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void S3Object::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S3Object::Clear() {
// @@protoc_insertion_point(message_clear_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.data_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S3Object::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.key"));
        } else
          goto handle_unusual;
        continue;
      // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DataFormat data_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_format(static_cast<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S3Object::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DataFormat data_format = 2;
  if (this->_internal_data_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
  return target;
}

size_t S3Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DataFormat data_format = 2;
  if (this->_internal_data_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_data_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S3Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S3Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S3Object::GetClassData() const { return &_class_data_; }


void S3Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S3Object*>(&to_msg);
  auto& from = static_cast<const S3Object&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_data_format() != 0) {
    _this->_internal_set_data_format(from._internal_data_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S3Object::CopyFrom(const S3Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S3Object::IsInitialized() const {
  return true;
}

void S3Object::InternalSwap(S3Object* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.data_format_, other->_impl_.data_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S3Object::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fdata_2eproto_getter, &descriptor_table_vehicle_5fdata_2eproto_once,
      file_level_metadata_vehicle_5fdata_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace VehicleDataMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash >(arena);
}
template<> PROTOBUF_NOINLINE ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object*
Arena::CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
