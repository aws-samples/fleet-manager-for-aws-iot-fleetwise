// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fdata_2eproto;
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace VehicleDataMsg {
class CanFrame;
struct CanFrameDefaultTypeInternal;
extern CanFrameDefaultTypeInternal _CanFrame_default_instance_;
class CapturedSignal;
struct CapturedSignalDefaultTypeInternal;
extern CapturedSignalDefaultTypeInternal _CapturedSignal_default_instance_;
class DtcData;
struct DtcDataDefaultTypeInternal;
extern DtcDataDefaultTypeInternal _DtcData_default_instance_;
class Geohash;
struct GeohashDefaultTypeInternal;
extern GeohashDefaultTypeInternal _Geohash_default_instance_;
class PrimitiveTypeInComplexCapturedSignal;
struct PrimitiveTypeInComplexCapturedSignalDefaultTypeInternal;
extern PrimitiveTypeInComplexCapturedSignalDefaultTypeInternal _PrimitiveTypeInComplexCapturedSignal_default_instance_;
class S3Object;
struct S3ObjectDefaultTypeInternal;
extern S3ObjectDefaultTypeInternal _S3Object_default_instance_;
class SignalPath;
struct SignalPathDefaultTypeInternal;
extern SignalPathDefaultTypeInternal _SignalPath_default_instance_;
class VehicleData;
struct VehicleDataDefaultTypeInternal;
extern VehicleDataDefaultTypeInternal _VehicleData_default_instance_;
}  // namespace VehicleDataMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath>(Arena*);
template<> ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::VehicleData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace VehicleDataMsg {

enum DataFormat : int {
  UNKNOWN_DATA_FORMAT = 0,
  CDR = 1,
  DataFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DataFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DataFormat_IsValid(int value);
constexpr DataFormat DataFormat_MIN = UNKNOWN_DATA_FORMAT;
constexpr DataFormat DataFormat_MAX = CDR;
constexpr int DataFormat_ARRAYSIZE = DataFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataFormat_descriptor();
template<typename T>
inline const std::string& DataFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataFormat_descriptor(), enum_t_value);
}
inline bool DataFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataFormat>(
    DataFormat_descriptor(), name, value);
}
// ===================================================================

class VehicleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData) */ {
 public:
  inline VehicleData() : VehicleData(nullptr) {}
  ~VehicleData() override;
  explicit PROTOBUF_CONSTEXPR VehicleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleData(const VehicleData& from);
  VehicleData(VehicleData&& from) noexcept
    : VehicleData() {
    *this = ::std::move(from);
  }

  inline VehicleData& operator=(const VehicleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleData& operator=(VehicleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleData* internal_default_instance() {
    return reinterpret_cast<const VehicleData*>(
               &_VehicleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleData& a, VehicleData& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleData& from) {
    VehicleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData";
  }
  protected:
  explicit VehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapturedSignalsFieldNumber = 5,
    kCanFramesFieldNumber = 7,
    kS3ObjectsFieldNumber = 9,
    kCampaignSyncIdFieldNumber = 1,
    kDecoderSyncIdFieldNumber = 2,
    kDtcDataFieldNumber = 6,
    kGeohashFieldNumber = 8,
    kCollectionEventTimeMsEpochFieldNumber = 4,
    kCollectionEventIdFieldNumber = 3,
  };
  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal captured_signals = 5;
  int captured_signals_size() const;
  private:
  int _internal_captured_signals_size() const;
  public:
  void clear_captured_signals();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* mutable_captured_signals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal >*
      mutable_captured_signals();
  private:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal& _internal_captured_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* _internal_add_captured_signals();
  public:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal& captured_signals(int index) const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* add_captured_signals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal >&
      captured_signals() const;

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame can_frames = 7;
  int can_frames_size() const;
  private:
  int _internal_can_frames_size() const;
  public:
  void clear_can_frames();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* mutable_can_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame >*
      mutable_can_frames();
  private:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame& _internal_can_frames(int index) const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* _internal_add_can_frames();
  public:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame& can_frames(int index) const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* add_can_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame >&
      can_frames() const;

  // repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object s3_objects = 9;
  int s3_objects_size() const;
  private:
  int _internal_s3_objects_size() const;
  public:
  void clear_s3_objects();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* mutable_s3_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object >*
      mutable_s3_objects();
  private:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object& _internal_s3_objects(int index) const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* _internal_add_s3_objects();
  public:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object& s3_objects(int index) const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* add_s3_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object >&
      s3_objects() const;

  // string campaign_sync_id = 1;
  void clear_campaign_sync_id();
  const std::string& campaign_sync_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_campaign_sync_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_campaign_sync_id();
  PROTOBUF_NODISCARD std::string* release_campaign_sync_id();
  void set_allocated_campaign_sync_id(std::string* campaign_sync_id);
  private:
  const std::string& _internal_campaign_sync_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_campaign_sync_id(const std::string& value);
  std::string* _internal_mutable_campaign_sync_id();
  public:

  // string decoder_sync_id = 2;
  void clear_decoder_sync_id();
  const std::string& decoder_sync_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decoder_sync_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decoder_sync_id();
  PROTOBUF_NODISCARD std::string* release_decoder_sync_id();
  void set_allocated_decoder_sync_id(std::string* decoder_sync_id);
  private:
  const std::string& _internal_decoder_sync_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decoder_sync_id(const std::string& value);
  std::string* _internal_mutable_decoder_sync_id();
  public:

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData dtc_data = 6;
  bool has_dtc_data() const;
  private:
  bool _internal_has_dtc_data() const;
  public:
  void clear_dtc_data();
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData& dtc_data() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* release_dtc_data();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* mutable_dtc_data();
  void set_allocated_dtc_data(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* dtc_data);
  private:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData& _internal_dtc_data() const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* _internal_mutable_dtc_data();
  public:
  void unsafe_arena_set_allocated_dtc_data(
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* dtc_data);
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* unsafe_arena_release_dtc_data();

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash geohash = 8;
  bool has_geohash() const;
  private:
  bool _internal_has_geohash() const;
  public:
  void clear_geohash();
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash& geohash() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* release_geohash();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* mutable_geohash();
  void set_allocated_geohash(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* geohash);
  private:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash& _internal_geohash() const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* _internal_mutable_geohash();
  public:
  void unsafe_arena_set_allocated_geohash(
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* geohash);
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* unsafe_arena_release_geohash();

  // uint64 collection_event_time_ms_epoch = 4;
  void clear_collection_event_time_ms_epoch();
  uint64_t collection_event_time_ms_epoch() const;
  void set_collection_event_time_ms_epoch(uint64_t value);
  private:
  uint64_t _internal_collection_event_time_ms_epoch() const;
  void _internal_set_collection_event_time_ms_epoch(uint64_t value);
  public:

  // uint32 collection_event_id = 3;
  void clear_collection_event_id();
  uint32_t collection_event_id() const;
  void set_collection_event_id(uint32_t value);
  private:
  uint32_t _internal_collection_event_id() const;
  void _internal_set_collection_event_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal > captured_signals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame > can_frames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object > s3_objects_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr campaign_sync_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoder_sync_id_;
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* dtc_data_;
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* geohash_;
    uint64_t collection_event_time_ms_epoch_;
    uint32_t collection_event_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SignalPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath) */ {
 public:
  inline SignalPath() : SignalPath(nullptr) {}
  ~SignalPath() override;
  explicit PROTOBUF_CONSTEXPR SignalPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalPath(const SignalPath& from);
  SignalPath(SignalPath&& from) noexcept
    : SignalPath() {
    *this = ::std::move(from);
  }

  inline SignalPath& operator=(const SignalPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalPath& operator=(SignalPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignalPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalPath* internal_default_instance() {
    return reinterpret_cast<const SignalPath*>(
               &_SignalPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignalPath& a, SignalPath& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignalPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignalPath& from) {
    SignalPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath";
  }
  protected:
  explicit SignalPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalPathFieldNumber = 1,
  };
  // repeated uint32 signal_path = 1;
  int signal_path_size() const;
  private:
  int _internal_signal_path_size() const;
  public:
  void clear_signal_path();
  private:
  uint32_t _internal_signal_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_signal_path() const;
  void _internal_add_signal_path(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_signal_path();
  public:
  uint32_t signal_path(int index) const;
  void set_signal_path(int index, uint32_t value);
  void add_signal_path(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      signal_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_signal_path();

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > signal_path_;
    mutable std::atomic<int> _signal_path_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PrimitiveTypeInComplexCapturedSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal) */ {
 public:
  inline PrimitiveTypeInComplexCapturedSignal() : PrimitiveTypeInComplexCapturedSignal(nullptr) {}
  ~PrimitiveTypeInComplexCapturedSignal() override;
  explicit PROTOBUF_CONSTEXPR PrimitiveTypeInComplexCapturedSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimitiveTypeInComplexCapturedSignal(const PrimitiveTypeInComplexCapturedSignal& from);
  PrimitiveTypeInComplexCapturedSignal(PrimitiveTypeInComplexCapturedSignal&& from) noexcept
    : PrimitiveTypeInComplexCapturedSignal() {
    *this = ::std::move(from);
  }

  inline PrimitiveTypeInComplexCapturedSignal& operator=(const PrimitiveTypeInComplexCapturedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveTypeInComplexCapturedSignal& operator=(PrimitiveTypeInComplexCapturedSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimitiveTypeInComplexCapturedSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimitiveTypeInComplexCapturedSignal* internal_default_instance() {
    return reinterpret_cast<const PrimitiveTypeInComplexCapturedSignal*>(
               &_PrimitiveTypeInComplexCapturedSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrimitiveTypeInComplexCapturedSignal& a, PrimitiveTypeInComplexCapturedSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveTypeInComplexCapturedSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveTypeInComplexCapturedSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimitiveTypeInComplexCapturedSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimitiveTypeInComplexCapturedSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimitiveTypeInComplexCapturedSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimitiveTypeInComplexCapturedSignal& from) {
    PrimitiveTypeInComplexCapturedSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveTypeInComplexCapturedSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal";
  }
  protected:
  explicit PrimitiveTypeInComplexCapturedSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalPathFieldNumber = 2,
    kSignalIdFieldNumber = 1,
  };
  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath signal_path = 2;
  bool has_signal_path() const;
  private:
  bool _internal_has_signal_path() const;
  public:
  void clear_signal_path();
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath& signal_path() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* release_signal_path();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* mutable_signal_path();
  void set_allocated_signal_path(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* signal_path);
  private:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath& _internal_signal_path() const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* _internal_mutable_signal_path();
  public:
  void unsafe_arena_set_allocated_signal_path(
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* signal_path);
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* unsafe_arena_release_signal_path();

  // uint32 signal_id = 1;
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* signal_path_;
    uint32_t signal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// -------------------------------------------------------------------

class CapturedSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal) */ {
 public:
  inline CapturedSignal() : CapturedSignal(nullptr) {}
  ~CapturedSignal() override;
  explicit PROTOBUF_CONSTEXPR CapturedSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapturedSignal(const CapturedSignal& from);
  CapturedSignal(CapturedSignal&& from) noexcept
    : CapturedSignal() {
    *this = ::std::move(from);
  }

  inline CapturedSignal& operator=(const CapturedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapturedSignal& operator=(CapturedSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapturedSignal& default_instance() {
    return *internal_default_instance();
  }
  enum PrimitiveTypeCase {
    kSignalId = 2,
    kPrimitiveTypeInSignal = 10,
    PRIMITIVETYPE_NOT_SET = 0,
  };

  enum SignalValueCase {
    kDoubleValue = 3,
    SIGNALVALUE_NOT_SET = 0,
  };

  static inline const CapturedSignal* internal_default_instance() {
    return reinterpret_cast<const CapturedSignal*>(
               &_CapturedSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CapturedSignal& a, CapturedSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(CapturedSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapturedSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapturedSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapturedSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CapturedSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CapturedSignal& from) {
    CapturedSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapturedSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal";
  }
  protected:
  explicit CapturedSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeTimeMsFieldNumber = 1,
    kSignalIdFieldNumber = 2,
    kPrimitiveTypeInSignalFieldNumber = 10,
    kDoubleValueFieldNumber = 3,
  };
  // sint64 relative_time_ms = 1;
  void clear_relative_time_ms();
  int64_t relative_time_ms() const;
  void set_relative_time_ms(int64_t value);
  private:
  int64_t _internal_relative_time_ms() const;
  void _internal_set_relative_time_ms(int64_t value);
  public:

  // uint32 signal_id = 2;
  bool has_signal_id() const;
  private:
  bool _internal_has_signal_id() const;
  public:
  void clear_signal_id();
  uint32_t signal_id() const;
  void set_signal_id(uint32_t value);
  private:
  uint32_t _internal_signal_id() const;
  void _internal_set_signal_id(uint32_t value);
  public:

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal primitive_type_in_signal = 10;
  bool has_primitive_type_in_signal() const;
  private:
  bool _internal_has_primitive_type_in_signal() const;
  public:
  void clear_primitive_type_in_signal();
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal& primitive_type_in_signal() const;
  PROTOBUF_NODISCARD ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* release_primitive_type_in_signal();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* mutable_primitive_type_in_signal();
  void set_allocated_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* primitive_type_in_signal);
  private:
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal& _internal_primitive_type_in_signal() const;
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* _internal_mutable_primitive_type_in_signal();
  public:
  void unsafe_arena_set_allocated_primitive_type_in_signal(
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* primitive_type_in_signal);
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* unsafe_arena_release_primitive_type_in_signal();

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  void clear_primitiveType();
  PrimitiveTypeCase primitiveType_case() const;
  void clear_SignalValue();
  SignalValueCase SignalValue_case() const;
  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal)
 private:
  class _Internal;
  void set_has_signal_id();
  void set_has_primitive_type_in_signal();
  void set_has_double_value();

  inline bool has_primitiveType() const;
  inline void clear_has_primitiveType();

  inline bool has_SignalValue() const;
  inline void clear_has_SignalValue();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t relative_time_ms_;
    union PrimitiveTypeUnion {
      constexpr PrimitiveTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t signal_id_;
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* primitive_type_in_signal_;
    } primitiveType_;
    union SignalValueUnion {
      constexpr SignalValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double double_value_;
    } SignalValue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// -------------------------------------------------------------------

class CanFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame) */ {
 public:
  inline CanFrame() : CanFrame(nullptr) {}
  ~CanFrame() override;
  explicit PROTOBUF_CONSTEXPR CanFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanFrame(const CanFrame& from);
  CanFrame(CanFrame&& from) noexcept
    : CanFrame() {
    *this = ::std::move(from);
  }

  inline CanFrame& operator=(const CanFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanFrame& operator=(CanFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanFrame* internal_default_instance() {
    return reinterpret_cast<const CanFrame*>(
               &_CanFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CanFrame& a, CanFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(CanFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanFrame& from) {
    CanFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame";
  }
  protected:
  explicit CanFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceIdFieldNumber = 3,
    kByteValuesFieldNumber = 4,
    kRelativeTimeMsFieldNumber = 1,
    kMessageIdFieldNumber = 2,
  };
  // string interface_id = 3;
  void clear_interface_id();
  const std::string& interface_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_id();
  PROTOBUF_NODISCARD std::string* release_interface_id();
  void set_allocated_interface_id(std::string* interface_id);
  private:
  const std::string& _internal_interface_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_id(const std::string& value);
  std::string* _internal_mutable_interface_id();
  public:

  // bytes byte_values = 4;
  void clear_byte_values();
  const std::string& byte_values() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_byte_values(ArgT0&& arg0, ArgT... args);
  std::string* mutable_byte_values();
  PROTOBUF_NODISCARD std::string* release_byte_values();
  void set_allocated_byte_values(std::string* byte_values);
  private:
  const std::string& _internal_byte_values() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_byte_values(const std::string& value);
  std::string* _internal_mutable_byte_values();
  public:

  // sint64 relative_time_ms = 1;
  void clear_relative_time_ms();
  int64_t relative_time_ms() const;
  void set_relative_time_ms(int64_t value);
  private:
  int64_t _internal_relative_time_ms() const;
  void _internal_set_relative_time_ms(int64_t value);
  public:

  // uint32 message_id = 2;
  void clear_message_id();
  uint32_t message_id() const;
  void set_message_id(uint32_t value);
  private:
  uint32_t _internal_message_id() const;
  void _internal_set_message_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr byte_values_;
    int64_t relative_time_ms_;
    uint32_t message_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// -------------------------------------------------------------------

class DtcData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData) */ {
 public:
  inline DtcData() : DtcData(nullptr) {}
  ~DtcData() override;
  explicit PROTOBUF_CONSTEXPR DtcData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DtcData(const DtcData& from);
  DtcData(DtcData&& from) noexcept
    : DtcData() {
    *this = ::std::move(from);
  }

  inline DtcData& operator=(const DtcData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DtcData& operator=(DtcData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DtcData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DtcData* internal_default_instance() {
    return reinterpret_cast<const DtcData*>(
               &_DtcData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DtcData& a, DtcData& b) {
    a.Swap(&b);
  }
  inline void Swap(DtcData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DtcData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DtcData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DtcData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DtcData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DtcData& from) {
    DtcData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtcData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData";
  }
  protected:
  explicit DtcData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveDtcCodesFieldNumber = 2,
    kRelativeTimeMsFieldNumber = 1,
  };
  // repeated string active_dtc_codes = 2;
  int active_dtc_codes_size() const;
  private:
  int _internal_active_dtc_codes_size() const;
  public:
  void clear_active_dtc_codes();
  const std::string& active_dtc_codes(int index) const;
  std::string* mutable_active_dtc_codes(int index);
  void set_active_dtc_codes(int index, const std::string& value);
  void set_active_dtc_codes(int index, std::string&& value);
  void set_active_dtc_codes(int index, const char* value);
  void set_active_dtc_codes(int index, const char* value, size_t size);
  std::string* add_active_dtc_codes();
  void add_active_dtc_codes(const std::string& value);
  void add_active_dtc_codes(std::string&& value);
  void add_active_dtc_codes(const char* value);
  void add_active_dtc_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& active_dtc_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_active_dtc_codes();
  private:
  const std::string& _internal_active_dtc_codes(int index) const;
  std::string* _internal_add_active_dtc_codes();
  public:

  // sint64 relative_time_ms = 1;
  void clear_relative_time_ms();
  int64_t relative_time_ms() const;
  void set_relative_time_ms(int64_t value);
  private:
  int64_t _internal_relative_time_ms() const;
  void _internal_set_relative_time_ms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> active_dtc_codes_;
    int64_t relative_time_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Geohash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash) */ {
 public:
  inline Geohash() : Geohash(nullptr) {}
  ~Geohash() override;
  explicit PROTOBUF_CONSTEXPR Geohash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Geohash(const Geohash& from);
  Geohash(Geohash&& from) noexcept
    : Geohash() {
    *this = ::std::move(from);
  }

  inline Geohash& operator=(const Geohash& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geohash& operator=(Geohash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Geohash& default_instance() {
    return *internal_default_instance();
  }
  static inline const Geohash* internal_default_instance() {
    return reinterpret_cast<const Geohash*>(
               &_Geohash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Geohash& a, Geohash& b) {
    a.Swap(&b);
  }
  inline void Swap(Geohash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geohash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Geohash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Geohash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Geohash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Geohash& from) {
    Geohash::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geohash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash";
  }
  protected:
  explicit Geohash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeohashStringFieldNumber = 1,
    kPrevReportedGeohashStringFieldNumber = 2,
  };
  // string geohash_string = 1;
  void clear_geohash_string();
  const std::string& geohash_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_geohash_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_geohash_string();
  PROTOBUF_NODISCARD std::string* release_geohash_string();
  void set_allocated_geohash_string(std::string* geohash_string);
  private:
  const std::string& _internal_geohash_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_geohash_string(const std::string& value);
  std::string* _internal_mutable_geohash_string();
  public:

  // string prev_reported_geohash_string = 2;
  void clear_prev_reported_geohash_string();
  const std::string& prev_reported_geohash_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_reported_geohash_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_reported_geohash_string();
  PROTOBUF_NODISCARD std::string* release_prev_reported_geohash_string();
  void set_allocated_prev_reported_geohash_string(std::string* prev_reported_geohash_string);
  private:
  const std::string& _internal_prev_reported_geohash_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_reported_geohash_string(const std::string& value);
  std::string* _internal_mutable_prev_reported_geohash_string();
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geohash_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_reported_geohash_string_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// -------------------------------------------------------------------

class S3Object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object) */ {
 public:
  inline S3Object() : S3Object(nullptr) {}
  ~S3Object() override;
  explicit PROTOBUF_CONSTEXPR S3Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S3Object(const S3Object& from);
  S3Object(S3Object&& from) noexcept
    : S3Object() {
    *this = ::std::move(from);
  }

  inline S3Object& operator=(const S3Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline S3Object& operator=(S3Object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S3Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const S3Object* internal_default_instance() {
    return reinterpret_cast<const S3Object*>(
               &_S3Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S3Object& a, S3Object& b) {
    a.Swap(&b);
  }
  inline void Swap(S3Object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S3Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S3Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S3Object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S3Object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S3Object& from) {
    S3Object::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S3Object* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object";
  }
  protected:
  explicit S3Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDataFormatFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DataFormat data_format = 2;
  void clear_data_format();
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat data_format() const;
  void set_data_format(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat value);
  private:
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat _internal_data_format() const;
  void _internal_set_data_format(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int data_format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vehicle_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleData

// string campaign_sync_id = 1;
inline void VehicleData::clear_campaign_sync_id() {
  _impl_.campaign_sync_id_.ClearToEmpty();
}
inline const std::string& VehicleData::campaign_sync_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.campaign_sync_id)
  return _internal_campaign_sync_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleData::set_campaign_sync_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.campaign_sync_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.campaign_sync_id)
}
inline std::string* VehicleData::mutable_campaign_sync_id() {
  std::string* _s = _internal_mutable_campaign_sync_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.campaign_sync_id)
  return _s;
}
inline const std::string& VehicleData::_internal_campaign_sync_id() const {
  return _impl_.campaign_sync_id_.Get();
}
inline void VehicleData::_internal_set_campaign_sync_id(const std::string& value) {
  
  _impl_.campaign_sync_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleData::_internal_mutable_campaign_sync_id() {
  
  return _impl_.campaign_sync_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VehicleData::release_campaign_sync_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.campaign_sync_id)
  return _impl_.campaign_sync_id_.Release();
}
inline void VehicleData::set_allocated_campaign_sync_id(std::string* campaign_sync_id) {
  if (campaign_sync_id != nullptr) {
    
  } else {
    
  }
  _impl_.campaign_sync_id_.SetAllocated(campaign_sync_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.campaign_sync_id_.IsDefault()) {
    _impl_.campaign_sync_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.campaign_sync_id)
}

// string decoder_sync_id = 2;
inline void VehicleData::clear_decoder_sync_id() {
  _impl_.decoder_sync_id_.ClearToEmpty();
}
inline const std::string& VehicleData::decoder_sync_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.decoder_sync_id)
  return _internal_decoder_sync_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleData::set_decoder_sync_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.decoder_sync_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.decoder_sync_id)
}
inline std::string* VehicleData::mutable_decoder_sync_id() {
  std::string* _s = _internal_mutable_decoder_sync_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.decoder_sync_id)
  return _s;
}
inline const std::string& VehicleData::_internal_decoder_sync_id() const {
  return _impl_.decoder_sync_id_.Get();
}
inline void VehicleData::_internal_set_decoder_sync_id(const std::string& value) {
  
  _impl_.decoder_sync_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleData::_internal_mutable_decoder_sync_id() {
  
  return _impl_.decoder_sync_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VehicleData::release_decoder_sync_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.decoder_sync_id)
  return _impl_.decoder_sync_id_.Release();
}
inline void VehicleData::set_allocated_decoder_sync_id(std::string* decoder_sync_id) {
  if (decoder_sync_id != nullptr) {
    
  } else {
    
  }
  _impl_.decoder_sync_id_.SetAllocated(decoder_sync_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decoder_sync_id_.IsDefault()) {
    _impl_.decoder_sync_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.decoder_sync_id)
}

// uint32 collection_event_id = 3;
inline void VehicleData::clear_collection_event_id() {
  _impl_.collection_event_id_ = 0u;
}
inline uint32_t VehicleData::_internal_collection_event_id() const {
  return _impl_.collection_event_id_;
}
inline uint32_t VehicleData::collection_event_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.collection_event_id)
  return _internal_collection_event_id();
}
inline void VehicleData::_internal_set_collection_event_id(uint32_t value) {
  
  _impl_.collection_event_id_ = value;
}
inline void VehicleData::set_collection_event_id(uint32_t value) {
  _internal_set_collection_event_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.collection_event_id)
}

// uint64 collection_event_time_ms_epoch = 4;
inline void VehicleData::clear_collection_event_time_ms_epoch() {
  _impl_.collection_event_time_ms_epoch_ = uint64_t{0u};
}
inline uint64_t VehicleData::_internal_collection_event_time_ms_epoch() const {
  return _impl_.collection_event_time_ms_epoch_;
}
inline uint64_t VehicleData::collection_event_time_ms_epoch() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.collection_event_time_ms_epoch)
  return _internal_collection_event_time_ms_epoch();
}
inline void VehicleData::_internal_set_collection_event_time_ms_epoch(uint64_t value) {
  
  _impl_.collection_event_time_ms_epoch_ = value;
}
inline void VehicleData::set_collection_event_time_ms_epoch(uint64_t value) {
  _internal_set_collection_event_time_ms_epoch(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.collection_event_time_ms_epoch)
}

// repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal captured_signals = 5;
inline int VehicleData::_internal_captured_signals_size() const {
  return _impl_.captured_signals_.size();
}
inline int VehicleData::captured_signals_size() const {
  return _internal_captured_signals_size();
}
inline void VehicleData::clear_captured_signals() {
  _impl_.captured_signals_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* VehicleData::mutable_captured_signals(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.captured_signals)
  return _impl_.captured_signals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal >*
VehicleData::mutable_captured_signals() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.captured_signals)
  return &_impl_.captured_signals_;
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal& VehicleData::_internal_captured_signals(int index) const {
  return _impl_.captured_signals_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal& VehicleData::captured_signals(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.captured_signals)
  return _internal_captured_signals(index);
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* VehicleData::_internal_add_captured_signals() {
  return _impl_.captured_signals_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* VehicleData::add_captured_signals() {
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal* _add = _internal_add_captured_signals();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.captured_signals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CapturedSignal >&
VehicleData::captured_signals() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.captured_signals)
  return _impl_.captured_signals_;
}

// .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData dtc_data = 6;
inline bool VehicleData::_internal_has_dtc_data() const {
  return this != internal_default_instance() && _impl_.dtc_data_ != nullptr;
}
inline bool VehicleData::has_dtc_data() const {
  return _internal_has_dtc_data();
}
inline void VehicleData::clear_dtc_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.dtc_data_ != nullptr) {
    delete _impl_.dtc_data_;
  }
  _impl_.dtc_data_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData& VehicleData::_internal_dtc_data() const {
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* p = _impl_.dtc_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData&>(
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_DtcData_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData& VehicleData::dtc_data() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.dtc_data)
  return _internal_dtc_data();
}
inline void VehicleData::unsafe_arena_set_allocated_dtc_data(
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* dtc_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dtc_data_);
  }
  _impl_.dtc_data_ = dtc_data;
  if (dtc_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.dtc_data)
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* VehicleData::release_dtc_data() {
  
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* temp = _impl_.dtc_data_;
  _impl_.dtc_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* VehicleData::unsafe_arena_release_dtc_data() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.dtc_data)
  
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* temp = _impl_.dtc_data_;
  _impl_.dtc_data_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* VehicleData::_internal_mutable_dtc_data() {
  
  if (_impl_.dtc_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData>(GetArenaForAllocation());
    _impl_.dtc_data_ = p;
  }
  return _impl_.dtc_data_;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* VehicleData::mutable_dtc_data() {
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* _msg = _internal_mutable_dtc_data();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.dtc_data)
  return _msg;
}
inline void VehicleData::set_allocated_dtc_data(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DtcData* dtc_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dtc_data_;
  }
  if (dtc_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dtc_data);
    if (message_arena != submessage_arena) {
      dtc_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dtc_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dtc_data_ = dtc_data;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.dtc_data)
}

// repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame can_frames = 7;
inline int VehicleData::_internal_can_frames_size() const {
  return _impl_.can_frames_.size();
}
inline int VehicleData::can_frames_size() const {
  return _internal_can_frames_size();
}
inline void VehicleData::clear_can_frames() {
  _impl_.can_frames_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* VehicleData::mutable_can_frames(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.can_frames)
  return _impl_.can_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame >*
VehicleData::mutable_can_frames() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.can_frames)
  return &_impl_.can_frames_;
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame& VehicleData::_internal_can_frames(int index) const {
  return _impl_.can_frames_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame& VehicleData::can_frames(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.can_frames)
  return _internal_can_frames(index);
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* VehicleData::_internal_add_can_frames() {
  return _impl_.can_frames_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* VehicleData::add_can_frames() {
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame* _add = _internal_add_can_frames();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.can_frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::CanFrame >&
VehicleData::can_frames() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.can_frames)
  return _impl_.can_frames_;
}

// .Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash geohash = 8;
inline bool VehicleData::_internal_has_geohash() const {
  return this != internal_default_instance() && _impl_.geohash_ != nullptr;
}
inline bool VehicleData::has_geohash() const {
  return _internal_has_geohash();
}
inline void VehicleData::clear_geohash() {
  if (GetArenaForAllocation() == nullptr && _impl_.geohash_ != nullptr) {
    delete _impl_.geohash_;
  }
  _impl_.geohash_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash& VehicleData::_internal_geohash() const {
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* p = _impl_.geohash_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash&>(
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_Geohash_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash& VehicleData::geohash() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.geohash)
  return _internal_geohash();
}
inline void VehicleData::unsafe_arena_set_allocated_geohash(
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* geohash) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geohash_);
  }
  _impl_.geohash_ = geohash;
  if (geohash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.geohash)
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* VehicleData::release_geohash() {
  
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* temp = _impl_.geohash_;
  _impl_.geohash_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* VehicleData::unsafe_arena_release_geohash() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.geohash)
  
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* temp = _impl_.geohash_;
  _impl_.geohash_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* VehicleData::_internal_mutable_geohash() {
  
  if (_impl_.geohash_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash>(GetArenaForAllocation());
    _impl_.geohash_ = p;
  }
  return _impl_.geohash_;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* VehicleData::mutable_geohash() {
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* _msg = _internal_mutable_geohash();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.geohash)
  return _msg;
}
inline void VehicleData::set_allocated_geohash(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::Geohash* geohash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.geohash_;
  }
  if (geohash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(geohash);
    if (message_arena != submessage_arena) {
      geohash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geohash, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.geohash_ = geohash;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.geohash)
}

// repeated .Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object s3_objects = 9;
inline int VehicleData::_internal_s3_objects_size() const {
  return _impl_.s3_objects_.size();
}
inline int VehicleData::s3_objects_size() const {
  return _internal_s3_objects_size();
}
inline void VehicleData::clear_s3_objects() {
  _impl_.s3_objects_.Clear();
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* VehicleData::mutable_s3_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.s3_objects)
  return _impl_.s3_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object >*
VehicleData::mutable_s3_objects() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.s3_objects)
  return &_impl_.s3_objects_;
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object& VehicleData::_internal_s3_objects(int index) const {
  return _impl_.s3_objects_.Get(index);
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object& VehicleData::s3_objects(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.s3_objects)
  return _internal_s3_objects(index);
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* VehicleData::_internal_add_s3_objects() {
  return _impl_.s3_objects_.Add();
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* VehicleData::add_s3_objects() {
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object* _add = _internal_add_s3_objects();
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.s3_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::S3Object >&
VehicleData::s3_objects() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.VehicleData.s3_objects)
  return _impl_.s3_objects_;
}

// -------------------------------------------------------------------

// SignalPath

// repeated uint32 signal_path = 1;
inline int SignalPath::_internal_signal_path_size() const {
  return _impl_.signal_path_.size();
}
inline int SignalPath::signal_path_size() const {
  return _internal_signal_path_size();
}
inline void SignalPath::clear_signal_path() {
  _impl_.signal_path_.Clear();
}
inline uint32_t SignalPath::_internal_signal_path(int index) const {
  return _impl_.signal_path_.Get(index);
}
inline uint32_t SignalPath::signal_path(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath.signal_path)
  return _internal_signal_path(index);
}
inline void SignalPath::set_signal_path(int index, uint32_t value) {
  _impl_.signal_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath.signal_path)
}
inline void SignalPath::_internal_add_signal_path(uint32_t value) {
  _impl_.signal_path_.Add(value);
}
inline void SignalPath::add_signal_path(uint32_t value) {
  _internal_add_signal_path(value);
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath.signal_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SignalPath::_internal_signal_path() const {
  return _impl_.signal_path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SignalPath::signal_path() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath.signal_path)
  return _internal_signal_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SignalPath::_internal_mutable_signal_path() {
  return &_impl_.signal_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SignalPath::mutable_signal_path() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath.signal_path)
  return _internal_mutable_signal_path();
}

// -------------------------------------------------------------------

// PrimitiveTypeInComplexCapturedSignal

// uint32 signal_id = 1;
inline void PrimitiveTypeInComplexCapturedSignal::clear_signal_id() {
  _impl_.signal_id_ = 0u;
}
inline uint32_t PrimitiveTypeInComplexCapturedSignal::_internal_signal_id() const {
  return _impl_.signal_id_;
}
inline uint32_t PrimitiveTypeInComplexCapturedSignal::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal.signal_id)
  return _internal_signal_id();
}
inline void PrimitiveTypeInComplexCapturedSignal::_internal_set_signal_id(uint32_t value) {
  
  _impl_.signal_id_ = value;
}
inline void PrimitiveTypeInComplexCapturedSignal::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal.signal_id)
}

// .Aws.IoTFleetWise.Schemas.VehicleDataMsg.SignalPath signal_path = 2;
inline bool PrimitiveTypeInComplexCapturedSignal::_internal_has_signal_path() const {
  return this != internal_default_instance() && _impl_.signal_path_ != nullptr;
}
inline bool PrimitiveTypeInComplexCapturedSignal::has_signal_path() const {
  return _internal_has_signal_path();
}
inline void PrimitiveTypeInComplexCapturedSignal::clear_signal_path() {
  if (GetArenaForAllocation() == nullptr && _impl_.signal_path_ != nullptr) {
    delete _impl_.signal_path_;
  }
  _impl_.signal_path_ = nullptr;
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath& PrimitiveTypeInComplexCapturedSignal::_internal_signal_path() const {
  const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* p = _impl_.signal_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath&>(
      ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_SignalPath_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath& PrimitiveTypeInComplexCapturedSignal::signal_path() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal.signal_path)
  return _internal_signal_path();
}
inline void PrimitiveTypeInComplexCapturedSignal::unsafe_arena_set_allocated_signal_path(
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* signal_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_path_);
  }
  _impl_.signal_path_ = signal_path;
  if (signal_path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal.signal_path)
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* PrimitiveTypeInComplexCapturedSignal::release_signal_path() {
  
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* temp = _impl_.signal_path_;
  _impl_.signal_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* PrimitiveTypeInComplexCapturedSignal::unsafe_arena_release_signal_path() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal.signal_path)
  
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* temp = _impl_.signal_path_;
  _impl_.signal_path_ = nullptr;
  return temp;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* PrimitiveTypeInComplexCapturedSignal::_internal_mutable_signal_path() {
  
  if (_impl_.signal_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath>(GetArenaForAllocation());
    _impl_.signal_path_ = p;
  }
  return _impl_.signal_path_;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* PrimitiveTypeInComplexCapturedSignal::mutable_signal_path() {
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* _msg = _internal_mutable_signal_path();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal.signal_path)
  return _msg;
}
inline void PrimitiveTypeInComplexCapturedSignal::set_allocated_signal_path(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::SignalPath* signal_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signal_path_;
  }
  if (signal_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signal_path);
    if (message_arena != submessage_arena) {
      signal_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_path, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.signal_path_ = signal_path;
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal.signal_path)
}

// -------------------------------------------------------------------

// CapturedSignal

// sint64 relative_time_ms = 1;
inline void CapturedSignal::clear_relative_time_ms() {
  _impl_.relative_time_ms_ = int64_t{0};
}
inline int64_t CapturedSignal::_internal_relative_time_ms() const {
  return _impl_.relative_time_ms_;
}
inline int64_t CapturedSignal::relative_time_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.relative_time_ms)
  return _internal_relative_time_ms();
}
inline void CapturedSignal::_internal_set_relative_time_ms(int64_t value) {
  
  _impl_.relative_time_ms_ = value;
}
inline void CapturedSignal::set_relative_time_ms(int64_t value) {
  _internal_set_relative_time_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.relative_time_ms)
}

// uint32 signal_id = 2;
inline bool CapturedSignal::_internal_has_signal_id() const {
  return primitiveType_case() == kSignalId;
}
inline bool CapturedSignal::has_signal_id() const {
  return _internal_has_signal_id();
}
inline void CapturedSignal::set_has_signal_id() {
  _impl_._oneof_case_[0] = kSignalId;
}
inline void CapturedSignal::clear_signal_id() {
  if (_internal_has_signal_id()) {
    _impl_.primitiveType_.signal_id_ = 0u;
    clear_has_primitiveType();
  }
}
inline uint32_t CapturedSignal::_internal_signal_id() const {
  if (_internal_has_signal_id()) {
    return _impl_.primitiveType_.signal_id_;
  }
  return 0u;
}
inline void CapturedSignal::_internal_set_signal_id(uint32_t value) {
  if (!_internal_has_signal_id()) {
    clear_primitiveType();
    set_has_signal_id();
  }
  _impl_.primitiveType_.signal_id_ = value;
}
inline uint32_t CapturedSignal::signal_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.signal_id)
  return _internal_signal_id();
}
inline void CapturedSignal::set_signal_id(uint32_t value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.signal_id)
}

// .Aws.IoTFleetWise.Schemas.VehicleDataMsg.PrimitiveTypeInComplexCapturedSignal primitive_type_in_signal = 10;
inline bool CapturedSignal::_internal_has_primitive_type_in_signal() const {
  return primitiveType_case() == kPrimitiveTypeInSignal;
}
inline bool CapturedSignal::has_primitive_type_in_signal() const {
  return _internal_has_primitive_type_in_signal();
}
inline void CapturedSignal::set_has_primitive_type_in_signal() {
  _impl_._oneof_case_[0] = kPrimitiveTypeInSignal;
}
inline void CapturedSignal::clear_primitive_type_in_signal() {
  if (_internal_has_primitive_type_in_signal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.primitiveType_.primitive_type_in_signal_;
    }
    clear_has_primitiveType();
  }
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* CapturedSignal::release_primitive_type_in_signal() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.primitive_type_in_signal)
  if (_internal_has_primitive_type_in_signal()) {
    clear_has_primitiveType();
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* temp = _impl_.primitiveType_.primitive_type_in_signal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.primitiveType_.primitive_type_in_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal& CapturedSignal::_internal_primitive_type_in_signal() const {
  return _internal_has_primitive_type_in_signal()
      ? *_impl_.primitiveType_.primitive_type_in_signal_
      : reinterpret_cast< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal&>(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::_PrimitiveTypeInComplexCapturedSignal_default_instance_);
}
inline const ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal& CapturedSignal::primitive_type_in_signal() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.primitive_type_in_signal)
  return _internal_primitive_type_in_signal();
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* CapturedSignal::unsafe_arena_release_primitive_type_in_signal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.primitive_type_in_signal)
  if (_internal_has_primitive_type_in_signal()) {
    clear_has_primitiveType();
    ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* temp = _impl_.primitiveType_.primitive_type_in_signal_;
    _impl_.primitiveType_.primitive_type_in_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CapturedSignal::unsafe_arena_set_allocated_primitive_type_in_signal(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* primitive_type_in_signal) {
  clear_primitiveType();
  if (primitive_type_in_signal) {
    set_has_primitive_type_in_signal();
    _impl_.primitiveType_.primitive_type_in_signal_ = primitive_type_in_signal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.primitive_type_in_signal)
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* CapturedSignal::_internal_mutable_primitive_type_in_signal() {
  if (!_internal_has_primitive_type_in_signal()) {
    clear_primitiveType();
    set_has_primitive_type_in_signal();
    _impl_.primitiveType_.primitive_type_in_signal_ = CreateMaybeMessage< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal >(GetArenaForAllocation());
  }
  return _impl_.primitiveType_.primitive_type_in_signal_;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* CapturedSignal::mutable_primitive_type_in_signal() {
  ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::PrimitiveTypeInComplexCapturedSignal* _msg = _internal_mutable_primitive_type_in_signal();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.primitive_type_in_signal)
  return _msg;
}

// double double_value = 3;
inline bool CapturedSignal::_internal_has_double_value() const {
  return SignalValue_case() == kDoubleValue;
}
inline bool CapturedSignal::has_double_value() const {
  return _internal_has_double_value();
}
inline void CapturedSignal::set_has_double_value() {
  _impl_._oneof_case_[1] = kDoubleValue;
}
inline void CapturedSignal::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.SignalValue_.double_value_ = 0;
    clear_has_SignalValue();
  }
}
inline double CapturedSignal::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.SignalValue_.double_value_;
  }
  return 0;
}
inline void CapturedSignal::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_SignalValue();
    set_has_double_value();
  }
  _impl_.SignalValue_.double_value_ = value;
}
inline double CapturedSignal::double_value() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.double_value)
  return _internal_double_value();
}
inline void CapturedSignal::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CapturedSignal.double_value)
}

inline bool CapturedSignal::has_primitiveType() const {
  return primitiveType_case() != PRIMITIVETYPE_NOT_SET;
}
inline void CapturedSignal::clear_has_primitiveType() {
  _impl_._oneof_case_[0] = PRIMITIVETYPE_NOT_SET;
}
inline bool CapturedSignal::has_SignalValue() const {
  return SignalValue_case() != SIGNALVALUE_NOT_SET;
}
inline void CapturedSignal::clear_has_SignalValue() {
  _impl_._oneof_case_[1] = SIGNALVALUE_NOT_SET;
}
inline CapturedSignal::PrimitiveTypeCase CapturedSignal::primitiveType_case() const {
  return CapturedSignal::PrimitiveTypeCase(_impl_._oneof_case_[0]);
}
inline CapturedSignal::SignalValueCase CapturedSignal::SignalValue_case() const {
  return CapturedSignal::SignalValueCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// CanFrame

// sint64 relative_time_ms = 1;
inline void CanFrame::clear_relative_time_ms() {
  _impl_.relative_time_ms_ = int64_t{0};
}
inline int64_t CanFrame::_internal_relative_time_ms() const {
  return _impl_.relative_time_ms_;
}
inline int64_t CanFrame::relative_time_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.relative_time_ms)
  return _internal_relative_time_ms();
}
inline void CanFrame::_internal_set_relative_time_ms(int64_t value) {
  
  _impl_.relative_time_ms_ = value;
}
inline void CanFrame::set_relative_time_ms(int64_t value) {
  _internal_set_relative_time_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.relative_time_ms)
}

// uint32 message_id = 2;
inline void CanFrame::clear_message_id() {
  _impl_.message_id_ = 0u;
}
inline uint32_t CanFrame::_internal_message_id() const {
  return _impl_.message_id_;
}
inline uint32_t CanFrame::message_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.message_id)
  return _internal_message_id();
}
inline void CanFrame::_internal_set_message_id(uint32_t value) {
  
  _impl_.message_id_ = value;
}
inline void CanFrame::set_message_id(uint32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.message_id)
}

// string interface_id = 3;
inline void CanFrame::clear_interface_id() {
  _impl_.interface_id_.ClearToEmpty();
}
inline const std::string& CanFrame::interface_id() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.interface_id)
  return _internal_interface_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanFrame::set_interface_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interface_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.interface_id)
}
inline std::string* CanFrame::mutable_interface_id() {
  std::string* _s = _internal_mutable_interface_id();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.interface_id)
  return _s;
}
inline const std::string& CanFrame::_internal_interface_id() const {
  return _impl_.interface_id_.Get();
}
inline void CanFrame::_internal_set_interface_id(const std::string& value) {
  
  _impl_.interface_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CanFrame::_internal_mutable_interface_id() {
  
  return _impl_.interface_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CanFrame::release_interface_id() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.interface_id)
  return _impl_.interface_id_.Release();
}
inline void CanFrame::set_allocated_interface_id(std::string* interface_id) {
  if (interface_id != nullptr) {
    
  } else {
    
  }
  _impl_.interface_id_.SetAllocated(interface_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_id_.IsDefault()) {
    _impl_.interface_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.interface_id)
}

// bytes byte_values = 4;
inline void CanFrame::clear_byte_values() {
  _impl_.byte_values_.ClearToEmpty();
}
inline const std::string& CanFrame::byte_values() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.byte_values)
  return _internal_byte_values();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanFrame::set_byte_values(ArgT0&& arg0, ArgT... args) {
 
 _impl_.byte_values_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.byte_values)
}
inline std::string* CanFrame::mutable_byte_values() {
  std::string* _s = _internal_mutable_byte_values();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.byte_values)
  return _s;
}
inline const std::string& CanFrame::_internal_byte_values() const {
  return _impl_.byte_values_.Get();
}
inline void CanFrame::_internal_set_byte_values(const std::string& value) {
  
  _impl_.byte_values_.Set(value, GetArenaForAllocation());
}
inline std::string* CanFrame::_internal_mutable_byte_values() {
  
  return _impl_.byte_values_.Mutable(GetArenaForAllocation());
}
inline std::string* CanFrame::release_byte_values() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.byte_values)
  return _impl_.byte_values_.Release();
}
inline void CanFrame::set_allocated_byte_values(std::string* byte_values) {
  if (byte_values != nullptr) {
    
  } else {
    
  }
  _impl_.byte_values_.SetAllocated(byte_values, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.byte_values_.IsDefault()) {
    _impl_.byte_values_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.CanFrame.byte_values)
}

// -------------------------------------------------------------------

// DtcData

// sint64 relative_time_ms = 1;
inline void DtcData::clear_relative_time_ms() {
  _impl_.relative_time_ms_ = int64_t{0};
}
inline int64_t DtcData::_internal_relative_time_ms() const {
  return _impl_.relative_time_ms_;
}
inline int64_t DtcData::relative_time_ms() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.relative_time_ms)
  return _internal_relative_time_ms();
}
inline void DtcData::_internal_set_relative_time_ms(int64_t value) {
  
  _impl_.relative_time_ms_ = value;
}
inline void DtcData::set_relative_time_ms(int64_t value) {
  _internal_set_relative_time_ms(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.relative_time_ms)
}

// repeated string active_dtc_codes = 2;
inline int DtcData::_internal_active_dtc_codes_size() const {
  return _impl_.active_dtc_codes_.size();
}
inline int DtcData::active_dtc_codes_size() const {
  return _internal_active_dtc_codes_size();
}
inline void DtcData::clear_active_dtc_codes() {
  _impl_.active_dtc_codes_.Clear();
}
inline std::string* DtcData::add_active_dtc_codes() {
  std::string* _s = _internal_add_active_dtc_codes();
  // @@protoc_insertion_point(field_add_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
  return _s;
}
inline const std::string& DtcData::_internal_active_dtc_codes(int index) const {
  return _impl_.active_dtc_codes_.Get(index);
}
inline const std::string& DtcData::active_dtc_codes(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
  return _internal_active_dtc_codes(index);
}
inline std::string* DtcData::mutable_active_dtc_codes(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
  return _impl_.active_dtc_codes_.Mutable(index);
}
inline void DtcData::set_active_dtc_codes(int index, const std::string& value) {
  _impl_.active_dtc_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline void DtcData::set_active_dtc_codes(int index, std::string&& value) {
  _impl_.active_dtc_codes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline void DtcData::set_active_dtc_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.active_dtc_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline void DtcData::set_active_dtc_codes(int index, const char* value, size_t size) {
  _impl_.active_dtc_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline std::string* DtcData::_internal_add_active_dtc_codes() {
  return _impl_.active_dtc_codes_.Add();
}
inline void DtcData::add_active_dtc_codes(const std::string& value) {
  _impl_.active_dtc_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline void DtcData::add_active_dtc_codes(std::string&& value) {
  _impl_.active_dtc_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline void DtcData::add_active_dtc_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.active_dtc_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline void DtcData::add_active_dtc_codes(const char* value, size_t size) {
  _impl_.active_dtc_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DtcData::active_dtc_codes() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
  return _impl_.active_dtc_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DtcData::mutable_active_dtc_codes() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.VehicleDataMsg.DtcData.active_dtc_codes)
  return &_impl_.active_dtc_codes_;
}

// -------------------------------------------------------------------

// Geohash

// string geohash_string = 1;
inline void Geohash::clear_geohash_string() {
  _impl_.geohash_string_.ClearToEmpty();
}
inline const std::string& Geohash::geohash_string() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.geohash_string)
  return _internal_geohash_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Geohash::set_geohash_string(ArgT0&& arg0, ArgT... args) {
 
 _impl_.geohash_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.geohash_string)
}
inline std::string* Geohash::mutable_geohash_string() {
  std::string* _s = _internal_mutable_geohash_string();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.geohash_string)
  return _s;
}
inline const std::string& Geohash::_internal_geohash_string() const {
  return _impl_.geohash_string_.Get();
}
inline void Geohash::_internal_set_geohash_string(const std::string& value) {
  
  _impl_.geohash_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Geohash::_internal_mutable_geohash_string() {
  
  return _impl_.geohash_string_.Mutable(GetArenaForAllocation());
}
inline std::string* Geohash::release_geohash_string() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.geohash_string)
  return _impl_.geohash_string_.Release();
}
inline void Geohash::set_allocated_geohash_string(std::string* geohash_string) {
  if (geohash_string != nullptr) {
    
  } else {
    
  }
  _impl_.geohash_string_.SetAllocated(geohash_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.geohash_string_.IsDefault()) {
    _impl_.geohash_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.geohash_string)
}

// string prev_reported_geohash_string = 2;
inline void Geohash::clear_prev_reported_geohash_string() {
  _impl_.prev_reported_geohash_string_.ClearToEmpty();
}
inline const std::string& Geohash::prev_reported_geohash_string() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.prev_reported_geohash_string)
  return _internal_prev_reported_geohash_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Geohash::set_prev_reported_geohash_string(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_reported_geohash_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.prev_reported_geohash_string)
}
inline std::string* Geohash::mutable_prev_reported_geohash_string() {
  std::string* _s = _internal_mutable_prev_reported_geohash_string();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.prev_reported_geohash_string)
  return _s;
}
inline const std::string& Geohash::_internal_prev_reported_geohash_string() const {
  return _impl_.prev_reported_geohash_string_.Get();
}
inline void Geohash::_internal_set_prev_reported_geohash_string(const std::string& value) {
  
  _impl_.prev_reported_geohash_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Geohash::_internal_mutable_prev_reported_geohash_string() {
  
  return _impl_.prev_reported_geohash_string_.Mutable(GetArenaForAllocation());
}
inline std::string* Geohash::release_prev_reported_geohash_string() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.prev_reported_geohash_string)
  return _impl_.prev_reported_geohash_string_.Release();
}
inline void Geohash::set_allocated_prev_reported_geohash_string(std::string* prev_reported_geohash_string) {
  if (prev_reported_geohash_string != nullptr) {
    
  } else {
    
  }
  _impl_.prev_reported_geohash_string_.SetAllocated(prev_reported_geohash_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_reported_geohash_string_.IsDefault()) {
    _impl_.prev_reported_geohash_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.Geohash.prev_reported_geohash_string)
}

// -------------------------------------------------------------------

// S3Object

// string key = 1;
inline void S3Object::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& S3Object::key() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3Object::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.key)
}
inline std::string* S3Object::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.key)
  return _s;
}
inline const std::string& S3Object::_internal_key() const {
  return _impl_.key_.Get();
}
inline void S3Object::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* S3Object::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* S3Object::release_key() {
  // @@protoc_insertion_point(field_release:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.key)
  return _impl_.key_.Release();
}
inline void S3Object::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.key)
}

// .Aws.IoTFleetWise.Schemas.VehicleDataMsg.DataFormat data_format = 2;
inline void S3Object::clear_data_format() {
  _impl_.data_format_ = 0;
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat S3Object::_internal_data_format() const {
  return static_cast< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat >(_impl_.data_format_);
}
inline ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat S3Object::data_format() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.data_format)
  return _internal_data_format();
}
inline void S3Object::_internal_set_data_format(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat value) {
  
  _impl_.data_format_ = value;
}
inline void S3Object::set_data_format(::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat value) {
  _internal_set_data_format(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.VehicleDataMsg.S3Object.data_format)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VehicleDataMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat>() {
  return ::Aws::IoTFleetWise::Schemas::VehicleDataMsg::DataFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5fdata_2eproto
