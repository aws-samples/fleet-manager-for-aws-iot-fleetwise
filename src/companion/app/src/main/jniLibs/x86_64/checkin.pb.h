// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: checkin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_checkin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_checkin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_checkin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_checkin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_checkin_2eproto;
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CheckinMsg {
class Checkin;
struct CheckinDefaultTypeInternal;
extern CheckinDefaultTypeInternal _Checkin_default_instance_;
}  // namespace CheckinMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws
PROTOBUF_NAMESPACE_OPEN
template<> ::Aws::IoTFleetWise::Schemas::CheckinMsg::Checkin* Arena::CreateMaybeMessage<::Aws::IoTFleetWise::Schemas::CheckinMsg::Checkin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Aws {
namespace IoTFleetWise {
namespace Schemas {
namespace CheckinMsg {

// ===================================================================

class Checkin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin) */ {
 public:
  inline Checkin() : Checkin(nullptr) {}
  ~Checkin() override;
  explicit PROTOBUF_CONSTEXPR Checkin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Checkin(const Checkin& from);
  Checkin(Checkin&& from) noexcept
    : Checkin() {
    *this = ::std::move(from);
  }

  inline Checkin& operator=(const Checkin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Checkin& operator=(Checkin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Checkin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Checkin* internal_default_instance() {
    return reinterpret_cast<const Checkin*>(
               &_Checkin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Checkin& a, Checkin& b) {
    a.Swap(&b);
  }
  inline void Swap(Checkin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Checkin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Checkin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Checkin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Checkin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Checkin& from) {
    Checkin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Checkin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin";
  }
  protected:
  explicit Checkin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentSyncIdsFieldNumber = 1,
    kTimestampMsEpochFieldNumber = 2,
  };
  // repeated string document_sync_ids = 1;
  int document_sync_ids_size() const;
  private:
  int _internal_document_sync_ids_size() const;
  public:
  void clear_document_sync_ids();
  const std::string& document_sync_ids(int index) const;
  std::string* mutable_document_sync_ids(int index);
  void set_document_sync_ids(int index, const std::string& value);
  void set_document_sync_ids(int index, std::string&& value);
  void set_document_sync_ids(int index, const char* value);
  void set_document_sync_ids(int index, const char* value, size_t size);
  std::string* add_document_sync_ids();
  void add_document_sync_ids(const std::string& value);
  void add_document_sync_ids(std::string&& value);
  void add_document_sync_ids(const char* value);
  void add_document_sync_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& document_sync_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_document_sync_ids();
  private:
  const std::string& _internal_document_sync_ids(int index) const;
  std::string* _internal_add_document_sync_ids();
  public:

  // uint64 timestamp_ms_epoch = 2;
  void clear_timestamp_ms_epoch();
  uint64_t timestamp_ms_epoch() const;
  void set_timestamp_ms_epoch(uint64_t value);
  private:
  uint64_t _internal_timestamp_ms_epoch() const;
  void _internal_set_timestamp_ms_epoch(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> document_sync_ids_;
    uint64_t timestamp_ms_epoch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_checkin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Checkin

// repeated string document_sync_ids = 1;
inline int Checkin::_internal_document_sync_ids_size() const {
  return _impl_.document_sync_ids_.size();
}
inline int Checkin::document_sync_ids_size() const {
  return _internal_document_sync_ids_size();
}
inline void Checkin::clear_document_sync_ids() {
  _impl_.document_sync_ids_.Clear();
}
inline std::string* Checkin::add_document_sync_ids() {
  std::string* _s = _internal_add_document_sync_ids();
  // @@protoc_insertion_point(field_add_mutable:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
  return _s;
}
inline const std::string& Checkin::_internal_document_sync_ids(int index) const {
  return _impl_.document_sync_ids_.Get(index);
}
inline const std::string& Checkin::document_sync_ids(int index) const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
  return _internal_document_sync_ids(index);
}
inline std::string* Checkin::mutable_document_sync_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
  return _impl_.document_sync_ids_.Mutable(index);
}
inline void Checkin::set_document_sync_ids(int index, const std::string& value) {
  _impl_.document_sync_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline void Checkin::set_document_sync_ids(int index, std::string&& value) {
  _impl_.document_sync_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline void Checkin::set_document_sync_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.document_sync_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline void Checkin::set_document_sync_ids(int index, const char* value, size_t size) {
  _impl_.document_sync_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline std::string* Checkin::_internal_add_document_sync_ids() {
  return _impl_.document_sync_ids_.Add();
}
inline void Checkin::add_document_sync_ids(const std::string& value) {
  _impl_.document_sync_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline void Checkin::add_document_sync_ids(std::string&& value) {
  _impl_.document_sync_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline void Checkin::add_document_sync_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.document_sync_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline void Checkin::add_document_sync_ids(const char* value, size_t size) {
  _impl_.document_sync_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Checkin::document_sync_ids() const {
  // @@protoc_insertion_point(field_list:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
  return _impl_.document_sync_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Checkin::mutable_document_sync_ids() {
  // @@protoc_insertion_point(field_mutable_list:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.document_sync_ids)
  return &_impl_.document_sync_ids_;
}

// uint64 timestamp_ms_epoch = 2;
inline void Checkin::clear_timestamp_ms_epoch() {
  _impl_.timestamp_ms_epoch_ = uint64_t{0u};
}
inline uint64_t Checkin::_internal_timestamp_ms_epoch() const {
  return _impl_.timestamp_ms_epoch_;
}
inline uint64_t Checkin::timestamp_ms_epoch() const {
  // @@protoc_insertion_point(field_get:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.timestamp_ms_epoch)
  return _internal_timestamp_ms_epoch();
}
inline void Checkin::_internal_set_timestamp_ms_epoch(uint64_t value) {
  
  _impl_.timestamp_ms_epoch_ = value;
}
inline void Checkin::set_timestamp_ms_epoch(uint64_t value) {
  _internal_set_timestamp_ms_epoch(value);
  // @@protoc_insertion_point(field_set:Aws.IoTFleetWise.Schemas.CheckinMsg.Checkin.timestamp_ms_epoch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace CheckinMsg
}  // namespace Schemas
}  // namespace IoTFleetWise
}  // namespace Aws

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_checkin_2eproto
